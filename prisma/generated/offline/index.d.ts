
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model superAdmin
 * 
 */
export type superAdmin = $Result.DefaultSelection<Prisma.$superAdminPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model Settings
 * 
 */
export type Settings = $Result.DefaultSelection<Prisma.$SettingsPayload>
/**
 * Model Warehouses
 * 
 */
export type Warehouses = $Result.DefaultSelection<Prisma.$WarehousesPayload>
/**
 * Model Sale
 * 
 */
export type Sale = $Result.DefaultSelection<Prisma.$SalePayload>
/**
 * Model SaleItem
 * 
 */
export type SaleItem = $Result.DefaultSelection<Prisma.$SaleItemPayload>
/**
 * Model Purchase
 * 
 */
export type Purchase = $Result.DefaultSelection<Prisma.$PurchasePayload>
/**
 * Model PurchaseItem
 * 
 */
export type PurchaseItem = $Result.DefaultSelection<Prisma.$PurchaseItemPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Supplier
 * 
 */
export type Supplier = $Result.DefaultSelection<Prisma.$SupplierPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model PaymentMethod
 * 
 */
export type PaymentMethod = $Result.DefaultSelection<Prisma.$PaymentMethodPayload>
/**
 * Model ReceiptSettings
 * 
 */
export type ReceiptSettings = $Result.DefaultSelection<Prisma.$ReceiptSettingsPayload>
/**
 * Model BalancePayment
 * 
 */
export type BalancePayment = $Result.DefaultSelection<Prisma.$BalancePaymentPayload>
/**
 * Model Quotation
 * 
 */
export type Quotation = $Result.DefaultSelection<Prisma.$QuotationPayload>
/**
 * Model QuotationItem
 * 
 */
export type QuotationItem = $Result.DefaultSelection<Prisma.$QuotationItemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const mode: {
  dark: 'dark',
  light: 'light'
};

export type mode = (typeof mode)[keyof typeof mode]


export const role: {
  admin: 'admin',
  sales: 'sales',
  purchase: 'purchase'
};

export type role = (typeof role)[keyof typeof role]


export const unit: {
  kg: 'kg',
  piece: 'piece',
  liter: 'liter',
  meter: 'meter'
};

export type unit = (typeof unit)[keyof typeof unit]


export const type: {
  COMPANY: 'COMPANY',
  INDIVIDUAL: 'INDIVIDUAL',
  GOVERNMENT: 'GOVERNMENT',
  NON_PROFIT: 'NON_PROFIT',
  retal: 'retal',
  wholesale: 'wholesale'
};

export type type = (typeof type)[keyof typeof type]

}

export type mode = $Enums.mode

export const mode: typeof $Enums.mode

export type role = $Enums.role

export const role: typeof $Enums.role

export type unit = $Enums.unit

export const unit: typeof $Enums.unit

export type type = $Enums.type

export const type: typeof $Enums.type

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more SuperAdmins
 * const superAdmins = await prisma.superAdmin.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more SuperAdmins
   * const superAdmins = await prisma.superAdmin.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.superAdmin`: Exposes CRUD operations for the **superAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuperAdmins
    * const superAdmins = await prisma.superAdmin.findMany()
    * ```
    */
  get superAdmin(): Prisma.superAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **Settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.SettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.warehouses`: Exposes CRUD operations for the **Warehouses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Warehouses
    * const warehouses = await prisma.warehouses.findMany()
    * ```
    */
  get warehouses(): Prisma.WarehousesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sale`: Exposes CRUD operations for the **Sale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sale.findMany()
    * ```
    */
  get sale(): Prisma.SaleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.saleItem`: Exposes CRUD operations for the **SaleItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaleItems
    * const saleItems = await prisma.saleItem.findMany()
    * ```
    */
  get saleItem(): Prisma.SaleItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.purchase`: Exposes CRUD operations for the **Purchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Purchases
    * const purchases = await prisma.purchase.findMany()
    * ```
    */
  get purchase(): Prisma.PurchaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.purchaseItem`: Exposes CRUD operations for the **PurchaseItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseItems
    * const purchaseItems = await prisma.purchaseItem.findMany()
    * ```
    */
  get purchaseItem(): Prisma.PurchaseItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.supplier`: Exposes CRUD operations for the **Supplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.supplier.findMany()
    * ```
    */
  get supplier(): Prisma.SupplierDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentMethod`: Exposes CRUD operations for the **PaymentMethod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentMethods
    * const paymentMethods = await prisma.paymentMethod.findMany()
    * ```
    */
  get paymentMethod(): Prisma.PaymentMethodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.receiptSettings`: Exposes CRUD operations for the **ReceiptSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReceiptSettings
    * const receiptSettings = await prisma.receiptSettings.findMany()
    * ```
    */
  get receiptSettings(): Prisma.ReceiptSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.balancePayment`: Exposes CRUD operations for the **BalancePayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BalancePayments
    * const balancePayments = await prisma.balancePayment.findMany()
    * ```
    */
  get balancePayment(): Prisma.BalancePaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quotation`: Exposes CRUD operations for the **Quotation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quotations
    * const quotations = await prisma.quotation.findMany()
    * ```
    */
  get quotation(): Prisma.QuotationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quotationItem`: Exposes CRUD operations for the **QuotationItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuotationItems
    * const quotationItems = await prisma.quotationItem.findMany()
    * ```
    */
  get quotationItem(): Prisma.QuotationItemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    superAdmin: 'superAdmin',
    users: 'users',
    Settings: 'Settings',
    Warehouses: 'Warehouses',
    Sale: 'Sale',
    SaleItem: 'SaleItem',
    Purchase: 'Purchase',
    PurchaseItem: 'PurchaseItem',
    Customer: 'Customer',
    Supplier: 'Supplier',
    Product: 'Product',
    PaymentMethod: 'PaymentMethod',
    ReceiptSettings: 'ReceiptSettings',
    BalancePayment: 'BalancePayment',
    Quotation: 'Quotation',
    QuotationItem: 'QuotationItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "superAdmin" | "users" | "settings" | "warehouses" | "sale" | "saleItem" | "purchase" | "purchaseItem" | "customer" | "supplier" | "product" | "paymentMethod" | "receiptSettings" | "balancePayment" | "quotation" | "quotationItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      superAdmin: {
        payload: Prisma.$superAdminPayload<ExtArgs>
        fields: Prisma.superAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.superAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.superAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>
          }
          findFirst: {
            args: Prisma.superAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.superAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>
          }
          findMany: {
            args: Prisma.superAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>[]
          }
          create: {
            args: Prisma.superAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>
          }
          createMany: {
            args: Prisma.superAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.superAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>[]
          }
          delete: {
            args: Prisma.superAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>
          }
          update: {
            args: Prisma.superAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>
          }
          deleteMany: {
            args: Prisma.superAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.superAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.superAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>[]
          }
          upsert: {
            args: Prisma.superAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$superAdminPayload>
          }
          aggregate: {
            args: Prisma.SuperAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuperAdmin>
          }
          groupBy: {
            args: Prisma.superAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuperAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.superAdminCountArgs<ExtArgs>
            result: $Utils.Optional<SuperAdminCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Settings: {
        payload: Prisma.$SettingsPayload<ExtArgs>
        fields: Prisma.SettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findFirst: {
            args: Prisma.SettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findMany: {
            args: Prisma.SettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          create: {
            args: Prisma.SettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          createMany: {
            args: Prisma.SettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          delete: {
            args: Prisma.SettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          update: {
            args: Prisma.SettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          deleteMany: {
            args: Prisma.SettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          upsert: {
            args: Prisma.SettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          aggregate: {
            args: Prisma.SettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSettings>
          }
          groupBy: {
            args: Prisma.SettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SettingsCountAggregateOutputType> | number
          }
        }
      }
      Warehouses: {
        payload: Prisma.$WarehousesPayload<ExtArgs>
        fields: Prisma.WarehousesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarehousesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarehousesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>
          }
          findFirst: {
            args: Prisma.WarehousesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarehousesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>
          }
          findMany: {
            args: Prisma.WarehousesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>[]
          }
          create: {
            args: Prisma.WarehousesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>
          }
          createMany: {
            args: Prisma.WarehousesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WarehousesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>[]
          }
          delete: {
            args: Prisma.WarehousesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>
          }
          update: {
            args: Prisma.WarehousesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>
          }
          deleteMany: {
            args: Prisma.WarehousesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarehousesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WarehousesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>[]
          }
          upsert: {
            args: Prisma.WarehousesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousesPayload>
          }
          aggregate: {
            args: Prisma.WarehousesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarehouses>
          }
          groupBy: {
            args: Prisma.WarehousesGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarehousesGroupByOutputType>[]
          }
          count: {
            args: Prisma.WarehousesCountArgs<ExtArgs>
            result: $Utils.Optional<WarehousesCountAggregateOutputType> | number
          }
        }
      }
      Sale: {
        payload: Prisma.$SalePayload<ExtArgs>
        fields: Prisma.SaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findFirst: {
            args: Prisma.SaleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findMany: {
            args: Prisma.SaleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          create: {
            args: Prisma.SaleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          createMany: {
            args: Prisma.SaleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          delete: {
            args: Prisma.SaleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          update: {
            args: Prisma.SaleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          deleteMany: {
            args: Prisma.SaleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SaleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          upsert: {
            args: Prisma.SaleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          aggregate: {
            args: Prisma.SaleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSale>
          }
          groupBy: {
            args: Prisma.SaleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleCountArgs<ExtArgs>
            result: $Utils.Optional<SaleCountAggregateOutputType> | number
          }
        }
      }
      SaleItem: {
        payload: Prisma.$SaleItemPayload<ExtArgs>
        fields: Prisma.SaleItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>
          }
          findFirst: {
            args: Prisma.SaleItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>
          }
          findMany: {
            args: Prisma.SaleItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>[]
          }
          create: {
            args: Prisma.SaleItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>
          }
          createMany: {
            args: Prisma.SaleItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaleItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>[]
          }
          delete: {
            args: Prisma.SaleItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>
          }
          update: {
            args: Prisma.SaleItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>
          }
          deleteMany: {
            args: Prisma.SaleItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaleItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SaleItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>[]
          }
          upsert: {
            args: Prisma.SaleItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleItemPayload>
          }
          aggregate: {
            args: Prisma.SaleItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaleItem>
          }
          groupBy: {
            args: Prisma.SaleItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaleItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleItemCountArgs<ExtArgs>
            result: $Utils.Optional<SaleItemCountAggregateOutputType> | number
          }
        }
      }
      Purchase: {
        payload: Prisma.$PurchasePayload<ExtArgs>
        fields: Prisma.PurchaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          findFirst: {
            args: Prisma.PurchaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          findMany: {
            args: Prisma.PurchaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>[]
          }
          create: {
            args: Prisma.PurchaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          createMany: {
            args: Prisma.PurchaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>[]
          }
          delete: {
            args: Prisma.PurchaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          update: {
            args: Prisma.PurchaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          deleteMany: {
            args: Prisma.PurchaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PurchaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>[]
          }
          upsert: {
            args: Prisma.PurchaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePayload>
          }
          aggregate: {
            args: Prisma.PurchaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchase>
          }
          groupBy: {
            args: Prisma.PurchaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseCountAggregateOutputType> | number
          }
        }
      }
      PurchaseItem: {
        payload: Prisma.$PurchaseItemPayload<ExtArgs>
        fields: Prisma.PurchaseItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>
          }
          findFirst: {
            args: Prisma.PurchaseItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>
          }
          findMany: {
            args: Prisma.PurchaseItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>[]
          }
          create: {
            args: Prisma.PurchaseItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>
          }
          createMany: {
            args: Prisma.PurchaseItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>[]
          }
          delete: {
            args: Prisma.PurchaseItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>
          }
          update: {
            args: Prisma.PurchaseItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PurchaseItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>[]
          }
          upsert: {
            args: Prisma.PurchaseItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseItemPayload>
          }
          aggregate: {
            args: Prisma.PurchaseItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchaseItem>
          }
          groupBy: {
            args: Prisma.PurchaseItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseItemCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseItemCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Supplier: {
        payload: Prisma.$SupplierPayload<ExtArgs>
        fields: Prisma.SupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findFirst: {
            args: Prisma.SupplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findMany: {
            args: Prisma.SupplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          create: {
            args: Prisma.SupplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          createMany: {
            args: Prisma.SupplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          delete: {
            args: Prisma.SupplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          update: {
            args: Prisma.SupplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          deleteMany: {
            args: Prisma.SupplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SupplierUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          upsert: {
            args: Prisma.SupplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          aggregate: {
            args: Prisma.SupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupplier>
          }
          groupBy: {
            args: Prisma.SupplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCountArgs<ExtArgs>
            result: $Utils.Optional<SupplierCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      PaymentMethod: {
        payload: Prisma.$PaymentMethodPayload<ExtArgs>
        fields: Prisma.PaymentMethodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentMethodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentMethodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findFirst: {
            args: Prisma.PaymentMethodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentMethodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findMany: {
            args: Prisma.PaymentMethodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
          }
          create: {
            args: Prisma.PaymentMethodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          createMany: {
            args: Prisma.PaymentMethodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentMethodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
          }
          delete: {
            args: Prisma.PaymentMethodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          update: {
            args: Prisma.PaymentMethodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          deleteMany: {
            args: Prisma.PaymentMethodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentMethodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentMethodUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
          }
          upsert: {
            args: Prisma.PaymentMethodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          aggregate: {
            args: Prisma.PaymentMethodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentMethod>
          }
          groupBy: {
            args: Prisma.PaymentMethodGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentMethodGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentMethodCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentMethodCountAggregateOutputType> | number
          }
        }
      }
      ReceiptSettings: {
        payload: Prisma.$ReceiptSettingsPayload<ExtArgs>
        fields: Prisma.ReceiptSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceiptSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceiptSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>
          }
          findFirst: {
            args: Prisma.ReceiptSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceiptSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>
          }
          findMany: {
            args: Prisma.ReceiptSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>[]
          }
          create: {
            args: Prisma.ReceiptSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>
          }
          createMany: {
            args: Prisma.ReceiptSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceiptSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>[]
          }
          delete: {
            args: Prisma.ReceiptSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>
          }
          update: {
            args: Prisma.ReceiptSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>
          }
          deleteMany: {
            args: Prisma.ReceiptSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceiptSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReceiptSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>[]
          }
          upsert: {
            args: Prisma.ReceiptSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceiptSettingsPayload>
          }
          aggregate: {
            args: Prisma.ReceiptSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceiptSettings>
          }
          groupBy: {
            args: Prisma.ReceiptSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceiptSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceiptSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<ReceiptSettingsCountAggregateOutputType> | number
          }
        }
      }
      BalancePayment: {
        payload: Prisma.$BalancePaymentPayload<ExtArgs>
        fields: Prisma.BalancePaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BalancePaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BalancePaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>
          }
          findFirst: {
            args: Prisma.BalancePaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BalancePaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>
          }
          findMany: {
            args: Prisma.BalancePaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>[]
          }
          create: {
            args: Prisma.BalancePaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>
          }
          createMany: {
            args: Prisma.BalancePaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BalancePaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>[]
          }
          delete: {
            args: Prisma.BalancePaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>
          }
          update: {
            args: Prisma.BalancePaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>
          }
          deleteMany: {
            args: Prisma.BalancePaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BalancePaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BalancePaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>[]
          }
          upsert: {
            args: Prisma.BalancePaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalancePaymentPayload>
          }
          aggregate: {
            args: Prisma.BalancePaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBalancePayment>
          }
          groupBy: {
            args: Prisma.BalancePaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<BalancePaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.BalancePaymentCountArgs<ExtArgs>
            result: $Utils.Optional<BalancePaymentCountAggregateOutputType> | number
          }
        }
      }
      Quotation: {
        payload: Prisma.$QuotationPayload<ExtArgs>
        fields: Prisma.QuotationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuotationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuotationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          findFirst: {
            args: Prisma.QuotationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuotationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          findMany: {
            args: Prisma.QuotationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>[]
          }
          create: {
            args: Prisma.QuotationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          createMany: {
            args: Prisma.QuotationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuotationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>[]
          }
          delete: {
            args: Prisma.QuotationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          update: {
            args: Prisma.QuotationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          deleteMany: {
            args: Prisma.QuotationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuotationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuotationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>[]
          }
          upsert: {
            args: Prisma.QuotationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          aggregate: {
            args: Prisma.QuotationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuotation>
          }
          groupBy: {
            args: Prisma.QuotationGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuotationGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuotationCountArgs<ExtArgs>
            result: $Utils.Optional<QuotationCountAggregateOutputType> | number
          }
        }
      }
      QuotationItem: {
        payload: Prisma.$QuotationItemPayload<ExtArgs>
        fields: Prisma.QuotationItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuotationItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuotationItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>
          }
          findFirst: {
            args: Prisma.QuotationItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuotationItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>
          }
          findMany: {
            args: Prisma.QuotationItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>[]
          }
          create: {
            args: Prisma.QuotationItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>
          }
          createMany: {
            args: Prisma.QuotationItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuotationItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>[]
          }
          delete: {
            args: Prisma.QuotationItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>
          }
          update: {
            args: Prisma.QuotationItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>
          }
          deleteMany: {
            args: Prisma.QuotationItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuotationItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuotationItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>[]
          }
          upsert: {
            args: Prisma.QuotationItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationItemPayload>
          }
          aggregate: {
            args: Prisma.QuotationItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuotationItem>
          }
          groupBy: {
            args: Prisma.QuotationItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuotationItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuotationItemCountArgs<ExtArgs>
            result: $Utils.Optional<QuotationItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    superAdmin?: superAdminOmit
    users?: usersOmit
    settings?: SettingsOmit
    warehouses?: WarehousesOmit
    sale?: SaleOmit
    saleItem?: SaleItemOmit
    purchase?: PurchaseOmit
    purchaseItem?: PurchaseItemOmit
    customer?: CustomerOmit
    supplier?: SupplierOmit
    product?: ProductOmit
    paymentMethod?: PaymentMethodOmit
    receiptSettings?: ReceiptSettingsOmit
    balancePayment?: BalancePaymentOmit
    quotation?: QuotationOmit
    quotationItem?: QuotationItemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type WarehousesCountOutputType
   */

  export type WarehousesCountOutputType = {
    users: number
    products: number
    customer: number
    saleItem: number
    sale: number
    paymentMethod: number
    purchase: number
    purchaseItem: number
    supplier: number
    receiptSettings: number
    balancePayment: number
    quotation: number
    quotationItem: number
  }

  export type WarehousesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | WarehousesCountOutputTypeCountUsersArgs
    products?: boolean | WarehousesCountOutputTypeCountProductsArgs
    customer?: boolean | WarehousesCountOutputTypeCountCustomerArgs
    saleItem?: boolean | WarehousesCountOutputTypeCountSaleItemArgs
    sale?: boolean | WarehousesCountOutputTypeCountSaleArgs
    paymentMethod?: boolean | WarehousesCountOutputTypeCountPaymentMethodArgs
    purchase?: boolean | WarehousesCountOutputTypeCountPurchaseArgs
    purchaseItem?: boolean | WarehousesCountOutputTypeCountPurchaseItemArgs
    supplier?: boolean | WarehousesCountOutputTypeCountSupplierArgs
    receiptSettings?: boolean | WarehousesCountOutputTypeCountReceiptSettingsArgs
    balancePayment?: boolean | WarehousesCountOutputTypeCountBalancePaymentArgs
    quotation?: boolean | WarehousesCountOutputTypeCountQuotationArgs
    quotationItem?: boolean | WarehousesCountOutputTypeCountQuotationItemArgs
  }

  // Custom InputTypes
  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehousesCountOutputType
     */
    select?: WarehousesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountSaleItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleItemWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountSaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountPaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMethodWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountPurchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountPurchaseItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseItemWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountSupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountReceiptSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptSettingsWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountBalancePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalancePaymentWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountQuotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationWhereInput
  }

  /**
   * WarehousesCountOutputType without action
   */
  export type WarehousesCountOutputTypeCountQuotationItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationItemWhereInput
  }


  /**
   * Count Type SaleCountOutputType
   */

  export type SaleCountOutputType = {
    saleItems: number
    paymentMethod: number
    balancePayment: number
  }

  export type SaleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    saleItems?: boolean | SaleCountOutputTypeCountSaleItemsArgs
    paymentMethod?: boolean | SaleCountOutputTypeCountPaymentMethodArgs
    balancePayment?: boolean | SaleCountOutputTypeCountBalancePaymentArgs
  }

  // Custom InputTypes
  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleCountOutputType
     */
    select?: SaleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeCountSaleItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleItemWhereInput
  }

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeCountPaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMethodWhereInput
  }

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeCountBalancePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalancePaymentWhereInput
  }


  /**
   * Count Type PurchaseCountOutputType
   */

  export type PurchaseCountOutputType = {
    purchaseItem: number
  }

  export type PurchaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaseItem?: boolean | PurchaseCountOutputTypeCountPurchaseItemArgs
  }

  // Custom InputTypes
  /**
   * PurchaseCountOutputType without action
   */
  export type PurchaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseCountOutputType
     */
    select?: PurchaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PurchaseCountOutputType without action
   */
  export type PurchaseCountOutputTypeCountPurchaseItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseItemWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    Sale: number
    saleItem: number
    balancePayment: number
    quotation: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Sale?: boolean | CustomerCountOutputTypeCountSaleArgs
    saleItem?: boolean | CustomerCountOutputTypeCountSaleItemArgs
    balancePayment?: boolean | CustomerCountOutputTypeCountBalancePaymentArgs
    quotation?: boolean | CustomerCountOutputTypeCountQuotationArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountSaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountSaleItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleItemWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountBalancePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalancePaymentWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountQuotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationWhereInput
  }


  /**
   * Count Type SupplierCountOutputType
   */

  export type SupplierCountOutputType = {
    purchase: number
  }

  export type SupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchase?: boolean | SupplierCountOutputTypeCountPurchaseArgs
  }

  // Custom InputTypes
  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCountOutputType
     */
    select?: SupplierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountPurchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    SaleItem: number
    purchaseItem: number
    quotationItem: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SaleItem?: boolean | ProductCountOutputTypeCountSaleItemArgs
    purchaseItem?: boolean | ProductCountOutputTypeCountPurchaseItemArgs
    quotationItem?: boolean | ProductCountOutputTypeCountQuotationItemArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSaleItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountPurchaseItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountQuotationItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationItemWhereInput
  }


  /**
   * Count Type QuotationCountOutputType
   */

  export type QuotationCountOutputType = {
    quotationItems: number
  }

  export type QuotationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotationItems?: boolean | QuotationCountOutputTypeCountQuotationItemsArgs
  }

  // Custom InputTypes
  /**
   * QuotationCountOutputType without action
   */
  export type QuotationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationCountOutputType
     */
    select?: QuotationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuotationCountOutputType without action
   */
  export type QuotationCountOutputTypeCountQuotationItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model superAdmin
   */

  export type AggregateSuperAdmin = {
    _count: SuperAdminCountAggregateOutputType | null
    _min: SuperAdminMinAggregateOutputType | null
    _max: SuperAdminMaxAggregateOutputType | null
  }

  export type SuperAdminMinAggregateOutputType = {
    id: string | null
    userName: string | null
    email: string | null
    password: string | null
    role: string | null
    lastLogin: Date | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type SuperAdminMaxAggregateOutputType = {
    id: string | null
    userName: string | null
    email: string | null
    password: string | null
    role: string | null
    lastLogin: Date | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type SuperAdminCountAggregateOutputType = {
    id: number
    userName: number
    email: number
    password: number
    role: number
    lastLogin: number
    warehousesId: number
    sync: number
    syncedAt: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    _all: number
  }


  export type SuperAdminMinAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    role?: true
    lastLogin?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type SuperAdminMaxAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    role?: true
    lastLogin?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type SuperAdminCountAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    password?: true
    role?: true
    lastLogin?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type SuperAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which superAdmin to aggregate.
     */
    where?: superAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of superAdmins to fetch.
     */
    orderBy?: superAdminOrderByWithRelationInput | superAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: superAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` superAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` superAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned superAdmins
    **/
    _count?: true | SuperAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuperAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuperAdminMaxAggregateInputType
  }

  export type GetSuperAdminAggregateType<T extends SuperAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateSuperAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuperAdmin[P]>
      : GetScalarType<T[P], AggregateSuperAdmin[P]>
  }




  export type superAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: superAdminWhereInput
    orderBy?: superAdminOrderByWithAggregationInput | superAdminOrderByWithAggregationInput[]
    by: SuperAdminScalarFieldEnum[] | SuperAdminScalarFieldEnum
    having?: superAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuperAdminCountAggregateInputType | true
    _min?: SuperAdminMinAggregateInputType
    _max?: SuperAdminMaxAggregateInputType
  }

  export type SuperAdminGroupByOutputType = {
    id: string
    userName: string
    email: string
    password: string
    role: string
    lastLogin: Date | null
    warehousesId: string | null
    sync: boolean
    syncedAt: Date | null
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    _count: SuperAdminCountAggregateOutputType | null
    _min: SuperAdminMinAggregateOutputType | null
    _max: SuperAdminMaxAggregateOutputType | null
  }

  type GetSuperAdminGroupByPayload<T extends superAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuperAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuperAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuperAdminGroupByOutputType[P]>
            : GetScalarType<T[P], SuperAdminGroupByOutputType[P]>
        }
      >
    >


  export type superAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    lastLogin?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["superAdmin"]>

  export type superAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    lastLogin?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["superAdmin"]>

  export type superAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    lastLogin?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["superAdmin"]>

  export type superAdminSelectScalar = {
    id?: boolean
    userName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    lastLogin?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }

  export type superAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userName" | "email" | "password" | "role" | "lastLogin" | "warehousesId" | "sync" | "syncedAt" | "createdAt" | "updatedAt" | "isDeleted", ExtArgs["result"]["superAdmin"]>

  export type $superAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "superAdmin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userName: string
      email: string
      password: string
      role: string
      lastLogin: Date | null
      warehousesId: string | null
      sync: boolean
      syncedAt: Date | null
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
    }, ExtArgs["result"]["superAdmin"]>
    composites: {}
  }

  type superAdminGetPayload<S extends boolean | null | undefined | superAdminDefaultArgs> = $Result.GetResult<Prisma.$superAdminPayload, S>

  type superAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<superAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuperAdminCountAggregateInputType | true
    }

  export interface superAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['superAdmin'], meta: { name: 'superAdmin' } }
    /**
     * Find zero or one SuperAdmin that matches the filter.
     * @param {superAdminFindUniqueArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends superAdminFindUniqueArgs>(args: SelectSubset<T, superAdminFindUniqueArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SuperAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {superAdminFindUniqueOrThrowArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends superAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, superAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {superAdminFindFirstArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends superAdminFindFirstArgs>(args?: SelectSubset<T, superAdminFindFirstArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {superAdminFindFirstOrThrowArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends superAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, superAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SuperAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {superAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuperAdmins
     * const superAdmins = await prisma.superAdmin.findMany()
     * 
     * // Get first 10 SuperAdmins
     * const superAdmins = await prisma.superAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const superAdminWithIdOnly = await prisma.superAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends superAdminFindManyArgs>(args?: SelectSubset<T, superAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SuperAdmin.
     * @param {superAdminCreateArgs} args - Arguments to create a SuperAdmin.
     * @example
     * // Create one SuperAdmin
     * const SuperAdmin = await prisma.superAdmin.create({
     *   data: {
     *     // ... data to create a SuperAdmin
     *   }
     * })
     * 
     */
    create<T extends superAdminCreateArgs>(args: SelectSubset<T, superAdminCreateArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SuperAdmins.
     * @param {superAdminCreateManyArgs} args - Arguments to create many SuperAdmins.
     * @example
     * // Create many SuperAdmins
     * const superAdmin = await prisma.superAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends superAdminCreateManyArgs>(args?: SelectSubset<T, superAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SuperAdmins and returns the data saved in the database.
     * @param {superAdminCreateManyAndReturnArgs} args - Arguments to create many SuperAdmins.
     * @example
     * // Create many SuperAdmins
     * const superAdmin = await prisma.superAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SuperAdmins and only return the `id`
     * const superAdminWithIdOnly = await prisma.superAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends superAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, superAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SuperAdmin.
     * @param {superAdminDeleteArgs} args - Arguments to delete one SuperAdmin.
     * @example
     * // Delete one SuperAdmin
     * const SuperAdmin = await prisma.superAdmin.delete({
     *   where: {
     *     // ... filter to delete one SuperAdmin
     *   }
     * })
     * 
     */
    delete<T extends superAdminDeleteArgs>(args: SelectSubset<T, superAdminDeleteArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SuperAdmin.
     * @param {superAdminUpdateArgs} args - Arguments to update one SuperAdmin.
     * @example
     * // Update one SuperAdmin
     * const superAdmin = await prisma.superAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends superAdminUpdateArgs>(args: SelectSubset<T, superAdminUpdateArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SuperAdmins.
     * @param {superAdminDeleteManyArgs} args - Arguments to filter SuperAdmins to delete.
     * @example
     * // Delete a few SuperAdmins
     * const { count } = await prisma.superAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends superAdminDeleteManyArgs>(args?: SelectSubset<T, superAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {superAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuperAdmins
     * const superAdmin = await prisma.superAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends superAdminUpdateManyArgs>(args: SelectSubset<T, superAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperAdmins and returns the data updated in the database.
     * @param {superAdminUpdateManyAndReturnArgs} args - Arguments to update many SuperAdmins.
     * @example
     * // Update many SuperAdmins
     * const superAdmin = await prisma.superAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SuperAdmins and only return the `id`
     * const superAdminWithIdOnly = await prisma.superAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends superAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, superAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SuperAdmin.
     * @param {superAdminUpsertArgs} args - Arguments to update or create a SuperAdmin.
     * @example
     * // Update or create a SuperAdmin
     * const superAdmin = await prisma.superAdmin.upsert({
     *   create: {
     *     // ... data to create a SuperAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuperAdmin we want to update
     *   }
     * })
     */
    upsert<T extends superAdminUpsertArgs>(args: SelectSubset<T, superAdminUpsertArgs<ExtArgs>>): Prisma__superAdminClient<$Result.GetResult<Prisma.$superAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SuperAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {superAdminCountArgs} args - Arguments to filter SuperAdmins to count.
     * @example
     * // Count the number of SuperAdmins
     * const count = await prisma.superAdmin.count({
     *   where: {
     *     // ... the filter for the SuperAdmins we want to count
     *   }
     * })
    **/
    count<T extends superAdminCountArgs>(
      args?: Subset<T, superAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuperAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuperAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuperAdminAggregateArgs>(args: Subset<T, SuperAdminAggregateArgs>): Prisma.PrismaPromise<GetSuperAdminAggregateType<T>>

    /**
     * Group by SuperAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {superAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends superAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: superAdminGroupByArgs['orderBy'] }
        : { orderBy?: superAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, superAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the superAdmin model
   */
  readonly fields: superAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for superAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__superAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the superAdmin model
   */
  interface superAdminFieldRefs {
    readonly id: FieldRef<"superAdmin", 'String'>
    readonly userName: FieldRef<"superAdmin", 'String'>
    readonly email: FieldRef<"superAdmin", 'String'>
    readonly password: FieldRef<"superAdmin", 'String'>
    readonly role: FieldRef<"superAdmin", 'String'>
    readonly lastLogin: FieldRef<"superAdmin", 'DateTime'>
    readonly warehousesId: FieldRef<"superAdmin", 'String'>
    readonly sync: FieldRef<"superAdmin", 'Boolean'>
    readonly syncedAt: FieldRef<"superAdmin", 'DateTime'>
    readonly createdAt: FieldRef<"superAdmin", 'DateTime'>
    readonly updatedAt: FieldRef<"superAdmin", 'DateTime'>
    readonly isDeleted: FieldRef<"superAdmin", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * superAdmin findUnique
   */
  export type superAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * Filter, which superAdmin to fetch.
     */
    where: superAdminWhereUniqueInput
  }

  /**
   * superAdmin findUniqueOrThrow
   */
  export type superAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * Filter, which superAdmin to fetch.
     */
    where: superAdminWhereUniqueInput
  }

  /**
   * superAdmin findFirst
   */
  export type superAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * Filter, which superAdmin to fetch.
     */
    where?: superAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of superAdmins to fetch.
     */
    orderBy?: superAdminOrderByWithRelationInput | superAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for superAdmins.
     */
    cursor?: superAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` superAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` superAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of superAdmins.
     */
    distinct?: SuperAdminScalarFieldEnum | SuperAdminScalarFieldEnum[]
  }

  /**
   * superAdmin findFirstOrThrow
   */
  export type superAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * Filter, which superAdmin to fetch.
     */
    where?: superAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of superAdmins to fetch.
     */
    orderBy?: superAdminOrderByWithRelationInput | superAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for superAdmins.
     */
    cursor?: superAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` superAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` superAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of superAdmins.
     */
    distinct?: SuperAdminScalarFieldEnum | SuperAdminScalarFieldEnum[]
  }

  /**
   * superAdmin findMany
   */
  export type superAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * Filter, which superAdmins to fetch.
     */
    where?: superAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of superAdmins to fetch.
     */
    orderBy?: superAdminOrderByWithRelationInput | superAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing superAdmins.
     */
    cursor?: superAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` superAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` superAdmins.
     */
    skip?: number
    distinct?: SuperAdminScalarFieldEnum | SuperAdminScalarFieldEnum[]
  }

  /**
   * superAdmin create
   */
  export type superAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * The data needed to create a superAdmin.
     */
    data: XOR<superAdminCreateInput, superAdminUncheckedCreateInput>
  }

  /**
   * superAdmin createMany
   */
  export type superAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many superAdmins.
     */
    data: superAdminCreateManyInput | superAdminCreateManyInput[]
  }

  /**
   * superAdmin createManyAndReturn
   */
  export type superAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * The data used to create many superAdmins.
     */
    data: superAdminCreateManyInput | superAdminCreateManyInput[]
  }

  /**
   * superAdmin update
   */
  export type superAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * The data needed to update a superAdmin.
     */
    data: XOR<superAdminUpdateInput, superAdminUncheckedUpdateInput>
    /**
     * Choose, which superAdmin to update.
     */
    where: superAdminWhereUniqueInput
  }

  /**
   * superAdmin updateMany
   */
  export type superAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update superAdmins.
     */
    data: XOR<superAdminUpdateManyMutationInput, superAdminUncheckedUpdateManyInput>
    /**
     * Filter which superAdmins to update
     */
    where?: superAdminWhereInput
    /**
     * Limit how many superAdmins to update.
     */
    limit?: number
  }

  /**
   * superAdmin updateManyAndReturn
   */
  export type superAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * The data used to update superAdmins.
     */
    data: XOR<superAdminUpdateManyMutationInput, superAdminUncheckedUpdateManyInput>
    /**
     * Filter which superAdmins to update
     */
    where?: superAdminWhereInput
    /**
     * Limit how many superAdmins to update.
     */
    limit?: number
  }

  /**
   * superAdmin upsert
   */
  export type superAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * The filter to search for the superAdmin to update in case it exists.
     */
    where: superAdminWhereUniqueInput
    /**
     * In case the superAdmin found by the `where` argument doesn't exist, create a new superAdmin with this data.
     */
    create: XOR<superAdminCreateInput, superAdminUncheckedCreateInput>
    /**
     * In case the superAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<superAdminUpdateInput, superAdminUncheckedUpdateInput>
  }

  /**
   * superAdmin delete
   */
  export type superAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
    /**
     * Filter which superAdmin to delete.
     */
    where: superAdminWhereUniqueInput
  }

  /**
   * superAdmin deleteMany
   */
  export type superAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which superAdmins to delete
     */
    where?: superAdminWhereInput
    /**
     * Limit how many superAdmins to delete.
     */
    limit?: number
  }

  /**
   * superAdmin without action
   */
  export type superAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the superAdmin
     */
    select?: superAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the superAdmin
     */
    omit?: superAdminOmit<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    email: string | null
    userName: string | null
    phoneNumber: string | null
    password: string | null
    role: $Enums.role | null
    warehousesId: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    email: string | null
    userName: string | null
    phoneNumber: string | null
    password: string | null
    role: $Enums.role | null
    warehousesId: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    userName: number
    phoneNumber: number
    password: number
    role: number
    warehousesId: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    userName?: true
    phoneNumber?: true
    password?: true
    role?: true
    warehousesId?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    userName?: true
    phoneNumber?: true
    password?: true
    role?: true
    warehousesId?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    userName?: true
    phoneNumber?: true
    password?: true
    role?: true
    warehousesId?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    email: string
    userName: string
    phoneNumber: string
    password: string
    role: $Enums.role
    warehousesId: string | null
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    userName?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    warehousesId?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    warehouses?: boolean | users$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    userName?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    warehousesId?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    warehouses?: boolean | users$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    userName?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    warehousesId?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    warehouses?: boolean | users$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    userName?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    warehousesId?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "userName" | "phoneNumber" | "password" | "role" | "warehousesId" | "lastLogin" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | users$warehousesArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | users$warehousesArgs<ExtArgs>
  }
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | users$warehousesArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      userName: string
      phoneNumber: string
      password: string
      role: $Enums.role
      warehousesId: string | null
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    warehouses<T extends users$warehousesArgs<ExtArgs> = {}>(args?: Subset<T, users$warehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly userName: FieldRef<"users", 'String'>
    readonly phoneNumber: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'role'>
    readonly warehousesId: FieldRef<"users", 'String'>
    readonly lastLogin: FieldRef<"users", 'DateTime'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
    readonly sync: FieldRef<"users", 'Boolean'>
    readonly syncedAt: FieldRef<"users", 'DateTime'>
    readonly isDeleted: FieldRef<"users", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.warehouses
   */
  export type users$warehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model Settings
   */

  export type AggregateSettings = {
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  export type SettingsAvgAggregateOutputType = {
    setting_id: number | null
    taxRate: number | null
    itermsPerPage: number | null
  }

  export type SettingsSumAggregateOutputType = {
    setting_id: number | null
    taxRate: number | null
    itermsPerPage: number | null
  }

  export type SettingsMinAggregateOutputType = {
    setting_id: number | null
    companyName: string | null
    companyEmail: string | null
    phoneNumber: string | null
    websiteURL: string | null
    address: string | null
    logoUrl: string | null
    defaultCurrency: string | null
    taxRate: number | null
    mode: $Enums.mode | null
    itermsPerPage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type SettingsMaxAggregateOutputType = {
    setting_id: number | null
    companyName: string | null
    companyEmail: string | null
    phoneNumber: string | null
    websiteURL: string | null
    address: string | null
    logoUrl: string | null
    defaultCurrency: string | null
    taxRate: number | null
    mode: $Enums.mode | null
    itermsPerPage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type SettingsCountAggregateOutputType = {
    setting_id: number
    companyName: number
    companyEmail: number
    phoneNumber: number
    websiteURL: number
    address: number
    logoUrl: number
    defaultCurrency: number
    taxRate: number
    mode: number
    itermsPerPage: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type SettingsAvgAggregateInputType = {
    setting_id?: true
    taxRate?: true
    itermsPerPage?: true
  }

  export type SettingsSumAggregateInputType = {
    setting_id?: true
    taxRate?: true
    itermsPerPage?: true
  }

  export type SettingsMinAggregateInputType = {
    setting_id?: true
    companyName?: true
    companyEmail?: true
    phoneNumber?: true
    websiteURL?: true
    address?: true
    logoUrl?: true
    defaultCurrency?: true
    taxRate?: true
    mode?: true
    itermsPerPage?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type SettingsMaxAggregateInputType = {
    setting_id?: true
    companyName?: true
    companyEmail?: true
    phoneNumber?: true
    websiteURL?: true
    address?: true
    logoUrl?: true
    defaultCurrency?: true
    taxRate?: true
    mode?: true
    itermsPerPage?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type SettingsCountAggregateInputType = {
    setting_id?: true
    companyName?: true
    companyEmail?: true
    phoneNumber?: true
    websiteURL?: true
    address?: true
    logoUrl?: true
    defaultCurrency?: true
    taxRate?: true
    mode?: true
    itermsPerPage?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type SettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to aggregate.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingsMaxAggregateInputType
  }

  export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSettings[P]>
      : GetScalarType<T[P], AggregateSettings[P]>
  }




  export type SettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingsWhereInput
    orderBy?: SettingsOrderByWithAggregationInput | SettingsOrderByWithAggregationInput[]
    by: SettingsScalarFieldEnum[] | SettingsScalarFieldEnum
    having?: SettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingsCountAggregateInputType | true
    _avg?: SettingsAvgAggregateInputType
    _sum?: SettingsSumAggregateInputType
    _min?: SettingsMinAggregateInputType
    _max?: SettingsMaxAggregateInputType
  }

  export type SettingsGroupByOutputType = {
    setting_id: number
    companyName: string
    companyEmail: string
    phoneNumber: string
    websiteURL: string
    address: string
    logoUrl: string
    defaultCurrency: string
    taxRate: number
    mode: $Enums.mode
    itermsPerPage: number
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  type GetSettingsGroupByPayload<T extends SettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SettingsGroupByOutputType[P]>
        }
      >
    >


  export type SettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    setting_id?: boolean
    companyName?: boolean
    companyEmail?: boolean
    phoneNumber?: boolean
    websiteURL?: boolean
    address?: boolean
    logoUrl?: boolean
    defaultCurrency?: boolean
    taxRate?: boolean
    mode?: boolean
    itermsPerPage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    setting_id?: boolean
    companyName?: boolean
    companyEmail?: boolean
    phoneNumber?: boolean
    websiteURL?: boolean
    address?: boolean
    logoUrl?: boolean
    defaultCurrency?: boolean
    taxRate?: boolean
    mode?: boolean
    itermsPerPage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    setting_id?: boolean
    companyName?: boolean
    companyEmail?: boolean
    phoneNumber?: boolean
    websiteURL?: boolean
    address?: boolean
    logoUrl?: boolean
    defaultCurrency?: boolean
    taxRate?: boolean
    mode?: boolean
    itermsPerPage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectScalar = {
    setting_id?: boolean
    companyName?: boolean
    companyEmail?: boolean
    phoneNumber?: boolean
    websiteURL?: boolean
    address?: boolean
    logoUrl?: boolean
    defaultCurrency?: boolean
    taxRate?: boolean
    mode?: boolean
    itermsPerPage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type SettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"setting_id" | "companyName" | "companyEmail" | "phoneNumber" | "websiteURL" | "address" | "logoUrl" | "defaultCurrency" | "taxRate" | "mode" | "itermsPerPage" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["settings"]>

  export type $SettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Settings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      setting_id: number
      companyName: string
      companyEmail: string
      phoneNumber: string
      websiteURL: string
      address: string
      logoUrl: string
      defaultCurrency: string
      taxRate: number
      mode: $Enums.mode
      itermsPerPage: number
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["settings"]>
    composites: {}
  }

  type SettingsGetPayload<S extends boolean | null | undefined | SettingsDefaultArgs> = $Result.GetResult<Prisma.$SettingsPayload, S>

  type SettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingsCountAggregateInputType | true
    }

  export interface SettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Settings'], meta: { name: 'Settings' } }
    /**
     * Find zero or one Settings that matches the filter.
     * @param {SettingsFindUniqueArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingsFindUniqueArgs>(args: SelectSubset<T, SettingsFindUniqueArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Settings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingsFindFirstArgs>(args?: SelectSubset<T, SettingsFindFirstArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.settings.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.settings.findMany({ take: 10 })
     * 
     * // Only select the `setting_id`
     * const settingsWithSetting_idOnly = await prisma.settings.findMany({ select: { setting_id: true } })
     * 
     */
    findMany<T extends SettingsFindManyArgs>(args?: SelectSubset<T, SettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Settings.
     * @param {SettingsCreateArgs} args - Arguments to create a Settings.
     * @example
     * // Create one Settings
     * const Settings = await prisma.settings.create({
     *   data: {
     *     // ... data to create a Settings
     *   }
     * })
     * 
     */
    create<T extends SettingsCreateArgs>(args: SelectSubset<T, SettingsCreateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingsCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingsCreateManyArgs>(args?: SelectSubset<T, SettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingsCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `setting_id`
     * const settingsWithSetting_idOnly = await prisma.settings.createManyAndReturn({
     *   select: { setting_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Settings.
     * @param {SettingsDeleteArgs} args - Arguments to delete one Settings.
     * @example
     * // Delete one Settings
     * const Settings = await prisma.settings.delete({
     *   where: {
     *     // ... filter to delete one Settings
     *   }
     * })
     * 
     */
    delete<T extends SettingsDeleteArgs>(args: SelectSubset<T, SettingsDeleteArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Settings.
     * @param {SettingsUpdateArgs} args - Arguments to update one Settings.
     * @example
     * // Update one Settings
     * const settings = await prisma.settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingsUpdateArgs>(args: SelectSubset<T, SettingsUpdateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingsDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingsDeleteManyArgs>(args?: SelectSubset<T, SettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingsUpdateManyArgs>(args: SelectSubset<T, SettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings and returns the data updated in the database.
     * @param {SettingsUpdateManyAndReturnArgs} args - Arguments to update many Settings.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Settings and only return the `setting_id`
     * const settingsWithSetting_idOnly = await prisma.settings.updateManyAndReturn({
     *   select: { setting_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Settings.
     * @param {SettingsUpsertArgs} args - Arguments to update or create a Settings.
     * @example
     * // Update or create a Settings
     * const settings = await prisma.settings.upsert({
     *   create: {
     *     // ... data to create a Settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Settings we want to update
     *   }
     * })
     */
    upsert<T extends SettingsUpsertArgs>(args: SelectSubset<T, SettingsUpsertArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.settings.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingsCountArgs>(
      args?: Subset<T, SettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingsAggregateArgs>(args: Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

    /**
     * Group by Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingsGroupByArgs['orderBy'] }
        : { orderBy?: SettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Settings model
   */
  readonly fields: SettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Settings model
   */
  interface SettingsFieldRefs {
    readonly setting_id: FieldRef<"Settings", 'Int'>
    readonly companyName: FieldRef<"Settings", 'String'>
    readonly companyEmail: FieldRef<"Settings", 'String'>
    readonly phoneNumber: FieldRef<"Settings", 'String'>
    readonly websiteURL: FieldRef<"Settings", 'String'>
    readonly address: FieldRef<"Settings", 'String'>
    readonly logoUrl: FieldRef<"Settings", 'String'>
    readonly defaultCurrency: FieldRef<"Settings", 'String'>
    readonly taxRate: FieldRef<"Settings", 'Int'>
    readonly mode: FieldRef<"Settings", 'mode'>
    readonly itermsPerPage: FieldRef<"Settings", 'Int'>
    readonly createdAt: FieldRef<"Settings", 'DateTime'>
    readonly updatedAt: FieldRef<"Settings", 'DateTime'>
    readonly sync: FieldRef<"Settings", 'Boolean'>
    readonly syncedAt: FieldRef<"Settings", 'DateTime'>
    readonly isDeleted: FieldRef<"Settings", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Settings findUnique
   */
  export type SettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findUniqueOrThrow
   */
  export type SettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findFirst
   */
  export type SettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findFirstOrThrow
   */
  export type SettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findMany
   */
  export type SettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings create
   */
  export type SettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a Settings.
     */
    data: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
  }

  /**
   * Settings createMany
   */
  export type SettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
  }

  /**
   * Settings createManyAndReturn
   */
  export type SettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
  }

  /**
   * Settings update
   */
  export type SettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a Settings.
     */
    data: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
    /**
     * Choose, which Settings to update.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings updateMany
   */
  export type SettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings updateManyAndReturn
   */
  export type SettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings upsert
   */
  export type SettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the Settings to update in case it exists.
     */
    where: SettingsWhereUniqueInput
    /**
     * In case the Settings found by the `where` argument doesn't exist, create a new Settings with this data.
     */
    create: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
    /**
     * In case the Settings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
  }

  /**
   * Settings delete
   */
  export type SettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter which Settings to delete.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings deleteMany
   */
  export type SettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Settings without action
   */
  export type SettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
  }


  /**
   * Model Warehouses
   */

  export type AggregateWarehouses = {
    _count: WarehousesCountAggregateOutputType | null
    _min: WarehousesMinAggregateOutputType | null
    _max: WarehousesMaxAggregateOutputType | null
  }

  export type WarehousesMinAggregateOutputType = {
    id: string | null
    warehouseCode: string | null
    name: string | null
    phoneNumber: string | null
    email: string | null
    description: string | null
    address: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type WarehousesMaxAggregateOutputType = {
    id: string | null
    warehouseCode: string | null
    name: string | null
    phoneNumber: string | null
    email: string | null
    description: string | null
    address: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type WarehousesCountAggregateOutputType = {
    id: number
    warehouseCode: number
    name: number
    phoneNumber: number
    email: number
    description: number
    address: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type WarehousesMinAggregateInputType = {
    id?: true
    warehouseCode?: true
    name?: true
    phoneNumber?: true
    email?: true
    description?: true
    address?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type WarehousesMaxAggregateInputType = {
    id?: true
    warehouseCode?: true
    name?: true
    phoneNumber?: true
    email?: true
    description?: true
    address?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type WarehousesCountAggregateInputType = {
    id?: true
    warehouseCode?: true
    name?: true
    phoneNumber?: true
    email?: true
    description?: true
    address?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type WarehousesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouses to aggregate.
     */
    where?: WarehousesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehousesOrderByWithRelationInput | WarehousesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarehousesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Warehouses
    **/
    _count?: true | WarehousesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarehousesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarehousesMaxAggregateInputType
  }

  export type GetWarehousesAggregateType<T extends WarehousesAggregateArgs> = {
        [P in keyof T & keyof AggregateWarehouses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarehouses[P]>
      : GetScalarType<T[P], AggregateWarehouses[P]>
  }




  export type WarehousesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehousesWhereInput
    orderBy?: WarehousesOrderByWithAggregationInput | WarehousesOrderByWithAggregationInput[]
    by: WarehousesScalarFieldEnum[] | WarehousesScalarFieldEnum
    having?: WarehousesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarehousesCountAggregateInputType | true
    _min?: WarehousesMinAggregateInputType
    _max?: WarehousesMaxAggregateInputType
  }

  export type WarehousesGroupByOutputType = {
    id: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description: string | null
    address: string
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: WarehousesCountAggregateOutputType | null
    _min: WarehousesMinAggregateOutputType | null
    _max: WarehousesMaxAggregateOutputType | null
  }

  type GetWarehousesGroupByPayload<T extends WarehousesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarehousesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarehousesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarehousesGroupByOutputType[P]>
            : GetScalarType<T[P], WarehousesGroupByOutputType[P]>
        }
      >
    >


  export type WarehousesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warehouseCode?: boolean
    name?: boolean
    phoneNumber?: boolean
    email?: boolean
    description?: boolean
    address?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    users?: boolean | Warehouses$usersArgs<ExtArgs>
    products?: boolean | Warehouses$productsArgs<ExtArgs>
    customer?: boolean | Warehouses$customerArgs<ExtArgs>
    saleItem?: boolean | Warehouses$saleItemArgs<ExtArgs>
    sale?: boolean | Warehouses$saleArgs<ExtArgs>
    paymentMethod?: boolean | Warehouses$paymentMethodArgs<ExtArgs>
    purchase?: boolean | Warehouses$purchaseArgs<ExtArgs>
    purchaseItem?: boolean | Warehouses$purchaseItemArgs<ExtArgs>
    supplier?: boolean | Warehouses$supplierArgs<ExtArgs>
    receiptSettings?: boolean | Warehouses$receiptSettingsArgs<ExtArgs>
    balancePayment?: boolean | Warehouses$balancePaymentArgs<ExtArgs>
    quotation?: boolean | Warehouses$quotationArgs<ExtArgs>
    quotationItem?: boolean | Warehouses$quotationItemArgs<ExtArgs>
    _count?: boolean | WarehousesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouses"]>

  export type WarehousesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warehouseCode?: boolean
    name?: boolean
    phoneNumber?: boolean
    email?: boolean
    description?: boolean
    address?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["warehouses"]>

  export type WarehousesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    warehouseCode?: boolean
    name?: boolean
    phoneNumber?: boolean
    email?: boolean
    description?: boolean
    address?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }, ExtArgs["result"]["warehouses"]>

  export type WarehousesSelectScalar = {
    id?: boolean
    warehouseCode?: boolean
    name?: boolean
    phoneNumber?: boolean
    email?: boolean
    description?: boolean
    address?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type WarehousesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "warehouseCode" | "name" | "phoneNumber" | "email" | "description" | "address" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["warehouses"]>
  export type WarehousesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Warehouses$usersArgs<ExtArgs>
    products?: boolean | Warehouses$productsArgs<ExtArgs>
    customer?: boolean | Warehouses$customerArgs<ExtArgs>
    saleItem?: boolean | Warehouses$saleItemArgs<ExtArgs>
    sale?: boolean | Warehouses$saleArgs<ExtArgs>
    paymentMethod?: boolean | Warehouses$paymentMethodArgs<ExtArgs>
    purchase?: boolean | Warehouses$purchaseArgs<ExtArgs>
    purchaseItem?: boolean | Warehouses$purchaseItemArgs<ExtArgs>
    supplier?: boolean | Warehouses$supplierArgs<ExtArgs>
    receiptSettings?: boolean | Warehouses$receiptSettingsArgs<ExtArgs>
    balancePayment?: boolean | Warehouses$balancePaymentArgs<ExtArgs>
    quotation?: boolean | Warehouses$quotationArgs<ExtArgs>
    quotationItem?: boolean | Warehouses$quotationItemArgs<ExtArgs>
    _count?: boolean | WarehousesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WarehousesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WarehousesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WarehousesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Warehouses"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
      customer: Prisma.$CustomerPayload<ExtArgs>[]
      saleItem: Prisma.$SaleItemPayload<ExtArgs>[]
      sale: Prisma.$SalePayload<ExtArgs>[]
      paymentMethod: Prisma.$PaymentMethodPayload<ExtArgs>[]
      purchase: Prisma.$PurchasePayload<ExtArgs>[]
      purchaseItem: Prisma.$PurchaseItemPayload<ExtArgs>[]
      supplier: Prisma.$SupplierPayload<ExtArgs>[]
      receiptSettings: Prisma.$ReceiptSettingsPayload<ExtArgs>[]
      balancePayment: Prisma.$BalancePaymentPayload<ExtArgs>[]
      quotation: Prisma.$QuotationPayload<ExtArgs>[]
      quotationItem: Prisma.$QuotationItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      warehouseCode: string
      name: string
      phoneNumber: string
      email: string
      description: string | null
      address: string
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["warehouses"]>
    composites: {}
  }

  type WarehousesGetPayload<S extends boolean | null | undefined | WarehousesDefaultArgs> = $Result.GetResult<Prisma.$WarehousesPayload, S>

  type WarehousesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WarehousesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WarehousesCountAggregateInputType | true
    }

  export interface WarehousesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Warehouses'], meta: { name: 'Warehouses' } }
    /**
     * Find zero or one Warehouses that matches the filter.
     * @param {WarehousesFindUniqueArgs} args - Arguments to find a Warehouses
     * @example
     * // Get one Warehouses
     * const warehouses = await prisma.warehouses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarehousesFindUniqueArgs>(args: SelectSubset<T, WarehousesFindUniqueArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Warehouses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WarehousesFindUniqueOrThrowArgs} args - Arguments to find a Warehouses
     * @example
     * // Get one Warehouses
     * const warehouses = await prisma.warehouses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarehousesFindUniqueOrThrowArgs>(args: SelectSubset<T, WarehousesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warehouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehousesFindFirstArgs} args - Arguments to find a Warehouses
     * @example
     * // Get one Warehouses
     * const warehouses = await prisma.warehouses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarehousesFindFirstArgs>(args?: SelectSubset<T, WarehousesFindFirstArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warehouses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehousesFindFirstOrThrowArgs} args - Arguments to find a Warehouses
     * @example
     * // Get one Warehouses
     * const warehouses = await prisma.warehouses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarehousesFindFirstOrThrowArgs>(args?: SelectSubset<T, WarehousesFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Warehouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehousesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Warehouses
     * const warehouses = await prisma.warehouses.findMany()
     * 
     * // Get first 10 Warehouses
     * const warehouses = await prisma.warehouses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warehousesWithIdOnly = await prisma.warehouses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarehousesFindManyArgs>(args?: SelectSubset<T, WarehousesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Warehouses.
     * @param {WarehousesCreateArgs} args - Arguments to create a Warehouses.
     * @example
     * // Create one Warehouses
     * const Warehouses = await prisma.warehouses.create({
     *   data: {
     *     // ... data to create a Warehouses
     *   }
     * })
     * 
     */
    create<T extends WarehousesCreateArgs>(args: SelectSubset<T, WarehousesCreateArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Warehouses.
     * @param {WarehousesCreateManyArgs} args - Arguments to create many Warehouses.
     * @example
     * // Create many Warehouses
     * const warehouses = await prisma.warehouses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarehousesCreateManyArgs>(args?: SelectSubset<T, WarehousesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Warehouses and returns the data saved in the database.
     * @param {WarehousesCreateManyAndReturnArgs} args - Arguments to create many Warehouses.
     * @example
     * // Create many Warehouses
     * const warehouses = await prisma.warehouses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Warehouses and only return the `id`
     * const warehousesWithIdOnly = await prisma.warehouses.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WarehousesCreateManyAndReturnArgs>(args?: SelectSubset<T, WarehousesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Warehouses.
     * @param {WarehousesDeleteArgs} args - Arguments to delete one Warehouses.
     * @example
     * // Delete one Warehouses
     * const Warehouses = await prisma.warehouses.delete({
     *   where: {
     *     // ... filter to delete one Warehouses
     *   }
     * })
     * 
     */
    delete<T extends WarehousesDeleteArgs>(args: SelectSubset<T, WarehousesDeleteArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Warehouses.
     * @param {WarehousesUpdateArgs} args - Arguments to update one Warehouses.
     * @example
     * // Update one Warehouses
     * const warehouses = await prisma.warehouses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarehousesUpdateArgs>(args: SelectSubset<T, WarehousesUpdateArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Warehouses.
     * @param {WarehousesDeleteManyArgs} args - Arguments to filter Warehouses to delete.
     * @example
     * // Delete a few Warehouses
     * const { count } = await prisma.warehouses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarehousesDeleteManyArgs>(args?: SelectSubset<T, WarehousesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehousesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Warehouses
     * const warehouses = await prisma.warehouses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarehousesUpdateManyArgs>(args: SelectSubset<T, WarehousesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warehouses and returns the data updated in the database.
     * @param {WarehousesUpdateManyAndReturnArgs} args - Arguments to update many Warehouses.
     * @example
     * // Update many Warehouses
     * const warehouses = await prisma.warehouses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Warehouses and only return the `id`
     * const warehousesWithIdOnly = await prisma.warehouses.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WarehousesUpdateManyAndReturnArgs>(args: SelectSubset<T, WarehousesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Warehouses.
     * @param {WarehousesUpsertArgs} args - Arguments to update or create a Warehouses.
     * @example
     * // Update or create a Warehouses
     * const warehouses = await prisma.warehouses.upsert({
     *   create: {
     *     // ... data to create a Warehouses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Warehouses we want to update
     *   }
     * })
     */
    upsert<T extends WarehousesUpsertArgs>(args: SelectSubset<T, WarehousesUpsertArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehousesCountArgs} args - Arguments to filter Warehouses to count.
     * @example
     * // Count the number of Warehouses
     * const count = await prisma.warehouses.count({
     *   where: {
     *     // ... the filter for the Warehouses we want to count
     *   }
     * })
    **/
    count<T extends WarehousesCountArgs>(
      args?: Subset<T, WarehousesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarehousesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehousesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarehousesAggregateArgs>(args: Subset<T, WarehousesAggregateArgs>): Prisma.PrismaPromise<GetWarehousesAggregateType<T>>

    /**
     * Group by Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehousesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarehousesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarehousesGroupByArgs['orderBy'] }
        : { orderBy?: WarehousesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarehousesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehousesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Warehouses model
   */
  readonly fields: WarehousesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Warehouses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarehousesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Warehouses$usersArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Warehouses$productsArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customer<T extends Warehouses$customerArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$customerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    saleItem<T extends Warehouses$saleItemArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$saleItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sale<T extends Warehouses$saleArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$saleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paymentMethod<T extends Warehouses$paymentMethodArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$paymentMethodArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    purchase<T extends Warehouses$purchaseArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$purchaseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    purchaseItem<T extends Warehouses$purchaseItemArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$purchaseItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    supplier<T extends Warehouses$supplierArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$supplierArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receiptSettings<T extends Warehouses$receiptSettingsArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$receiptSettingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    balancePayment<T extends Warehouses$balancePaymentArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$balancePaymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quotation<T extends Warehouses$quotationArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$quotationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quotationItem<T extends Warehouses$quotationItemArgs<ExtArgs> = {}>(args?: Subset<T, Warehouses$quotationItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Warehouses model
   */
  interface WarehousesFieldRefs {
    readonly id: FieldRef<"Warehouses", 'String'>
    readonly warehouseCode: FieldRef<"Warehouses", 'String'>
    readonly name: FieldRef<"Warehouses", 'String'>
    readonly phoneNumber: FieldRef<"Warehouses", 'String'>
    readonly email: FieldRef<"Warehouses", 'String'>
    readonly description: FieldRef<"Warehouses", 'String'>
    readonly address: FieldRef<"Warehouses", 'String'>
    readonly sync: FieldRef<"Warehouses", 'Boolean'>
    readonly syncedAt: FieldRef<"Warehouses", 'DateTime'>
    readonly isDeleted: FieldRef<"Warehouses", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Warehouses findUnique
   */
  export type WarehousesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where: WarehousesWhereUniqueInput
  }

  /**
   * Warehouses findUniqueOrThrow
   */
  export type WarehousesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where: WarehousesWhereUniqueInput
  }

  /**
   * Warehouses findFirst
   */
  export type WarehousesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where?: WarehousesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehousesOrderByWithRelationInput | WarehousesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehousesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehousesScalarFieldEnum | WarehousesScalarFieldEnum[]
  }

  /**
   * Warehouses findFirstOrThrow
   */
  export type WarehousesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where?: WarehousesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehousesOrderByWithRelationInput | WarehousesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehousesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehousesScalarFieldEnum | WarehousesScalarFieldEnum[]
  }

  /**
   * Warehouses findMany
   */
  export type WarehousesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where?: WarehousesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehousesOrderByWithRelationInput | WarehousesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Warehouses.
     */
    cursor?: WarehousesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    distinct?: WarehousesScalarFieldEnum | WarehousesScalarFieldEnum[]
  }

  /**
   * Warehouses create
   */
  export type WarehousesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * The data needed to create a Warehouses.
     */
    data: XOR<WarehousesCreateInput, WarehousesUncheckedCreateInput>
  }

  /**
   * Warehouses createMany
   */
  export type WarehousesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Warehouses.
     */
    data: WarehousesCreateManyInput | WarehousesCreateManyInput[]
  }

  /**
   * Warehouses createManyAndReturn
   */
  export type WarehousesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * The data used to create many Warehouses.
     */
    data: WarehousesCreateManyInput | WarehousesCreateManyInput[]
  }

  /**
   * Warehouses update
   */
  export type WarehousesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * The data needed to update a Warehouses.
     */
    data: XOR<WarehousesUpdateInput, WarehousesUncheckedUpdateInput>
    /**
     * Choose, which Warehouses to update.
     */
    where: WarehousesWhereUniqueInput
  }

  /**
   * Warehouses updateMany
   */
  export type WarehousesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Warehouses.
     */
    data: XOR<WarehousesUpdateManyMutationInput, WarehousesUncheckedUpdateManyInput>
    /**
     * Filter which Warehouses to update
     */
    where?: WarehousesWhereInput
    /**
     * Limit how many Warehouses to update.
     */
    limit?: number
  }

  /**
   * Warehouses updateManyAndReturn
   */
  export type WarehousesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * The data used to update Warehouses.
     */
    data: XOR<WarehousesUpdateManyMutationInput, WarehousesUncheckedUpdateManyInput>
    /**
     * Filter which Warehouses to update
     */
    where?: WarehousesWhereInput
    /**
     * Limit how many Warehouses to update.
     */
    limit?: number
  }

  /**
   * Warehouses upsert
   */
  export type WarehousesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * The filter to search for the Warehouses to update in case it exists.
     */
    where: WarehousesWhereUniqueInput
    /**
     * In case the Warehouses found by the `where` argument doesn't exist, create a new Warehouses with this data.
     */
    create: XOR<WarehousesCreateInput, WarehousesUncheckedCreateInput>
    /**
     * In case the Warehouses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarehousesUpdateInput, WarehousesUncheckedUpdateInput>
  }

  /**
   * Warehouses delete
   */
  export type WarehousesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    /**
     * Filter which Warehouses to delete.
     */
    where: WarehousesWhereUniqueInput
  }

  /**
   * Warehouses deleteMany
   */
  export type WarehousesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouses to delete
     */
    where?: WarehousesWhereInput
    /**
     * Limit how many Warehouses to delete.
     */
    limit?: number
  }

  /**
   * Warehouses.users
   */
  export type Warehouses$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Warehouses.products
   */
  export type Warehouses$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Warehouses.customer
   */
  export type Warehouses$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Warehouses.saleItem
   */
  export type Warehouses$saleItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    where?: SaleItemWhereInput
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    cursor?: SaleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleItemScalarFieldEnum | SaleItemScalarFieldEnum[]
  }

  /**
   * Warehouses.sale
   */
  export type Warehouses$saleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    cursor?: SaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Warehouses.paymentMethod
   */
  export type Warehouses$paymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    where?: PaymentMethodWhereInput
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    cursor?: PaymentMethodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * Warehouses.purchase
   */
  export type Warehouses$purchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    cursor?: PurchaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Warehouses.purchaseItem
   */
  export type Warehouses$purchaseItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    where?: PurchaseItemWhereInput
    orderBy?: PurchaseItemOrderByWithRelationInput | PurchaseItemOrderByWithRelationInput[]
    cursor?: PurchaseItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseItemScalarFieldEnum | PurchaseItemScalarFieldEnum[]
  }

  /**
   * Warehouses.supplier
   */
  export type Warehouses$supplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    cursor?: SupplierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Warehouses.receiptSettings
   */
  export type Warehouses$receiptSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    where?: ReceiptSettingsWhereInput
    orderBy?: ReceiptSettingsOrderByWithRelationInput | ReceiptSettingsOrderByWithRelationInput[]
    cursor?: ReceiptSettingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceiptSettingsScalarFieldEnum | ReceiptSettingsScalarFieldEnum[]
  }

  /**
   * Warehouses.balancePayment
   */
  export type Warehouses$balancePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    where?: BalancePaymentWhereInput
    orderBy?: BalancePaymentOrderByWithRelationInput | BalancePaymentOrderByWithRelationInput[]
    cursor?: BalancePaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BalancePaymentScalarFieldEnum | BalancePaymentScalarFieldEnum[]
  }

  /**
   * Warehouses.quotation
   */
  export type Warehouses$quotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    where?: QuotationWhereInput
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    cursor?: QuotationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Warehouses.quotationItem
   */
  export type Warehouses$quotationItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    where?: QuotationItemWhereInput
    orderBy?: QuotationItemOrderByWithRelationInput | QuotationItemOrderByWithRelationInput[]
    cursor?: QuotationItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationItemScalarFieldEnum | QuotationItemScalarFieldEnum[]
  }

  /**
   * Warehouses without action
   */
  export type WarehousesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
  }


  /**
   * Model Sale
   */

  export type AggregateSale = {
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  export type SaleAvgAggregateOutputType = {
    taxRate: number | null
    subTotal: number | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
  }

  export type SaleSumAggregateOutputType = {
    taxRate: number | null
    subTotal: number | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
  }

  export type SaleMinAggregateOutputType = {
    id: string | null
    selectedCustomerId: string | null
    taxRate: number | null
    subTotal: number | null
    notes: string | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
    warehousesId: string | null
    invoiceNo: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type SaleMaxAggregateOutputType = {
    id: string | null
    selectedCustomerId: string | null
    taxRate: number | null
    subTotal: number | null
    notes: string | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
    warehousesId: string | null
    invoiceNo: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type SaleCountAggregateOutputType = {
    id: number
    selectedCustomerId: number
    taxRate: number
    subTotal: number
    notes: number
    amountPaid: number
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt: number
    updatedAt: number
    warehousesId: number
    invoiceNo: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type SaleAvgAggregateInputType = {
    taxRate?: true
    subTotal?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
  }

  export type SaleSumAggregateInputType = {
    taxRate?: true
    subTotal?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
  }

  export type SaleMinAggregateInputType = {
    id?: true
    selectedCustomerId?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    invoiceNo?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type SaleMaxAggregateInputType = {
    id?: true
    selectedCustomerId?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    invoiceNo?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type SaleCountAggregateInputType = {
    id?: true
    selectedCustomerId?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    invoiceNo?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type SaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sale to aggregate.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sales
    **/
    _count?: true | SaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleMaxAggregateInputType
  }

  export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
        [P in keyof T & keyof AggregateSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSale[P]>
      : GetScalarType<T[P], AggregateSale[P]>
  }




  export type SaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithAggregationInput | SaleOrderByWithAggregationInput[]
    by: SaleScalarFieldEnum[] | SaleScalarFieldEnum
    having?: SaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleCountAggregateInputType | true
    _avg?: SaleAvgAggregateInputType
    _sum?: SaleSumAggregateInputType
    _min?: SaleMinAggregateInputType
    _max?: SaleMaxAggregateInputType
  }

  export type SaleGroupByOutputType = {
    id: string
    selectedCustomerId: string | null
    taxRate: number
    subTotal: number
    notes: string | null
    amountPaid: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt: Date
    updatedAt: Date
    warehousesId: string | null
    invoiceNo: string
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  type GetSaleGroupByPayload<T extends SaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleGroupByOutputType[P]>
            : GetScalarType<T[P], SaleGroupByOutputType[P]>
        }
      >
    >


  export type SaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    invoiceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    saleItems?: boolean | Sale$saleItemsArgs<ExtArgs>
    selectedCustomer?: boolean | Sale$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Sale$warehousesArgs<ExtArgs>
    paymentMethod?: boolean | Sale$paymentMethodArgs<ExtArgs>
    balancePayment?: boolean | Sale$balancePaymentArgs<ExtArgs>
    _count?: boolean | SaleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    invoiceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    selectedCustomer?: boolean | Sale$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Sale$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    invoiceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    selectedCustomer?: boolean | Sale$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Sale$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectScalar = {
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    invoiceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type SaleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "selectedCustomerId" | "taxRate" | "subTotal" | "notes" | "amountPaid" | "grandTotal" | "paidAmount" | "balance" | "createdAt" | "updatedAt" | "warehousesId" | "invoiceNo" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["sale"]>
  export type SaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    saleItems?: boolean | Sale$saleItemsArgs<ExtArgs>
    selectedCustomer?: boolean | Sale$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Sale$warehousesArgs<ExtArgs>
    paymentMethod?: boolean | Sale$paymentMethodArgs<ExtArgs>
    balancePayment?: boolean | Sale$balancePaymentArgs<ExtArgs>
    _count?: boolean | SaleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SaleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selectedCustomer?: boolean | Sale$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Sale$warehousesArgs<ExtArgs>
  }
  export type SaleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selectedCustomer?: boolean | Sale$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Sale$warehousesArgs<ExtArgs>
  }

  export type $SalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sale"
    objects: {
      saleItems: Prisma.$SaleItemPayload<ExtArgs>[]
      selectedCustomer: Prisma.$CustomerPayload<ExtArgs> | null
      warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      paymentMethod: Prisma.$PaymentMethodPayload<ExtArgs>[]
      balancePayment: Prisma.$BalancePaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      selectedCustomerId: string | null
      taxRate: number
      subTotal: number
      notes: string | null
      amountPaid: number | null
      grandTotal: number
      paidAmount: number
      balance: number
      createdAt: Date
      updatedAt: Date
      warehousesId: string | null
      invoiceNo: string
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["sale"]>
    composites: {}
  }

  type SaleGetPayload<S extends boolean | null | undefined | SaleDefaultArgs> = $Result.GetResult<Prisma.$SalePayload, S>

  type SaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SaleCountAggregateInputType | true
    }

  export interface SaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sale'], meta: { name: 'Sale' } }
    /**
     * Find zero or one Sale that matches the filter.
     * @param {SaleFindUniqueArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaleFindUniqueArgs>(args: SelectSubset<T, SaleFindUniqueArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sale that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SaleFindUniqueOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaleFindUniqueOrThrowArgs>(args: SelectSubset<T, SaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaleFindFirstArgs>(args?: SelectSubset<T, SaleFindFirstArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaleFindFirstOrThrowArgs>(args?: SelectSubset<T, SaleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sale.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleWithIdOnly = await prisma.sale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaleFindManyArgs>(args?: SelectSubset<T, SaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sale.
     * @param {SaleCreateArgs} args - Arguments to create a Sale.
     * @example
     * // Create one Sale
     * const Sale = await prisma.sale.create({
     *   data: {
     *     // ... data to create a Sale
     *   }
     * })
     * 
     */
    create<T extends SaleCreateArgs>(args: SelectSubset<T, SaleCreateArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sales.
     * @param {SaleCreateManyArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sale = await prisma.sale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaleCreateManyArgs>(args?: SelectSubset<T, SaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sales and returns the data saved in the database.
     * @param {SaleCreateManyAndReturnArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sale = await prisma.sale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sales and only return the `id`
     * const saleWithIdOnly = await prisma.sale.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaleCreateManyAndReturnArgs>(args?: SelectSubset<T, SaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sale.
     * @param {SaleDeleteArgs} args - Arguments to delete one Sale.
     * @example
     * // Delete one Sale
     * const Sale = await prisma.sale.delete({
     *   where: {
     *     // ... filter to delete one Sale
     *   }
     * })
     * 
     */
    delete<T extends SaleDeleteArgs>(args: SelectSubset<T, SaleDeleteArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sale.
     * @param {SaleUpdateArgs} args - Arguments to update one Sale.
     * @example
     * // Update one Sale
     * const sale = await prisma.sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaleUpdateArgs>(args: SelectSubset<T, SaleUpdateArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sales.
     * @param {SaleDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaleDeleteManyArgs>(args?: SelectSubset<T, SaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaleUpdateManyArgs>(args: SelectSubset<T, SaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales and returns the data updated in the database.
     * @param {SaleUpdateManyAndReturnArgs} args - Arguments to update many Sales.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sales and only return the `id`
     * const saleWithIdOnly = await prisma.sale.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SaleUpdateManyAndReturnArgs>(args: SelectSubset<T, SaleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sale.
     * @param {SaleUpsertArgs} args - Arguments to update or create a Sale.
     * @example
     * // Update or create a Sale
     * const sale = await prisma.sale.upsert({
     *   create: {
     *     // ... data to create a Sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sale we want to update
     *   }
     * })
     */
    upsert<T extends SaleUpsertArgs>(args: SelectSubset<T, SaleUpsertArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sale.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends SaleCountArgs>(
      args?: Subset<T, SaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAggregateArgs>(args: Subset<T, SaleAggregateArgs>): Prisma.PrismaPromise<GetSaleAggregateType<T>>

    /**
     * Group by Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleGroupByArgs['orderBy'] }
        : { orderBy?: SaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sale model
   */
  readonly fields: SaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    saleItems<T extends Sale$saleItemsArgs<ExtArgs> = {}>(args?: Subset<T, Sale$saleItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    selectedCustomer<T extends Sale$selectedCustomerArgs<ExtArgs> = {}>(args?: Subset<T, Sale$selectedCustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    warehouses<T extends Sale$warehousesArgs<ExtArgs> = {}>(args?: Subset<T, Sale$warehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    paymentMethod<T extends Sale$paymentMethodArgs<ExtArgs> = {}>(args?: Subset<T, Sale$paymentMethodArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    balancePayment<T extends Sale$balancePaymentArgs<ExtArgs> = {}>(args?: Subset<T, Sale$balancePaymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sale model
   */
  interface SaleFieldRefs {
    readonly id: FieldRef<"Sale", 'String'>
    readonly selectedCustomerId: FieldRef<"Sale", 'String'>
    readonly taxRate: FieldRef<"Sale", 'Float'>
    readonly subTotal: FieldRef<"Sale", 'Float'>
    readonly notes: FieldRef<"Sale", 'String'>
    readonly amountPaid: FieldRef<"Sale", 'Float'>
    readonly grandTotal: FieldRef<"Sale", 'Float'>
    readonly paidAmount: FieldRef<"Sale", 'Float'>
    readonly balance: FieldRef<"Sale", 'Float'>
    readonly createdAt: FieldRef<"Sale", 'DateTime'>
    readonly updatedAt: FieldRef<"Sale", 'DateTime'>
    readonly warehousesId: FieldRef<"Sale", 'String'>
    readonly invoiceNo: FieldRef<"Sale", 'String'>
    readonly sync: FieldRef<"Sale", 'Boolean'>
    readonly syncedAt: FieldRef<"Sale", 'DateTime'>
    readonly isDeleted: FieldRef<"Sale", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Sale findUnique
   */
  export type SaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findUniqueOrThrow
   */
  export type SaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findFirst
   */
  export type SaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findFirstOrThrow
   */
  export type SaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findMany
   */
  export type SaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale create
   */
  export type SaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sale.
     */
    data: XOR<SaleCreateInput, SaleUncheckedCreateInput>
  }

  /**
   * Sale createMany
   */
  export type SaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sales.
     */
    data: SaleCreateManyInput | SaleCreateManyInput[]
  }

  /**
   * Sale createManyAndReturn
   */
  export type SaleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * The data used to create many Sales.
     */
    data: SaleCreateManyInput | SaleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sale update
   */
  export type SaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sale.
     */
    data: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
    /**
     * Choose, which Sale to update.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale updateMany
   */
  export type SaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sales.
     */
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SaleWhereInput
    /**
     * Limit how many Sales to update.
     */
    limit?: number
  }

  /**
   * Sale updateManyAndReturn
   */
  export type SaleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * The data used to update Sales.
     */
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SaleWhereInput
    /**
     * Limit how many Sales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sale upsert
   */
  export type SaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sale to update in case it exists.
     */
    where: SaleWhereUniqueInput
    /**
     * In case the Sale found by the `where` argument doesn't exist, create a new Sale with this data.
     */
    create: XOR<SaleCreateInput, SaleUncheckedCreateInput>
    /**
     * In case the Sale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
  }

  /**
   * Sale delete
   */
  export type SaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter which Sale to delete.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale deleteMany
   */
  export type SaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sales to delete
     */
    where?: SaleWhereInput
    /**
     * Limit how many Sales to delete.
     */
    limit?: number
  }

  /**
   * Sale.saleItems
   */
  export type Sale$saleItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    where?: SaleItemWhereInput
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    cursor?: SaleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleItemScalarFieldEnum | SaleItemScalarFieldEnum[]
  }

  /**
   * Sale.selectedCustomer
   */
  export type Sale$selectedCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Sale.warehouses
   */
  export type Sale$warehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * Sale.paymentMethod
   */
  export type Sale$paymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    where?: PaymentMethodWhereInput
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    cursor?: PaymentMethodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * Sale.balancePayment
   */
  export type Sale$balancePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    where?: BalancePaymentWhereInput
    orderBy?: BalancePaymentOrderByWithRelationInput | BalancePaymentOrderByWithRelationInput[]
    cursor?: BalancePaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BalancePaymentScalarFieldEnum | BalancePaymentScalarFieldEnum[]
  }

  /**
   * Sale without action
   */
  export type SaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
  }


  /**
   * Model SaleItem
   */

  export type AggregateSaleItem = {
    _count: SaleItemCountAggregateOutputType | null
    _avg: SaleItemAvgAggregateOutputType | null
    _sum: SaleItemSumAggregateOutputType | null
    _min: SaleItemMinAggregateOutputType | null
    _max: SaleItemMaxAggregateOutputType | null
  }

  export type SaleItemAvgAggregateOutputType = {
    cost: number | null
    selectedPrice: number | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
  }

  export type SaleItemSumAggregateOutputType = {
    cost: number | null
    selectedPrice: number | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
  }

  export type SaleItemMinAggregateOutputType = {
    id: string | null
    saleId: string | null
    productId: string | null
    productName: string | null
    cost: number | null
    selectedPrice: number | null
    priceType: string | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    customerId: string | null
    isDeleted: boolean | null
  }

  export type SaleItemMaxAggregateOutputType = {
    id: string | null
    saleId: string | null
    productId: string | null
    productName: string | null
    cost: number | null
    selectedPrice: number | null
    priceType: string | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    customerId: string | null
    isDeleted: boolean | null
  }

  export type SaleItemCountAggregateOutputType = {
    id: number
    saleId: number
    productId: number
    productName: number
    cost: number
    selectedPrice: number
    priceType: number
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId: number
    sync: number
    syncedAt: number
    customerId: number
    isDeleted: number
    _all: number
  }


  export type SaleItemAvgAggregateInputType = {
    cost?: true
    selectedPrice?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
  }

  export type SaleItemSumAggregateInputType = {
    cost?: true
    selectedPrice?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
  }

  export type SaleItemMinAggregateInputType = {
    id?: true
    saleId?: true
    productId?: true
    productName?: true
    cost?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    customerId?: true
    isDeleted?: true
  }

  export type SaleItemMaxAggregateInputType = {
    id?: true
    saleId?: true
    productId?: true
    productName?: true
    cost?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    customerId?: true
    isDeleted?: true
  }

  export type SaleItemCountAggregateInputType = {
    id?: true
    saleId?: true
    productId?: true
    productName?: true
    cost?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    customerId?: true
    isDeleted?: true
    _all?: true
  }

  export type SaleItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleItem to aggregate.
     */
    where?: SaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleItems to fetch.
     */
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaleItems
    **/
    _count?: true | SaleItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleItemMaxAggregateInputType
  }

  export type GetSaleItemAggregateType<T extends SaleItemAggregateArgs> = {
        [P in keyof T & keyof AggregateSaleItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaleItem[P]>
      : GetScalarType<T[P], AggregateSaleItem[P]>
  }




  export type SaleItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleItemWhereInput
    orderBy?: SaleItemOrderByWithAggregationInput | SaleItemOrderByWithAggregationInput[]
    by: SaleItemScalarFieldEnum[] | SaleItemScalarFieldEnum
    having?: SaleItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleItemCountAggregateInputType | true
    _avg?: SaleItemAvgAggregateInputType
    _sum?: SaleItemSumAggregateInputType
    _min?: SaleItemMinAggregateInputType
    _max?: SaleItemMaxAggregateInputType
  }

  export type SaleItemGroupByOutputType = {
    id: string
    saleId: string | null
    productId: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId: string | null
    sync: boolean
    syncedAt: Date | null
    customerId: string | null
    isDeleted: boolean
    _count: SaleItemCountAggregateOutputType | null
    _avg: SaleItemAvgAggregateOutputType | null
    _sum: SaleItemSumAggregateOutputType | null
    _min: SaleItemMinAggregateOutputType | null
    _max: SaleItemMaxAggregateOutputType | null
  }

  type GetSaleItemGroupByPayload<T extends SaleItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleItemGroupByOutputType[P]>
            : GetScalarType<T[P], SaleItemGroupByOutputType[P]>
        }
      >
    >


  export type SaleItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    customerId?: boolean
    isDeleted?: boolean
    sale?: boolean | SaleItem$saleArgs<ExtArgs>
    product?: boolean | SaleItem$productArgs<ExtArgs>
    Warehouses?: boolean | SaleItem$WarehousesArgs<ExtArgs>
    Customer?: boolean | SaleItem$CustomerArgs<ExtArgs>
  }, ExtArgs["result"]["saleItem"]>

  export type SaleItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    customerId?: boolean
    isDeleted?: boolean
    sale?: boolean | SaleItem$saleArgs<ExtArgs>
    product?: boolean | SaleItem$productArgs<ExtArgs>
    Warehouses?: boolean | SaleItem$WarehousesArgs<ExtArgs>
    Customer?: boolean | SaleItem$CustomerArgs<ExtArgs>
  }, ExtArgs["result"]["saleItem"]>

  export type SaleItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saleId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    customerId?: boolean
    isDeleted?: boolean
    sale?: boolean | SaleItem$saleArgs<ExtArgs>
    product?: boolean | SaleItem$productArgs<ExtArgs>
    Warehouses?: boolean | SaleItem$WarehousesArgs<ExtArgs>
    Customer?: boolean | SaleItem$CustomerArgs<ExtArgs>
  }, ExtArgs["result"]["saleItem"]>

  export type SaleItemSelectScalar = {
    id?: boolean
    saleId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    customerId?: boolean
    isDeleted?: boolean
  }

  export type SaleItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "saleId" | "productId" | "productName" | "cost" | "selectedPrice" | "priceType" | "quantity" | "discount" | "total" | "profit" | "warehousesId" | "sync" | "syncedAt" | "customerId" | "isDeleted", ExtArgs["result"]["saleItem"]>
  export type SaleItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sale?: boolean | SaleItem$saleArgs<ExtArgs>
    product?: boolean | SaleItem$productArgs<ExtArgs>
    Warehouses?: boolean | SaleItem$WarehousesArgs<ExtArgs>
    Customer?: boolean | SaleItem$CustomerArgs<ExtArgs>
  }
  export type SaleItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sale?: boolean | SaleItem$saleArgs<ExtArgs>
    product?: boolean | SaleItem$productArgs<ExtArgs>
    Warehouses?: boolean | SaleItem$WarehousesArgs<ExtArgs>
    Customer?: boolean | SaleItem$CustomerArgs<ExtArgs>
  }
  export type SaleItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sale?: boolean | SaleItem$saleArgs<ExtArgs>
    product?: boolean | SaleItem$productArgs<ExtArgs>
    Warehouses?: boolean | SaleItem$WarehousesArgs<ExtArgs>
    Customer?: boolean | SaleItem$CustomerArgs<ExtArgs>
  }

  export type $SaleItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaleItem"
    objects: {
      sale: Prisma.$SalePayload<ExtArgs> | null
      product: Prisma.$ProductPayload<ExtArgs> | null
      Warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      Customer: Prisma.$CustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      saleId: string | null
      productId: string | null
      productName: string
      cost: number
      selectedPrice: number
      priceType: string
      quantity: number
      discount: number
      total: number
      profit: number
      warehousesId: string | null
      sync: boolean
      syncedAt: Date | null
      customerId: string | null
      isDeleted: boolean
    }, ExtArgs["result"]["saleItem"]>
    composites: {}
  }

  type SaleItemGetPayload<S extends boolean | null | undefined | SaleItemDefaultArgs> = $Result.GetResult<Prisma.$SaleItemPayload, S>

  type SaleItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SaleItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SaleItemCountAggregateInputType | true
    }

  export interface SaleItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaleItem'], meta: { name: 'SaleItem' } }
    /**
     * Find zero or one SaleItem that matches the filter.
     * @param {SaleItemFindUniqueArgs} args - Arguments to find a SaleItem
     * @example
     * // Get one SaleItem
     * const saleItem = await prisma.saleItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaleItemFindUniqueArgs>(args: SelectSubset<T, SaleItemFindUniqueArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SaleItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SaleItemFindUniqueOrThrowArgs} args - Arguments to find a SaleItem
     * @example
     * // Get one SaleItem
     * const saleItem = await prisma.saleItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaleItemFindUniqueOrThrowArgs>(args: SelectSubset<T, SaleItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SaleItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleItemFindFirstArgs} args - Arguments to find a SaleItem
     * @example
     * // Get one SaleItem
     * const saleItem = await prisma.saleItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaleItemFindFirstArgs>(args?: SelectSubset<T, SaleItemFindFirstArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SaleItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleItemFindFirstOrThrowArgs} args - Arguments to find a SaleItem
     * @example
     * // Get one SaleItem
     * const saleItem = await prisma.saleItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaleItemFindFirstOrThrowArgs>(args?: SelectSubset<T, SaleItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SaleItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaleItems
     * const saleItems = await prisma.saleItem.findMany()
     * 
     * // Get first 10 SaleItems
     * const saleItems = await prisma.saleItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleItemWithIdOnly = await prisma.saleItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaleItemFindManyArgs>(args?: SelectSubset<T, SaleItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SaleItem.
     * @param {SaleItemCreateArgs} args - Arguments to create a SaleItem.
     * @example
     * // Create one SaleItem
     * const SaleItem = await prisma.saleItem.create({
     *   data: {
     *     // ... data to create a SaleItem
     *   }
     * })
     * 
     */
    create<T extends SaleItemCreateArgs>(args: SelectSubset<T, SaleItemCreateArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SaleItems.
     * @param {SaleItemCreateManyArgs} args - Arguments to create many SaleItems.
     * @example
     * // Create many SaleItems
     * const saleItem = await prisma.saleItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaleItemCreateManyArgs>(args?: SelectSubset<T, SaleItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SaleItems and returns the data saved in the database.
     * @param {SaleItemCreateManyAndReturnArgs} args - Arguments to create many SaleItems.
     * @example
     * // Create many SaleItems
     * const saleItem = await prisma.saleItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SaleItems and only return the `id`
     * const saleItemWithIdOnly = await prisma.saleItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaleItemCreateManyAndReturnArgs>(args?: SelectSubset<T, SaleItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SaleItem.
     * @param {SaleItemDeleteArgs} args - Arguments to delete one SaleItem.
     * @example
     * // Delete one SaleItem
     * const SaleItem = await prisma.saleItem.delete({
     *   where: {
     *     // ... filter to delete one SaleItem
     *   }
     * })
     * 
     */
    delete<T extends SaleItemDeleteArgs>(args: SelectSubset<T, SaleItemDeleteArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SaleItem.
     * @param {SaleItemUpdateArgs} args - Arguments to update one SaleItem.
     * @example
     * // Update one SaleItem
     * const saleItem = await prisma.saleItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaleItemUpdateArgs>(args: SelectSubset<T, SaleItemUpdateArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SaleItems.
     * @param {SaleItemDeleteManyArgs} args - Arguments to filter SaleItems to delete.
     * @example
     * // Delete a few SaleItems
     * const { count } = await prisma.saleItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaleItemDeleteManyArgs>(args?: SelectSubset<T, SaleItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaleItems
     * const saleItem = await prisma.saleItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaleItemUpdateManyArgs>(args: SelectSubset<T, SaleItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleItems and returns the data updated in the database.
     * @param {SaleItemUpdateManyAndReturnArgs} args - Arguments to update many SaleItems.
     * @example
     * // Update many SaleItems
     * const saleItem = await prisma.saleItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SaleItems and only return the `id`
     * const saleItemWithIdOnly = await prisma.saleItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SaleItemUpdateManyAndReturnArgs>(args: SelectSubset<T, SaleItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SaleItem.
     * @param {SaleItemUpsertArgs} args - Arguments to update or create a SaleItem.
     * @example
     * // Update or create a SaleItem
     * const saleItem = await prisma.saleItem.upsert({
     *   create: {
     *     // ... data to create a SaleItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaleItem we want to update
     *   }
     * })
     */
    upsert<T extends SaleItemUpsertArgs>(args: SelectSubset<T, SaleItemUpsertArgs<ExtArgs>>): Prisma__SaleItemClient<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SaleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleItemCountArgs} args - Arguments to filter SaleItems to count.
     * @example
     * // Count the number of SaleItems
     * const count = await prisma.saleItem.count({
     *   where: {
     *     // ... the filter for the SaleItems we want to count
     *   }
     * })
    **/
    count<T extends SaleItemCountArgs>(
      args?: Subset<T, SaleItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleItemAggregateArgs>(args: Subset<T, SaleItemAggregateArgs>): Prisma.PrismaPromise<GetSaleItemAggregateType<T>>

    /**
     * Group by SaleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleItemGroupByArgs['orderBy'] }
        : { orderBy?: SaleItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaleItem model
   */
  readonly fields: SaleItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaleItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sale<T extends SaleItem$saleArgs<ExtArgs> = {}>(args?: Subset<T, SaleItem$saleArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends SaleItem$productArgs<ExtArgs> = {}>(args?: Subset<T, SaleItem$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Warehouses<T extends SaleItem$WarehousesArgs<ExtArgs> = {}>(args?: Subset<T, SaleItem$WarehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Customer<T extends SaleItem$CustomerArgs<ExtArgs> = {}>(args?: Subset<T, SaleItem$CustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SaleItem model
   */
  interface SaleItemFieldRefs {
    readonly id: FieldRef<"SaleItem", 'String'>
    readonly saleId: FieldRef<"SaleItem", 'String'>
    readonly productId: FieldRef<"SaleItem", 'String'>
    readonly productName: FieldRef<"SaleItem", 'String'>
    readonly cost: FieldRef<"SaleItem", 'Float'>
    readonly selectedPrice: FieldRef<"SaleItem", 'Float'>
    readonly priceType: FieldRef<"SaleItem", 'String'>
    readonly quantity: FieldRef<"SaleItem", 'Int'>
    readonly discount: FieldRef<"SaleItem", 'Float'>
    readonly total: FieldRef<"SaleItem", 'Float'>
    readonly profit: FieldRef<"SaleItem", 'Float'>
    readonly warehousesId: FieldRef<"SaleItem", 'String'>
    readonly sync: FieldRef<"SaleItem", 'Boolean'>
    readonly syncedAt: FieldRef<"SaleItem", 'DateTime'>
    readonly customerId: FieldRef<"SaleItem", 'String'>
    readonly isDeleted: FieldRef<"SaleItem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * SaleItem findUnique
   */
  export type SaleItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * Filter, which SaleItem to fetch.
     */
    where: SaleItemWhereUniqueInput
  }

  /**
   * SaleItem findUniqueOrThrow
   */
  export type SaleItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * Filter, which SaleItem to fetch.
     */
    where: SaleItemWhereUniqueInput
  }

  /**
   * SaleItem findFirst
   */
  export type SaleItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * Filter, which SaleItem to fetch.
     */
    where?: SaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleItems to fetch.
     */
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleItems.
     */
    cursor?: SaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleItems.
     */
    distinct?: SaleItemScalarFieldEnum | SaleItemScalarFieldEnum[]
  }

  /**
   * SaleItem findFirstOrThrow
   */
  export type SaleItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * Filter, which SaleItem to fetch.
     */
    where?: SaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleItems to fetch.
     */
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleItems.
     */
    cursor?: SaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleItems.
     */
    distinct?: SaleItemScalarFieldEnum | SaleItemScalarFieldEnum[]
  }

  /**
   * SaleItem findMany
   */
  export type SaleItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * Filter, which SaleItems to fetch.
     */
    where?: SaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleItems to fetch.
     */
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaleItems.
     */
    cursor?: SaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleItems.
     */
    skip?: number
    distinct?: SaleItemScalarFieldEnum | SaleItemScalarFieldEnum[]
  }

  /**
   * SaleItem create
   */
  export type SaleItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * The data needed to create a SaleItem.
     */
    data: XOR<SaleItemCreateInput, SaleItemUncheckedCreateInput>
  }

  /**
   * SaleItem createMany
   */
  export type SaleItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaleItems.
     */
    data: SaleItemCreateManyInput | SaleItemCreateManyInput[]
  }

  /**
   * SaleItem createManyAndReturn
   */
  export type SaleItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * The data used to create many SaleItems.
     */
    data: SaleItemCreateManyInput | SaleItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaleItem update
   */
  export type SaleItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * The data needed to update a SaleItem.
     */
    data: XOR<SaleItemUpdateInput, SaleItemUncheckedUpdateInput>
    /**
     * Choose, which SaleItem to update.
     */
    where: SaleItemWhereUniqueInput
  }

  /**
   * SaleItem updateMany
   */
  export type SaleItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaleItems.
     */
    data: XOR<SaleItemUpdateManyMutationInput, SaleItemUncheckedUpdateManyInput>
    /**
     * Filter which SaleItems to update
     */
    where?: SaleItemWhereInput
    /**
     * Limit how many SaleItems to update.
     */
    limit?: number
  }

  /**
   * SaleItem updateManyAndReturn
   */
  export type SaleItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * The data used to update SaleItems.
     */
    data: XOR<SaleItemUpdateManyMutationInput, SaleItemUncheckedUpdateManyInput>
    /**
     * Filter which SaleItems to update
     */
    where?: SaleItemWhereInput
    /**
     * Limit how many SaleItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaleItem upsert
   */
  export type SaleItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * The filter to search for the SaleItem to update in case it exists.
     */
    where: SaleItemWhereUniqueInput
    /**
     * In case the SaleItem found by the `where` argument doesn't exist, create a new SaleItem with this data.
     */
    create: XOR<SaleItemCreateInput, SaleItemUncheckedCreateInput>
    /**
     * In case the SaleItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleItemUpdateInput, SaleItemUncheckedUpdateInput>
  }

  /**
   * SaleItem delete
   */
  export type SaleItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    /**
     * Filter which SaleItem to delete.
     */
    where: SaleItemWhereUniqueInput
  }

  /**
   * SaleItem deleteMany
   */
  export type SaleItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleItems to delete
     */
    where?: SaleItemWhereInput
    /**
     * Limit how many SaleItems to delete.
     */
    limit?: number
  }

  /**
   * SaleItem.sale
   */
  export type SaleItem$saleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
  }

  /**
   * SaleItem.product
   */
  export type SaleItem$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * SaleItem.Warehouses
   */
  export type SaleItem$WarehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * SaleItem.Customer
   */
  export type SaleItem$CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * SaleItem without action
   */
  export type SaleItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
  }


  /**
   * Model Purchase
   */

  export type AggregatePurchase = {
    _count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  export type PurchaseAvgAggregateOutputType = {
    taxRate: number | null
    subTotal: number | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
  }

  export type PurchaseSumAggregateOutputType = {
    taxRate: number | null
    subTotal: number | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
  }

  export type PurchaseMinAggregateOutputType = {
    id: string | null
    taxRate: number | null
    subTotal: number | null
    notes: string | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
    warehousesId: string | null
    referenceNo: string | null
    sync: boolean | null
    syncedAt: Date | null
    supplierId: string | null
    isDeleted: boolean | null
  }

  export type PurchaseMaxAggregateOutputType = {
    id: string | null
    taxRate: number | null
    subTotal: number | null
    notes: string | null
    amountPaid: number | null
    grandTotal: number | null
    paidAmount: number | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
    warehousesId: string | null
    referenceNo: string | null
    sync: boolean | null
    syncedAt: Date | null
    supplierId: string | null
    isDeleted: boolean | null
  }

  export type PurchaseCountAggregateOutputType = {
    id: number
    taxRate: number
    subTotal: number
    notes: number
    amountPaid: number
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt: number
    updatedAt: number
    warehousesId: number
    referenceNo: number
    sync: number
    syncedAt: number
    supplierId: number
    isDeleted: number
    _all: number
  }


  export type PurchaseAvgAggregateInputType = {
    taxRate?: true
    subTotal?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
  }

  export type PurchaseSumAggregateInputType = {
    taxRate?: true
    subTotal?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
  }

  export type PurchaseMinAggregateInputType = {
    id?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    referenceNo?: true
    sync?: true
    syncedAt?: true
    supplierId?: true
    isDeleted?: true
  }

  export type PurchaseMaxAggregateInputType = {
    id?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    referenceNo?: true
    sync?: true
    syncedAt?: true
    supplierId?: true
    isDeleted?: true
  }

  export type PurchaseCountAggregateInputType = {
    id?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    amountPaid?: true
    grandTotal?: true
    paidAmount?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    referenceNo?: true
    sync?: true
    syncedAt?: true
    supplierId?: true
    isDeleted?: true
    _all?: true
  }

  export type PurchaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchase to aggregate.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Purchases
    **/
    _count?: true | PurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseMaxAggregateInputType
  }

  export type GetPurchaseAggregateType<T extends PurchaseAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchase[P]>
      : GetScalarType<T[P], AggregatePurchase[P]>
  }




  export type PurchaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithAggregationInput | PurchaseOrderByWithAggregationInput[]
    by: PurchaseScalarFieldEnum[] | PurchaseScalarFieldEnum
    having?: PurchaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseCountAggregateInputType | true
    _avg?: PurchaseAvgAggregateInputType
    _sum?: PurchaseSumAggregateInputType
    _min?: PurchaseMinAggregateInputType
    _max?: PurchaseMaxAggregateInputType
  }

  export type PurchaseGroupByOutputType = {
    id: string
    taxRate: number
    subTotal: number
    notes: string | null
    amountPaid: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt: Date
    updatedAt: Date
    warehousesId: string | null
    referenceNo: string
    sync: boolean
    syncedAt: Date | null
    supplierId: string | null
    isDeleted: boolean
    _count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  type GetPurchaseGroupByPayload<T extends PurchaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    referenceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    supplierId?: boolean
    isDeleted?: boolean
    purchaseItem?: boolean | Purchase$purchaseItemArgs<ExtArgs>
    warehouses?: boolean | Purchase$warehousesArgs<ExtArgs>
    Supplier?: boolean | Purchase$SupplierArgs<ExtArgs>
    _count?: boolean | PurchaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchase"]>

  export type PurchaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    referenceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    supplierId?: boolean
    isDeleted?: boolean
    warehouses?: boolean | Purchase$warehousesArgs<ExtArgs>
    Supplier?: boolean | Purchase$SupplierArgs<ExtArgs>
  }, ExtArgs["result"]["purchase"]>

  export type PurchaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    referenceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    supplierId?: boolean
    isDeleted?: boolean
    warehouses?: boolean | Purchase$warehousesArgs<ExtArgs>
    Supplier?: boolean | Purchase$SupplierArgs<ExtArgs>
  }, ExtArgs["result"]["purchase"]>

  export type PurchaseSelectScalar = {
    id?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    amountPaid?: boolean
    grandTotal?: boolean
    paidAmount?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    referenceNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    supplierId?: boolean
    isDeleted?: boolean
  }

  export type PurchaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "taxRate" | "subTotal" | "notes" | "amountPaid" | "grandTotal" | "paidAmount" | "balance" | "createdAt" | "updatedAt" | "warehousesId" | "referenceNo" | "sync" | "syncedAt" | "supplierId" | "isDeleted", ExtArgs["result"]["purchase"]>
  export type PurchaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaseItem?: boolean | Purchase$purchaseItemArgs<ExtArgs>
    warehouses?: boolean | Purchase$warehousesArgs<ExtArgs>
    Supplier?: boolean | Purchase$SupplierArgs<ExtArgs>
    _count?: boolean | PurchaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PurchaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | Purchase$warehousesArgs<ExtArgs>
    Supplier?: boolean | Purchase$SupplierArgs<ExtArgs>
  }
  export type PurchaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | Purchase$warehousesArgs<ExtArgs>
    Supplier?: boolean | Purchase$SupplierArgs<ExtArgs>
  }

  export type $PurchasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Purchase"
    objects: {
      purchaseItem: Prisma.$PurchaseItemPayload<ExtArgs>[]
      warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      Supplier: Prisma.$SupplierPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      taxRate: number
      subTotal: number
      notes: string | null
      amountPaid: number | null
      grandTotal: number
      paidAmount: number
      balance: number
      createdAt: Date
      updatedAt: Date
      warehousesId: string | null
      referenceNo: string
      sync: boolean
      syncedAt: Date | null
      supplierId: string | null
      isDeleted: boolean
    }, ExtArgs["result"]["purchase"]>
    composites: {}
  }

  type PurchaseGetPayload<S extends boolean | null | undefined | PurchaseDefaultArgs> = $Result.GetResult<Prisma.$PurchasePayload, S>

  type PurchaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PurchaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PurchaseCountAggregateInputType | true
    }

  export interface PurchaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Purchase'], meta: { name: 'Purchase' } }
    /**
     * Find zero or one Purchase that matches the filter.
     * @param {PurchaseFindUniqueArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseFindUniqueArgs>(args: SelectSubset<T, PurchaseFindUniqueArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Purchase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PurchaseFindUniqueOrThrowArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Purchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseFindFirstArgs>(args?: SelectSubset<T, PurchaseFindFirstArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Purchase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstOrThrowArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Purchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Purchases
     * const purchases = await prisma.purchase.findMany()
     * 
     * // Get first 10 Purchases
     * const purchases = await prisma.purchase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseWithIdOnly = await prisma.purchase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PurchaseFindManyArgs>(args?: SelectSubset<T, PurchaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Purchase.
     * @param {PurchaseCreateArgs} args - Arguments to create a Purchase.
     * @example
     * // Create one Purchase
     * const Purchase = await prisma.purchase.create({
     *   data: {
     *     // ... data to create a Purchase
     *   }
     * })
     * 
     */
    create<T extends PurchaseCreateArgs>(args: SelectSubset<T, PurchaseCreateArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Purchases.
     * @param {PurchaseCreateManyArgs} args - Arguments to create many Purchases.
     * @example
     * // Create many Purchases
     * const purchase = await prisma.purchase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseCreateManyArgs>(args?: SelectSubset<T, PurchaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Purchases and returns the data saved in the database.
     * @param {PurchaseCreateManyAndReturnArgs} args - Arguments to create many Purchases.
     * @example
     * // Create many Purchases
     * const purchase = await prisma.purchase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Purchases and only return the `id`
     * const purchaseWithIdOnly = await prisma.purchase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Purchase.
     * @param {PurchaseDeleteArgs} args - Arguments to delete one Purchase.
     * @example
     * // Delete one Purchase
     * const Purchase = await prisma.purchase.delete({
     *   where: {
     *     // ... filter to delete one Purchase
     *   }
     * })
     * 
     */
    delete<T extends PurchaseDeleteArgs>(args: SelectSubset<T, PurchaseDeleteArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Purchase.
     * @param {PurchaseUpdateArgs} args - Arguments to update one Purchase.
     * @example
     * // Update one Purchase
     * const purchase = await prisma.purchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseUpdateArgs>(args: SelectSubset<T, PurchaseUpdateArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Purchases.
     * @param {PurchaseDeleteManyArgs} args - Arguments to filter Purchases to delete.
     * @example
     * // Delete a few Purchases
     * const { count } = await prisma.purchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseDeleteManyArgs>(args?: SelectSubset<T, PurchaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseUpdateManyArgs>(args: SelectSubset<T, PurchaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases and returns the data updated in the database.
     * @param {PurchaseUpdateManyAndReturnArgs} args - Arguments to update many Purchases.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Purchases and only return the `id`
     * const purchaseWithIdOnly = await prisma.purchase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PurchaseUpdateManyAndReturnArgs>(args: SelectSubset<T, PurchaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Purchase.
     * @param {PurchaseUpsertArgs} args - Arguments to update or create a Purchase.
     * @example
     * // Update or create a Purchase
     * const purchase = await prisma.purchase.upsert({
     *   create: {
     *     // ... data to create a Purchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Purchase we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseUpsertArgs>(args: SelectSubset<T, PurchaseUpsertArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseCountArgs} args - Arguments to filter Purchases to count.
     * @example
     * // Count the number of Purchases
     * const count = await prisma.purchase.count({
     *   where: {
     *     // ... the filter for the Purchases we want to count
     *   }
     * })
    **/
    count<T extends PurchaseCountArgs>(
      args?: Subset<T, PurchaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseAggregateArgs>(args: Subset<T, PurchaseAggregateArgs>): Prisma.PrismaPromise<GetPurchaseAggregateType<T>>

    /**
     * Group by Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Purchase model
   */
  readonly fields: PurchaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Purchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    purchaseItem<T extends Purchase$purchaseItemArgs<ExtArgs> = {}>(args?: Subset<T, Purchase$purchaseItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    warehouses<T extends Purchase$warehousesArgs<ExtArgs> = {}>(args?: Subset<T, Purchase$warehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Supplier<T extends Purchase$SupplierArgs<ExtArgs> = {}>(args?: Subset<T, Purchase$SupplierArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Purchase model
   */
  interface PurchaseFieldRefs {
    readonly id: FieldRef<"Purchase", 'String'>
    readonly taxRate: FieldRef<"Purchase", 'Float'>
    readonly subTotal: FieldRef<"Purchase", 'Float'>
    readonly notes: FieldRef<"Purchase", 'String'>
    readonly amountPaid: FieldRef<"Purchase", 'Float'>
    readonly grandTotal: FieldRef<"Purchase", 'Float'>
    readonly paidAmount: FieldRef<"Purchase", 'Float'>
    readonly balance: FieldRef<"Purchase", 'Float'>
    readonly createdAt: FieldRef<"Purchase", 'DateTime'>
    readonly updatedAt: FieldRef<"Purchase", 'DateTime'>
    readonly warehousesId: FieldRef<"Purchase", 'String'>
    readonly referenceNo: FieldRef<"Purchase", 'String'>
    readonly sync: FieldRef<"Purchase", 'Boolean'>
    readonly syncedAt: FieldRef<"Purchase", 'DateTime'>
    readonly supplierId: FieldRef<"Purchase", 'String'>
    readonly isDeleted: FieldRef<"Purchase", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Purchase findUnique
   */
  export type PurchaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase findUniqueOrThrow
   */
  export type PurchaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase findFirst
   */
  export type PurchaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     */
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase findFirstOrThrow
   */
  export type PurchaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchase to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     */
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase findMany
   */
  export type PurchaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter, which Purchases to fetch.
     */
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     */
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Purchases.
     */
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     */
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Purchase create
   */
  export type PurchaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Purchase.
     */
    data: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
  }

  /**
   * Purchase createMany
   */
  export type PurchaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Purchases.
     */
    data: PurchaseCreateManyInput | PurchaseCreateManyInput[]
  }

  /**
   * Purchase createManyAndReturn
   */
  export type PurchaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * The data used to create many Purchases.
     */
    data: PurchaseCreateManyInput | PurchaseCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Purchase update
   */
  export type PurchaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Purchase.
     */
    data: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
    /**
     * Choose, which Purchase to update.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase updateMany
   */
  export type PurchaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Purchases.
     */
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    /**
     * Filter which Purchases to update
     */
    where?: PurchaseWhereInput
    /**
     * Limit how many Purchases to update.
     */
    limit?: number
  }

  /**
   * Purchase updateManyAndReturn
   */
  export type PurchaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * The data used to update Purchases.
     */
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    /**
     * Filter which Purchases to update
     */
    where?: PurchaseWhereInput
    /**
     * Limit how many Purchases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Purchase upsert
   */
  export type PurchaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Purchase to update in case it exists.
     */
    where: PurchaseWhereUniqueInput
    /**
     * In case the Purchase found by the `where` argument doesn't exist, create a new Purchase with this data.
     */
    create: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
    /**
     * In case the Purchase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
  }

  /**
   * Purchase delete
   */
  export type PurchaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    /**
     * Filter which Purchase to delete.
     */
    where: PurchaseWhereUniqueInput
  }

  /**
   * Purchase deleteMany
   */
  export type PurchaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Purchases to delete
     */
    where?: PurchaseWhereInput
    /**
     * Limit how many Purchases to delete.
     */
    limit?: number
  }

  /**
   * Purchase.purchaseItem
   */
  export type Purchase$purchaseItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    where?: PurchaseItemWhereInput
    orderBy?: PurchaseItemOrderByWithRelationInput | PurchaseItemOrderByWithRelationInput[]
    cursor?: PurchaseItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseItemScalarFieldEnum | PurchaseItemScalarFieldEnum[]
  }

  /**
   * Purchase.warehouses
   */
  export type Purchase$warehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * Purchase.Supplier
   */
  export type Purchase$SupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    where?: SupplierWhereInput
  }

  /**
   * Purchase without action
   */
  export type PurchaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
  }


  /**
   * Model PurchaseItem
   */

  export type AggregatePurchaseItem = {
    _count: PurchaseItemCountAggregateOutputType | null
    _avg: PurchaseItemAvgAggregateOutputType | null
    _sum: PurchaseItemSumAggregateOutputType | null
    _min: PurchaseItemMinAggregateOutputType | null
    _max: PurchaseItemMaxAggregateOutputType | null
  }

  export type PurchaseItemAvgAggregateOutputType = {
    cost: number | null
    selectedPrice: number | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
    customRetailPrice: number | null
    customWholesalePrice: number | null
  }

  export type PurchaseItemSumAggregateOutputType = {
    cost: number | null
    selectedPrice: number | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
    customRetailPrice: number | null
    customWholesalePrice: number | null
  }

  export type PurchaseItemMinAggregateOutputType = {
    id: string | null
    productId: string | null
    cost: number | null
    productName: string | null
    selectedPrice: number | null
    priceType: string | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    purchaseId: string | null
    customRetailPrice: number | null
    customWholesalePrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type PurchaseItemMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    cost: number | null
    productName: string | null
    selectedPrice: number | null
    priceType: string | null
    quantity: number | null
    discount: number | null
    total: number | null
    profit: number | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    purchaseId: string | null
    customRetailPrice: number | null
    customWholesalePrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type PurchaseItemCountAggregateOutputType = {
    id: number
    productId: number
    cost: number
    productName: number
    selectedPrice: number
    priceType: number
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId: number
    sync: number
    syncedAt: number
    purchaseId: number
    customRetailPrice: number
    customWholesalePrice: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    _all: number
  }


  export type PurchaseItemAvgAggregateInputType = {
    cost?: true
    selectedPrice?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    customRetailPrice?: true
    customWholesalePrice?: true
  }

  export type PurchaseItemSumAggregateInputType = {
    cost?: true
    selectedPrice?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    customRetailPrice?: true
    customWholesalePrice?: true
  }

  export type PurchaseItemMinAggregateInputType = {
    id?: true
    productId?: true
    cost?: true
    productName?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    purchaseId?: true
    customRetailPrice?: true
    customWholesalePrice?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type PurchaseItemMaxAggregateInputType = {
    id?: true
    productId?: true
    cost?: true
    productName?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    purchaseId?: true
    customRetailPrice?: true
    customWholesalePrice?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type PurchaseItemCountAggregateInputType = {
    id?: true
    productId?: true
    cost?: true
    productName?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    profit?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    purchaseId?: true
    customRetailPrice?: true
    customWholesalePrice?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type PurchaseItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseItem to aggregate.
     */
    where?: PurchaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: PurchaseItemOrderByWithRelationInput | PurchaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseItems
    **/
    _count?: true | PurchaseItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseItemMaxAggregateInputType
  }

  export type GetPurchaseItemAggregateType<T extends PurchaseItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseItem[P]>
      : GetScalarType<T[P], AggregatePurchaseItem[P]>
  }




  export type PurchaseItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseItemWhereInput
    orderBy?: PurchaseItemOrderByWithAggregationInput | PurchaseItemOrderByWithAggregationInput[]
    by: PurchaseItemScalarFieldEnum[] | PurchaseItemScalarFieldEnum
    having?: PurchaseItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseItemCountAggregateInputType | true
    _avg?: PurchaseItemAvgAggregateInputType
    _sum?: PurchaseItemSumAggregateInputType
    _min?: PurchaseItemMinAggregateInputType
    _max?: PurchaseItemMaxAggregateInputType
  }

  export type PurchaseItemGroupByOutputType = {
    id: string
    productId: string | null
    cost: number
    productName: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId: string | null
    sync: boolean
    syncedAt: Date | null
    purchaseId: string | null
    customRetailPrice: number | null
    customWholesalePrice: number | null
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    _count: PurchaseItemCountAggregateOutputType | null
    _avg: PurchaseItemAvgAggregateOutputType | null
    _sum: PurchaseItemSumAggregateOutputType | null
    _min: PurchaseItemMinAggregateOutputType | null
    _max: PurchaseItemMaxAggregateOutputType | null
  }

  type GetPurchaseItemGroupByPayload<T extends PurchaseItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseItemGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseItemGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    cost?: boolean
    productName?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    purchaseId?: boolean
    customRetailPrice?: boolean
    customWholesalePrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    product?: boolean | PurchaseItem$productArgs<ExtArgs>
    Warehouses?: boolean | PurchaseItem$WarehousesArgs<ExtArgs>
    Purchase?: boolean | PurchaseItem$PurchaseArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseItem"]>

  export type PurchaseItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    cost?: boolean
    productName?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    purchaseId?: boolean
    customRetailPrice?: boolean
    customWholesalePrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    product?: boolean | PurchaseItem$productArgs<ExtArgs>
    Warehouses?: boolean | PurchaseItem$WarehousesArgs<ExtArgs>
    Purchase?: boolean | PurchaseItem$PurchaseArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseItem"]>

  export type PurchaseItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    cost?: boolean
    productName?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    purchaseId?: boolean
    customRetailPrice?: boolean
    customWholesalePrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    product?: boolean | PurchaseItem$productArgs<ExtArgs>
    Warehouses?: boolean | PurchaseItem$WarehousesArgs<ExtArgs>
    Purchase?: boolean | PurchaseItem$PurchaseArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseItem"]>

  export type PurchaseItemSelectScalar = {
    id?: boolean
    productId?: boolean
    cost?: boolean
    productName?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    profit?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    purchaseId?: boolean
    customRetailPrice?: boolean
    customWholesalePrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }

  export type PurchaseItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "cost" | "productName" | "selectedPrice" | "priceType" | "quantity" | "discount" | "total" | "profit" | "warehousesId" | "sync" | "syncedAt" | "purchaseId" | "customRetailPrice" | "customWholesalePrice" | "createdAt" | "updatedAt" | "isDeleted", ExtArgs["result"]["purchaseItem"]>
  export type PurchaseItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | PurchaseItem$productArgs<ExtArgs>
    Warehouses?: boolean | PurchaseItem$WarehousesArgs<ExtArgs>
    Purchase?: boolean | PurchaseItem$PurchaseArgs<ExtArgs>
  }
  export type PurchaseItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | PurchaseItem$productArgs<ExtArgs>
    Warehouses?: boolean | PurchaseItem$WarehousesArgs<ExtArgs>
    Purchase?: boolean | PurchaseItem$PurchaseArgs<ExtArgs>
  }
  export type PurchaseItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | PurchaseItem$productArgs<ExtArgs>
    Warehouses?: boolean | PurchaseItem$WarehousesArgs<ExtArgs>
    Purchase?: boolean | PurchaseItem$PurchaseArgs<ExtArgs>
  }

  export type $PurchaseItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PurchaseItem"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs> | null
      Warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      Purchase: Prisma.$PurchasePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string | null
      cost: number
      productName: string | null
      selectedPrice: number
      priceType: string
      quantity: number
      discount: number
      total: number
      profit: number
      warehousesId: string | null
      sync: boolean
      syncedAt: Date | null
      purchaseId: string | null
      customRetailPrice: number | null
      customWholesalePrice: number | null
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
    }, ExtArgs["result"]["purchaseItem"]>
    composites: {}
  }

  type PurchaseItemGetPayload<S extends boolean | null | undefined | PurchaseItemDefaultArgs> = $Result.GetResult<Prisma.$PurchaseItemPayload, S>

  type PurchaseItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PurchaseItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PurchaseItemCountAggregateInputType | true
    }

  export interface PurchaseItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseItem'], meta: { name: 'PurchaseItem' } }
    /**
     * Find zero or one PurchaseItem that matches the filter.
     * @param {PurchaseItemFindUniqueArgs} args - Arguments to find a PurchaseItem
     * @example
     * // Get one PurchaseItem
     * const purchaseItem = await prisma.purchaseItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseItemFindUniqueArgs>(args: SelectSubset<T, PurchaseItemFindUniqueArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PurchaseItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PurchaseItemFindUniqueOrThrowArgs} args - Arguments to find a PurchaseItem
     * @example
     * // Get one PurchaseItem
     * const purchaseItem = await prisma.purchaseItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PurchaseItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemFindFirstArgs} args - Arguments to find a PurchaseItem
     * @example
     * // Get one PurchaseItem
     * const purchaseItem = await prisma.purchaseItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseItemFindFirstArgs>(args?: SelectSubset<T, PurchaseItemFindFirstArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PurchaseItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemFindFirstOrThrowArgs} args - Arguments to find a PurchaseItem
     * @example
     * // Get one PurchaseItem
     * const purchaseItem = await prisma.purchaseItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PurchaseItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseItems
     * const purchaseItems = await prisma.purchaseItem.findMany()
     * 
     * // Get first 10 PurchaseItems
     * const purchaseItems = await prisma.purchaseItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseItemWithIdOnly = await prisma.purchaseItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PurchaseItemFindManyArgs>(args?: SelectSubset<T, PurchaseItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PurchaseItem.
     * @param {PurchaseItemCreateArgs} args - Arguments to create a PurchaseItem.
     * @example
     * // Create one PurchaseItem
     * const PurchaseItem = await prisma.purchaseItem.create({
     *   data: {
     *     // ... data to create a PurchaseItem
     *   }
     * })
     * 
     */
    create<T extends PurchaseItemCreateArgs>(args: SelectSubset<T, PurchaseItemCreateArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PurchaseItems.
     * @param {PurchaseItemCreateManyArgs} args - Arguments to create many PurchaseItems.
     * @example
     * // Create many PurchaseItems
     * const purchaseItem = await prisma.purchaseItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseItemCreateManyArgs>(args?: SelectSubset<T, PurchaseItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PurchaseItems and returns the data saved in the database.
     * @param {PurchaseItemCreateManyAndReturnArgs} args - Arguments to create many PurchaseItems.
     * @example
     * // Create many PurchaseItems
     * const purchaseItem = await prisma.purchaseItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PurchaseItems and only return the `id`
     * const purchaseItemWithIdOnly = await prisma.purchaseItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PurchaseItem.
     * @param {PurchaseItemDeleteArgs} args - Arguments to delete one PurchaseItem.
     * @example
     * // Delete one PurchaseItem
     * const PurchaseItem = await prisma.purchaseItem.delete({
     *   where: {
     *     // ... filter to delete one PurchaseItem
     *   }
     * })
     * 
     */
    delete<T extends PurchaseItemDeleteArgs>(args: SelectSubset<T, PurchaseItemDeleteArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PurchaseItem.
     * @param {PurchaseItemUpdateArgs} args - Arguments to update one PurchaseItem.
     * @example
     * // Update one PurchaseItem
     * const purchaseItem = await prisma.purchaseItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseItemUpdateArgs>(args: SelectSubset<T, PurchaseItemUpdateArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PurchaseItems.
     * @param {PurchaseItemDeleteManyArgs} args - Arguments to filter PurchaseItems to delete.
     * @example
     * // Delete a few PurchaseItems
     * const { count } = await prisma.purchaseItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseItemDeleteManyArgs>(args?: SelectSubset<T, PurchaseItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseItems
     * const purchaseItem = await prisma.purchaseItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseItemUpdateManyArgs>(args: SelectSubset<T, PurchaseItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseItems and returns the data updated in the database.
     * @param {PurchaseItemUpdateManyAndReturnArgs} args - Arguments to update many PurchaseItems.
     * @example
     * // Update many PurchaseItems
     * const purchaseItem = await prisma.purchaseItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PurchaseItems and only return the `id`
     * const purchaseItemWithIdOnly = await prisma.purchaseItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PurchaseItemUpdateManyAndReturnArgs>(args: SelectSubset<T, PurchaseItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PurchaseItem.
     * @param {PurchaseItemUpsertArgs} args - Arguments to update or create a PurchaseItem.
     * @example
     * // Update or create a PurchaseItem
     * const purchaseItem = await prisma.purchaseItem.upsert({
     *   create: {
     *     // ... data to create a PurchaseItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseItem we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseItemUpsertArgs>(args: SelectSubset<T, PurchaseItemUpsertArgs<ExtArgs>>): Prisma__PurchaseItemClient<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PurchaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemCountArgs} args - Arguments to filter PurchaseItems to count.
     * @example
     * // Count the number of PurchaseItems
     * const count = await prisma.purchaseItem.count({
     *   where: {
     *     // ... the filter for the PurchaseItems we want to count
     *   }
     * })
    **/
    count<T extends PurchaseItemCountArgs>(
      args?: Subset<T, PurchaseItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseItemAggregateArgs>(args: Subset<T, PurchaseItemAggregateArgs>): Prisma.PrismaPromise<GetPurchaseItemAggregateType<T>>

    /**
     * Group by PurchaseItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseItemGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseItem model
   */
  readonly fields: PurchaseItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends PurchaseItem$productArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseItem$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Warehouses<T extends PurchaseItem$WarehousesArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseItem$WarehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Purchase<T extends PurchaseItem$PurchaseArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseItem$PurchaseArgs<ExtArgs>>): Prisma__PurchaseClient<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PurchaseItem model
   */
  interface PurchaseItemFieldRefs {
    readonly id: FieldRef<"PurchaseItem", 'String'>
    readonly productId: FieldRef<"PurchaseItem", 'String'>
    readonly cost: FieldRef<"PurchaseItem", 'Float'>
    readonly productName: FieldRef<"PurchaseItem", 'String'>
    readonly selectedPrice: FieldRef<"PurchaseItem", 'Float'>
    readonly priceType: FieldRef<"PurchaseItem", 'String'>
    readonly quantity: FieldRef<"PurchaseItem", 'Int'>
    readonly discount: FieldRef<"PurchaseItem", 'Float'>
    readonly total: FieldRef<"PurchaseItem", 'Float'>
    readonly profit: FieldRef<"PurchaseItem", 'Float'>
    readonly warehousesId: FieldRef<"PurchaseItem", 'String'>
    readonly sync: FieldRef<"PurchaseItem", 'Boolean'>
    readonly syncedAt: FieldRef<"PurchaseItem", 'DateTime'>
    readonly purchaseId: FieldRef<"PurchaseItem", 'String'>
    readonly customRetailPrice: FieldRef<"PurchaseItem", 'Float'>
    readonly customWholesalePrice: FieldRef<"PurchaseItem", 'Float'>
    readonly createdAt: FieldRef<"PurchaseItem", 'DateTime'>
    readonly updatedAt: FieldRef<"PurchaseItem", 'DateTime'>
    readonly isDeleted: FieldRef<"PurchaseItem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PurchaseItem findUnique
   */
  export type PurchaseItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItem to fetch.
     */
    where: PurchaseItemWhereUniqueInput
  }

  /**
   * PurchaseItem findUniqueOrThrow
   */
  export type PurchaseItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItem to fetch.
     */
    where: PurchaseItemWhereUniqueInput
  }

  /**
   * PurchaseItem findFirst
   */
  export type PurchaseItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItem to fetch.
     */
    where?: PurchaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: PurchaseItemOrderByWithRelationInput | PurchaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseItems.
     */
    cursor?: PurchaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseItems.
     */
    distinct?: PurchaseItemScalarFieldEnum | PurchaseItemScalarFieldEnum[]
  }

  /**
   * PurchaseItem findFirstOrThrow
   */
  export type PurchaseItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItem to fetch.
     */
    where?: PurchaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: PurchaseItemOrderByWithRelationInput | PurchaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseItems.
     */
    cursor?: PurchaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseItems.
     */
    distinct?: PurchaseItemScalarFieldEnum | PurchaseItemScalarFieldEnum[]
  }

  /**
   * PurchaseItem findMany
   */
  export type PurchaseItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItems to fetch.
     */
    where?: PurchaseItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: PurchaseItemOrderByWithRelationInput | PurchaseItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseItems.
     */
    cursor?: PurchaseItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    distinct?: PurchaseItemScalarFieldEnum | PurchaseItemScalarFieldEnum[]
  }

  /**
   * PurchaseItem create
   */
  export type PurchaseItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseItem.
     */
    data: XOR<PurchaseItemCreateInput, PurchaseItemUncheckedCreateInput>
  }

  /**
   * PurchaseItem createMany
   */
  export type PurchaseItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseItems.
     */
    data: PurchaseItemCreateManyInput | PurchaseItemCreateManyInput[]
  }

  /**
   * PurchaseItem createManyAndReturn
   */
  export type PurchaseItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * The data used to create many PurchaseItems.
     */
    data: PurchaseItemCreateManyInput | PurchaseItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseItem update
   */
  export type PurchaseItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseItem.
     */
    data: XOR<PurchaseItemUpdateInput, PurchaseItemUncheckedUpdateInput>
    /**
     * Choose, which PurchaseItem to update.
     */
    where: PurchaseItemWhereUniqueInput
  }

  /**
   * PurchaseItem updateMany
   */
  export type PurchaseItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseItems.
     */
    data: XOR<PurchaseItemUpdateManyMutationInput, PurchaseItemUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseItems to update
     */
    where?: PurchaseItemWhereInput
    /**
     * Limit how many PurchaseItems to update.
     */
    limit?: number
  }

  /**
   * PurchaseItem updateManyAndReturn
   */
  export type PurchaseItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * The data used to update PurchaseItems.
     */
    data: XOR<PurchaseItemUpdateManyMutationInput, PurchaseItemUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseItems to update
     */
    where?: PurchaseItemWhereInput
    /**
     * Limit how many PurchaseItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseItem upsert
   */
  export type PurchaseItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseItem to update in case it exists.
     */
    where: PurchaseItemWhereUniqueInput
    /**
     * In case the PurchaseItem found by the `where` argument doesn't exist, create a new PurchaseItem with this data.
     */
    create: XOR<PurchaseItemCreateInput, PurchaseItemUncheckedCreateInput>
    /**
     * In case the PurchaseItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseItemUpdateInput, PurchaseItemUncheckedUpdateInput>
  }

  /**
   * PurchaseItem delete
   */
  export type PurchaseItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    /**
     * Filter which PurchaseItem to delete.
     */
    where: PurchaseItemWhereUniqueInput
  }

  /**
   * PurchaseItem deleteMany
   */
  export type PurchaseItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseItems to delete
     */
    where?: PurchaseItemWhereInput
    /**
     * Limit how many PurchaseItems to delete.
     */
    limit?: number
  }

  /**
   * PurchaseItem.product
   */
  export type PurchaseItem$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * PurchaseItem.Warehouses
   */
  export type PurchaseItem$WarehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * PurchaseItem.Purchase
   */
  export type PurchaseItem$PurchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
  }

  /**
   * PurchaseItem without action
   */
  export type PurchaseItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    companyName: string | null
    email: string | null
    address: string | null
    phone: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    companyName: string | null
    email: string | null
    address: string | null
    phone: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    type: number
    companyName: number
    email: number
    address: number
    phone: number
    warehousesId: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    companyName?: true
    email?: true
    address?: true
    phone?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    companyName?: true
    email?: true
    address?: true
    phone?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    companyName?: true
    email?: true
    address?: true
    phone?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    name: string
    type: string
    companyName: string | null
    email: string | null
    address: string | null
    phone: string
    warehousesId: string
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | Customer$WarehousesArgs<ExtArgs>
    Sale?: boolean | Customer$SaleArgs<ExtArgs>
    saleItem?: boolean | Customer$saleItemArgs<ExtArgs>
    balancePayment?: boolean | Customer$balancePaymentArgs<ExtArgs>
    quotation?: boolean | Customer$quotationArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | Customer$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | Customer$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "companyName" | "email" | "address" | "phone" | "warehousesId" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | Customer$WarehousesArgs<ExtArgs>
    Sale?: boolean | Customer$SaleArgs<ExtArgs>
    saleItem?: boolean | Customer$saleItemArgs<ExtArgs>
    balancePayment?: boolean | Customer$balancePaymentArgs<ExtArgs>
    quotation?: boolean | Customer$quotationArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | Customer$WarehousesArgs<ExtArgs>
  }
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | Customer$WarehousesArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      Warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      Sale: Prisma.$SalePayload<ExtArgs>[]
      saleItem: Prisma.$SaleItemPayload<ExtArgs>[]
      balancePayment: Prisma.$BalancePaymentPayload<ExtArgs>[]
      quotation: Prisma.$QuotationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      companyName: string | null
      email: string | null
      address: string | null
      phone: string
      warehousesId: string
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Warehouses<T extends Customer$WarehousesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$WarehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Sale<T extends Customer$SaleArgs<ExtArgs> = {}>(args?: Subset<T, Customer$SaleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    saleItem<T extends Customer$saleItemArgs<ExtArgs> = {}>(args?: Subset<T, Customer$saleItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    balancePayment<T extends Customer$balancePaymentArgs<ExtArgs> = {}>(args?: Subset<T, Customer$balancePaymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quotation<T extends Customer$quotationArgs<ExtArgs> = {}>(args?: Subset<T, Customer$quotationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly type: FieldRef<"Customer", 'String'>
    readonly companyName: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly warehousesId: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
    readonly sync: FieldRef<"Customer", 'Boolean'>
    readonly syncedAt: FieldRef<"Customer", 'DateTime'>
    readonly isDeleted: FieldRef<"Customer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.Warehouses
   */
  export type Customer$WarehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * Customer.Sale
   */
  export type Customer$SaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    cursor?: SaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Customer.saleItem
   */
  export type Customer$saleItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    where?: SaleItemWhereInput
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    cursor?: SaleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleItemScalarFieldEnum | SaleItemScalarFieldEnum[]
  }

  /**
   * Customer.balancePayment
   */
  export type Customer$balancePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    where?: BalancePaymentWhereInput
    orderBy?: BalancePaymentOrderByWithRelationInput | BalancePaymentOrderByWithRelationInput[]
    cursor?: BalancePaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BalancePaymentScalarFieldEnum | BalancePaymentScalarFieldEnum[]
  }

  /**
   * Customer.quotation
   */
  export type Customer$quotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    where?: QuotationWhereInput
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    cursor?: QuotationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Supplier
   */

  export type AggregateSupplier = {
    _count: SupplierCountAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  export type SupplierMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    companyName: string | null
    email: string | null
    address: string | null
    phone: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type SupplierMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    companyName: string | null
    email: string | null
    address: string | null
    phone: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type SupplierCountAggregateOutputType = {
    id: number
    name: number
    type: number
    companyName: number
    email: number
    address: number
    phone: number
    warehousesId: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type SupplierMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    companyName?: true
    email?: true
    address?: true
    phone?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type SupplierMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    companyName?: true
    email?: true
    address?: true
    phone?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type SupplierCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    companyName?: true
    email?: true
    address?: true
    phone?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type SupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplier to aggregate.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suppliers
    **/
    _count?: true | SupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierMaxAggregateInputType
  }

  export type GetSupplierAggregateType<T extends SupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplier[P]>
      : GetScalarType<T[P], AggregateSupplier[P]>
  }




  export type SupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithAggregationInput | SupplierOrderByWithAggregationInput[]
    by: SupplierScalarFieldEnum[] | SupplierScalarFieldEnum
    having?: SupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCountAggregateInputType | true
    _min?: SupplierMinAggregateInputType
    _max?: SupplierMaxAggregateInputType
  }

  export type SupplierGroupByOutputType = {
    id: string
    name: string
    type: string
    companyName: string | null
    email: string
    address: string
    phone: string
    warehousesId: string
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: SupplierCountAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  type GetSupplierGroupByPayload<T extends SupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierGroupByOutputType[P]>
        }
      >
    >


  export type SupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | Supplier$WarehousesArgs<ExtArgs>
    purchase?: boolean | Supplier$purchaseArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | Supplier$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | Supplier$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    companyName?: boolean
    email?: boolean
    address?: boolean
    phone?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type SupplierOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "companyName" | "email" | "address" | "phone" | "warehousesId" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["supplier"]>
  export type SupplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | Supplier$WarehousesArgs<ExtArgs>
    purchase?: boolean | Supplier$purchaseArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SupplierIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | Supplier$WarehousesArgs<ExtArgs>
  }
  export type SupplierIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | Supplier$WarehousesArgs<ExtArgs>
  }

  export type $SupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supplier"
    objects: {
      Warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      purchase: Prisma.$PurchasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      companyName: string | null
      email: string
      address: string
      phone: string
      warehousesId: string
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["supplier"]>
    composites: {}
  }

  type SupplierGetPayload<S extends boolean | null | undefined | SupplierDefaultArgs> = $Result.GetResult<Prisma.$SupplierPayload, S>

  type SupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SupplierFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SupplierCountAggregateInputType | true
    }

  export interface SupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supplier'], meta: { name: 'Supplier' } }
    /**
     * Find zero or one Supplier that matches the filter.
     * @param {SupplierFindUniqueArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupplierFindUniqueArgs>(args: SelectSubset<T, SupplierFindUniqueArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Supplier that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SupplierFindUniqueOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupplierFindUniqueOrThrowArgs>(args: SelectSubset<T, SupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Supplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupplierFindFirstArgs>(args?: SelectSubset<T, SupplierFindFirstArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Supplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupplierFindFirstOrThrowArgs>(args?: SelectSubset<T, SupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.supplier.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.supplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierWithIdOnly = await prisma.supplier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupplierFindManyArgs>(args?: SelectSubset<T, SupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Supplier.
     * @param {SupplierCreateArgs} args - Arguments to create a Supplier.
     * @example
     * // Create one Supplier
     * const Supplier = await prisma.supplier.create({
     *   data: {
     *     // ... data to create a Supplier
     *   }
     * })
     * 
     */
    create<T extends SupplierCreateArgs>(args: SelectSubset<T, SupplierCreateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Suppliers.
     * @param {SupplierCreateManyArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupplierCreateManyArgs>(args?: SelectSubset<T, SupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Suppliers and returns the data saved in the database.
     * @param {SupplierCreateManyAndReturnArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Suppliers and only return the `id`
     * const supplierWithIdOnly = await prisma.supplier.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupplierCreateManyAndReturnArgs>(args?: SelectSubset<T, SupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Supplier.
     * @param {SupplierDeleteArgs} args - Arguments to delete one Supplier.
     * @example
     * // Delete one Supplier
     * const Supplier = await prisma.supplier.delete({
     *   where: {
     *     // ... filter to delete one Supplier
     *   }
     * })
     * 
     */
    delete<T extends SupplierDeleteArgs>(args: SelectSubset<T, SupplierDeleteArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Supplier.
     * @param {SupplierUpdateArgs} args - Arguments to update one Supplier.
     * @example
     * // Update one Supplier
     * const supplier = await prisma.supplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupplierUpdateArgs>(args: SelectSubset<T, SupplierUpdateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Suppliers.
     * @param {SupplierDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.supplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupplierDeleteManyArgs>(args?: SelectSubset<T, SupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupplierUpdateManyArgs>(args: SelectSubset<T, SupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers and returns the data updated in the database.
     * @param {SupplierUpdateManyAndReturnArgs} args - Arguments to update many Suppliers.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Suppliers and only return the `id`
     * const supplierWithIdOnly = await prisma.supplier.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SupplierUpdateManyAndReturnArgs>(args: SelectSubset<T, SupplierUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Supplier.
     * @param {SupplierUpsertArgs} args - Arguments to update or create a Supplier.
     * @example
     * // Update or create a Supplier
     * const supplier = await prisma.supplier.upsert({
     *   create: {
     *     // ... data to create a Supplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplier we want to update
     *   }
     * })
     */
    upsert<T extends SupplierUpsertArgs>(args: SelectSubset<T, SupplierUpsertArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.supplier.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends SupplierCountArgs>(
      args?: Subset<T, SupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierAggregateArgs>(args: Subset<T, SupplierAggregateArgs>): Prisma.PrismaPromise<GetSupplierAggregateType<T>>

    /**
     * Group by Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierGroupByArgs['orderBy'] }
        : { orderBy?: SupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supplier model
   */
  readonly fields: SupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Warehouses<T extends Supplier$WarehousesArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$WarehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    purchase<T extends Supplier$purchaseArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$purchaseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Supplier model
   */
  interface SupplierFieldRefs {
    readonly id: FieldRef<"Supplier", 'String'>
    readonly name: FieldRef<"Supplier", 'String'>
    readonly type: FieldRef<"Supplier", 'String'>
    readonly companyName: FieldRef<"Supplier", 'String'>
    readonly email: FieldRef<"Supplier", 'String'>
    readonly address: FieldRef<"Supplier", 'String'>
    readonly phone: FieldRef<"Supplier", 'String'>
    readonly warehousesId: FieldRef<"Supplier", 'String'>
    readonly createdAt: FieldRef<"Supplier", 'DateTime'>
    readonly updatedAt: FieldRef<"Supplier", 'DateTime'>
    readonly sync: FieldRef<"Supplier", 'Boolean'>
    readonly syncedAt: FieldRef<"Supplier", 'DateTime'>
    readonly isDeleted: FieldRef<"Supplier", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Supplier findUnique
   */
  export type SupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findUniqueOrThrow
   */
  export type SupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findFirst
   */
  export type SupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findFirstOrThrow
   */
  export type SupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findMany
   */
  export type SupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier create
   */
  export type SupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to create a Supplier.
     */
    data: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
  }

  /**
   * Supplier createMany
   */
  export type SupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
  }

  /**
   * Supplier createManyAndReturn
   */
  export type SupplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Supplier update
   */
  export type SupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to update a Supplier.
     */
    data: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
    /**
     * Choose, which Supplier to update.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier updateMany
   */
  export type SupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
    /**
     * Limit how many Suppliers to update.
     */
    limit?: number
  }

  /**
   * Supplier updateManyAndReturn
   */
  export type SupplierUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
    /**
     * Limit how many Suppliers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Supplier upsert
   */
  export type SupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The filter to search for the Supplier to update in case it exists.
     */
    where: SupplierWhereUniqueInput
    /**
     * In case the Supplier found by the `where` argument doesn't exist, create a new Supplier with this data.
     */
    create: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
    /**
     * In case the Supplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
  }

  /**
   * Supplier delete
   */
  export type SupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter which Supplier to delete.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier deleteMany
   */
  export type SupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to delete
     */
    where?: SupplierWhereInput
    /**
     * Limit how many Suppliers to delete.
     */
    limit?: number
  }

  /**
   * Supplier.Warehouses
   */
  export type Supplier$WarehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * Supplier.purchase
   */
  export type Supplier$purchaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Purchase
     */
    select?: PurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Purchase
     */
    omit?: PurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseInclude<ExtArgs> | null
    where?: PurchaseWhereInput
    orderBy?: PurchaseOrderByWithRelationInput | PurchaseOrderByWithRelationInput[]
    cursor?: PurchaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseScalarFieldEnum | PurchaseScalarFieldEnum[]
  }

  /**
   * Supplier without action
   */
  export type SupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Supplier
     */
    omit?: SupplierOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    wholeSalePrice: number | null
    retailPrice: number | null
    cost: number | null
    quantity: number | null
    taxRate: number | null
  }

  export type ProductSumAggregateOutputType = {
    wholeSalePrice: number | null
    retailPrice: number | null
    cost: number | null
    quantity: number | null
    taxRate: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    barcode: string | null
    wholeSalePrice: number | null
    retailPrice: number | null
    cost: number | null
    quantity: number | null
    taxRate: number | null
    unit: $Enums.unit | null
    description: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    barcode: string | null
    wholeSalePrice: number | null
    retailPrice: number | null
    cost: number | null
    quantity: number | null
    taxRate: number | null
    unit: $Enums.unit | null
    description: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    barcode: number
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: number
    description: number
    warehousesId: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    wholeSalePrice?: true
    retailPrice?: true
    cost?: true
    quantity?: true
    taxRate?: true
  }

  export type ProductSumAggregateInputType = {
    wholeSalePrice?: true
    retailPrice?: true
    cost?: true
    quantity?: true
    taxRate?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    barcode?: true
    wholeSalePrice?: true
    retailPrice?: true
    cost?: true
    quantity?: true
    taxRate?: true
    unit?: true
    description?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    barcode?: true
    wholeSalePrice?: true
    retailPrice?: true
    cost?: true
    quantity?: true
    taxRate?: true
    unit?: true
    description?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    barcode?: true
    wholeSalePrice?: true
    retailPrice?: true
    cost?: true
    quantity?: true
    taxRate?: true
    unit?: true
    description?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    warehousesId: string | null
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    barcode?: boolean
    wholeSalePrice?: boolean
    retailPrice?: boolean
    cost?: boolean
    quantity?: boolean
    taxRate?: boolean
    unit?: boolean
    description?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    warehouses?: boolean | Product$warehousesArgs<ExtArgs>
    SaleItem?: boolean | Product$SaleItemArgs<ExtArgs>
    purchaseItem?: boolean | Product$purchaseItemArgs<ExtArgs>
    quotationItem?: boolean | Product$quotationItemArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    barcode?: boolean
    wholeSalePrice?: boolean
    retailPrice?: boolean
    cost?: boolean
    quantity?: boolean
    taxRate?: boolean
    unit?: boolean
    description?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    warehouses?: boolean | Product$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    barcode?: boolean
    wholeSalePrice?: boolean
    retailPrice?: boolean
    cost?: boolean
    quantity?: boolean
    taxRate?: boolean
    unit?: boolean
    description?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    warehouses?: boolean | Product$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    barcode?: boolean
    wholeSalePrice?: boolean
    retailPrice?: boolean
    cost?: boolean
    quantity?: boolean
    taxRate?: boolean
    unit?: boolean
    description?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "barcode" | "wholeSalePrice" | "retailPrice" | "cost" | "quantity" | "taxRate" | "unit" | "description" | "warehousesId" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | Product$warehousesArgs<ExtArgs>
    SaleItem?: boolean | Product$SaleItemArgs<ExtArgs>
    purchaseItem?: boolean | Product$purchaseItemArgs<ExtArgs>
    quotationItem?: boolean | Product$quotationItemArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | Product$warehousesArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouses?: boolean | Product$warehousesArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      SaleItem: Prisma.$SaleItemPayload<ExtArgs>[]
      purchaseItem: Prisma.$PurchaseItemPayload<ExtArgs>[]
      quotationItem: Prisma.$QuotationItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      barcode: string
      wholeSalePrice: number
      retailPrice: number
      cost: number
      quantity: number
      taxRate: number
      unit: $Enums.unit
      description: string
      warehousesId: string | null
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    warehouses<T extends Product$warehousesArgs<ExtArgs> = {}>(args?: Subset<T, Product$warehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    SaleItem<T extends Product$SaleItemArgs<ExtArgs> = {}>(args?: Subset<T, Product$SaleItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    purchaseItem<T extends Product$purchaseItemArgs<ExtArgs> = {}>(args?: Subset<T, Product$purchaseItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quotationItem<T extends Product$quotationItemArgs<ExtArgs> = {}>(args?: Subset<T, Product$quotationItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly barcode: FieldRef<"Product", 'String'>
    readonly wholeSalePrice: FieldRef<"Product", 'Float'>
    readonly retailPrice: FieldRef<"Product", 'Float'>
    readonly cost: FieldRef<"Product", 'Float'>
    readonly quantity: FieldRef<"Product", 'Int'>
    readonly taxRate: FieldRef<"Product", 'Int'>
    readonly unit: FieldRef<"Product", 'unit'>
    readonly description: FieldRef<"Product", 'String'>
    readonly warehousesId: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly sync: FieldRef<"Product", 'Boolean'>
    readonly syncedAt: FieldRef<"Product", 'DateTime'>
    readonly isDeleted: FieldRef<"Product", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.warehouses
   */
  export type Product$warehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * Product.SaleItem
   */
  export type Product$SaleItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleItem
     */
    select?: SaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SaleItem
     */
    omit?: SaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleItemInclude<ExtArgs> | null
    where?: SaleItemWhereInput
    orderBy?: SaleItemOrderByWithRelationInput | SaleItemOrderByWithRelationInput[]
    cursor?: SaleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleItemScalarFieldEnum | SaleItemScalarFieldEnum[]
  }

  /**
   * Product.purchaseItem
   */
  export type Product$purchaseItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItem
     */
    select?: PurchaseItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PurchaseItem
     */
    omit?: PurchaseItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseItemInclude<ExtArgs> | null
    where?: PurchaseItemWhereInput
    orderBy?: PurchaseItemOrderByWithRelationInput | PurchaseItemOrderByWithRelationInput[]
    cursor?: PurchaseItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseItemScalarFieldEnum | PurchaseItemScalarFieldEnum[]
  }

  /**
   * Product.quotationItem
   */
  export type Product$quotationItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    where?: QuotationItemWhereInput
    orderBy?: QuotationItemOrderByWithRelationInput | QuotationItemOrderByWithRelationInput[]
    cursor?: QuotationItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationItemScalarFieldEnum | QuotationItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model PaymentMethod
   */

  export type AggregatePaymentMethod = {
    _count: PaymentMethodCountAggregateOutputType | null
    _avg: PaymentMethodAvgAggregateOutputType | null
    _sum: PaymentMethodSumAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  export type PaymentMethodAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMethodSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMethodMinAggregateOutputType = {
    id: string | null
    method: string | null
    amount: number | null
    warehousesId: string | null
    saleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type PaymentMethodMaxAggregateOutputType = {
    id: string | null
    method: string | null
    amount: number | null
    warehousesId: string | null
    saleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type PaymentMethodCountAggregateOutputType = {
    id: number
    method: number
    amount: number
    warehousesId: number
    saleId: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type PaymentMethodAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentMethodSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMethodMinAggregateInputType = {
    id?: true
    method?: true
    amount?: true
    warehousesId?: true
    saleId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type PaymentMethodMaxAggregateInputType = {
    id?: true
    method?: true
    amount?: true
    warehousesId?: true
    saleId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type PaymentMethodCountAggregateInputType = {
    id?: true
    method?: true
    amount?: true
    warehousesId?: true
    saleId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type PaymentMethodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethod to aggregate.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentMethods
    **/
    _count?: true | PaymentMethodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentMethodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentMethodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMethodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type GetPaymentMethodAggregateType<T extends PaymentMethodAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentMethod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentMethod[P]>
      : GetScalarType<T[P], AggregatePaymentMethod[P]>
  }




  export type PaymentMethodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMethodWhereInput
    orderBy?: PaymentMethodOrderByWithAggregationInput | PaymentMethodOrderByWithAggregationInput[]
    by: PaymentMethodScalarFieldEnum[] | PaymentMethodScalarFieldEnum
    having?: PaymentMethodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentMethodCountAggregateInputType | true
    _avg?: PaymentMethodAvgAggregateInputType
    _sum?: PaymentMethodSumAggregateInputType
    _min?: PaymentMethodMinAggregateInputType
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type PaymentMethodGroupByOutputType = {
    id: string
    method: string
    amount: number
    warehousesId: string | null
    saleId: string | null
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: PaymentMethodCountAggregateOutputType | null
    _avg: PaymentMethodAvgAggregateOutputType | null
    _sum: PaymentMethodSumAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  type GetPaymentMethodGroupByPayload<T extends PaymentMethodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentMethodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentMethodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
        }
      >
    >


  export type PaymentMethodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    amount?: boolean
    warehousesId?: boolean
    saleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | PaymentMethod$WarehousesArgs<ExtArgs>
    Sale?: boolean | PaymentMethod$SaleArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMethod"]>

  export type PaymentMethodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    amount?: boolean
    warehousesId?: boolean
    saleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | PaymentMethod$WarehousesArgs<ExtArgs>
    Sale?: boolean | PaymentMethod$SaleArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMethod"]>

  export type PaymentMethodSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    method?: boolean
    amount?: boolean
    warehousesId?: boolean
    saleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | PaymentMethod$WarehousesArgs<ExtArgs>
    Sale?: boolean | PaymentMethod$SaleArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMethod"]>

  export type PaymentMethodSelectScalar = {
    id?: boolean
    method?: boolean
    amount?: boolean
    warehousesId?: boolean
    saleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type PaymentMethodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "method" | "amount" | "warehousesId" | "saleId" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["paymentMethod"]>
  export type PaymentMethodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | PaymentMethod$WarehousesArgs<ExtArgs>
    Sale?: boolean | PaymentMethod$SaleArgs<ExtArgs>
  }
  export type PaymentMethodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | PaymentMethod$WarehousesArgs<ExtArgs>
    Sale?: boolean | PaymentMethod$SaleArgs<ExtArgs>
  }
  export type PaymentMethodIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | PaymentMethod$WarehousesArgs<ExtArgs>
    Sale?: boolean | PaymentMethod$SaleArgs<ExtArgs>
  }

  export type $PaymentMethodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentMethod"
    objects: {
      Warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
      Sale: Prisma.$SalePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      method: string
      amount: number
      warehousesId: string | null
      saleId: string | null
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["paymentMethod"]>
    composites: {}
  }

  type PaymentMethodGetPayload<S extends boolean | null | undefined | PaymentMethodDefaultArgs> = $Result.GetResult<Prisma.$PaymentMethodPayload, S>

  type PaymentMethodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentMethodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentMethodCountAggregateInputType | true
    }

  export interface PaymentMethodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMethod'], meta: { name: 'PaymentMethod' } }
    /**
     * Find zero or one PaymentMethod that matches the filter.
     * @param {PaymentMethodFindUniqueArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentMethodFindUniqueArgs>(args: SelectSubset<T, PaymentMethodFindUniqueArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentMethod that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentMethodFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentMethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentMethod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentMethodFindFirstArgs>(args?: SelectSubset<T, PaymentMethodFindFirstArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentMethod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentMethodFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentMethodFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentMethods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany()
     * 
     * // Get first 10 PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentMethodWithIdOnly = await prisma.paymentMethod.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentMethodFindManyArgs>(args?: SelectSubset<T, PaymentMethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentMethod.
     * @param {PaymentMethodCreateArgs} args - Arguments to create a PaymentMethod.
     * @example
     * // Create one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.create({
     *   data: {
     *     // ... data to create a PaymentMethod
     *   }
     * })
     * 
     */
    create<T extends PaymentMethodCreateArgs>(args: SelectSubset<T, PaymentMethodCreateArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentMethods.
     * @param {PaymentMethodCreateManyArgs} args - Arguments to create many PaymentMethods.
     * @example
     * // Create many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentMethodCreateManyArgs>(args?: SelectSubset<T, PaymentMethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentMethods and returns the data saved in the database.
     * @param {PaymentMethodCreateManyAndReturnArgs} args - Arguments to create many PaymentMethods.
     * @example
     * // Create many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentMethods and only return the `id`
     * const paymentMethodWithIdOnly = await prisma.paymentMethod.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentMethodCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentMethodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PaymentMethod.
     * @param {PaymentMethodDeleteArgs} args - Arguments to delete one PaymentMethod.
     * @example
     * // Delete one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.delete({
     *   where: {
     *     // ... filter to delete one PaymentMethod
     *   }
     * })
     * 
     */
    delete<T extends PaymentMethodDeleteArgs>(args: SelectSubset<T, PaymentMethodDeleteArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentMethod.
     * @param {PaymentMethodUpdateArgs} args - Arguments to update one PaymentMethod.
     * @example
     * // Update one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentMethodUpdateArgs>(args: SelectSubset<T, PaymentMethodUpdateArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentMethods.
     * @param {PaymentMethodDeleteManyArgs} args - Arguments to filter PaymentMethods to delete.
     * @example
     * // Delete a few PaymentMethods
     * const { count } = await prisma.paymentMethod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentMethodDeleteManyArgs>(args?: SelectSubset<T, PaymentMethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentMethodUpdateManyArgs>(args: SelectSubset<T, PaymentMethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentMethods and returns the data updated in the database.
     * @param {PaymentMethodUpdateManyAndReturnArgs} args - Arguments to update many PaymentMethods.
     * @example
     * // Update many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentMethods and only return the `id`
     * const paymentMethodWithIdOnly = await prisma.paymentMethod.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentMethodUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentMethodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PaymentMethod.
     * @param {PaymentMethodUpsertArgs} args - Arguments to update or create a PaymentMethod.
     * @example
     * // Update or create a PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.upsert({
     *   create: {
     *     // ... data to create a PaymentMethod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentMethod we want to update
     *   }
     * })
     */
    upsert<T extends PaymentMethodUpsertArgs>(args: SelectSubset<T, PaymentMethodUpsertArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodCountArgs} args - Arguments to filter PaymentMethods to count.
     * @example
     * // Count the number of PaymentMethods
     * const count = await prisma.paymentMethod.count({
     *   where: {
     *     // ... the filter for the PaymentMethods we want to count
     *   }
     * })
    **/
    count<T extends PaymentMethodCountArgs>(
      args?: Subset<T, PaymentMethodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentMethodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentMethodAggregateArgs>(args: Subset<T, PaymentMethodAggregateArgs>): Prisma.PrismaPromise<GetPaymentMethodAggregateType<T>>

    /**
     * Group by PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentMethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentMethodGroupByArgs['orderBy'] }
        : { orderBy?: PaymentMethodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentMethod model
   */
  readonly fields: PaymentMethodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentMethod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentMethodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Warehouses<T extends PaymentMethod$WarehousesArgs<ExtArgs> = {}>(args?: Subset<T, PaymentMethod$WarehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Sale<T extends PaymentMethod$SaleArgs<ExtArgs> = {}>(args?: Subset<T, PaymentMethod$SaleArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentMethod model
   */
  interface PaymentMethodFieldRefs {
    readonly id: FieldRef<"PaymentMethod", 'String'>
    readonly method: FieldRef<"PaymentMethod", 'String'>
    readonly amount: FieldRef<"PaymentMethod", 'Int'>
    readonly warehousesId: FieldRef<"PaymentMethod", 'String'>
    readonly saleId: FieldRef<"PaymentMethod", 'String'>
    readonly createdAt: FieldRef<"PaymentMethod", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentMethod", 'DateTime'>
    readonly sync: FieldRef<"PaymentMethod", 'Boolean'>
    readonly syncedAt: FieldRef<"PaymentMethod", 'DateTime'>
    readonly isDeleted: FieldRef<"PaymentMethod", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PaymentMethod findUnique
   */
  export type PaymentMethodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findUniqueOrThrow
   */
  export type PaymentMethodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findFirst
   */
  export type PaymentMethodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findFirstOrThrow
   */
  export type PaymentMethodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findMany
   */
  export type PaymentMethodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethods to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod create
   */
  export type PaymentMethodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentMethod.
     */
    data: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
  }

  /**
   * PaymentMethod createMany
   */
  export type PaymentMethodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentMethods.
     */
    data: PaymentMethodCreateManyInput | PaymentMethodCreateManyInput[]
  }

  /**
   * PaymentMethod createManyAndReturn
   */
  export type PaymentMethodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentMethods.
     */
    data: PaymentMethodCreateManyInput | PaymentMethodCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentMethod update
   */
  export type PaymentMethodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentMethod.
     */
    data: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
    /**
     * Choose, which PaymentMethod to update.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod updateMany
   */
  export type PaymentMethodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentMethods.
     */
    data: XOR<PaymentMethodUpdateManyMutationInput, PaymentMethodUncheckedUpdateManyInput>
    /**
     * Filter which PaymentMethods to update
     */
    where?: PaymentMethodWhereInput
    /**
     * Limit how many PaymentMethods to update.
     */
    limit?: number
  }

  /**
   * PaymentMethod updateManyAndReturn
   */
  export type PaymentMethodUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * The data used to update PaymentMethods.
     */
    data: XOR<PaymentMethodUpdateManyMutationInput, PaymentMethodUncheckedUpdateManyInput>
    /**
     * Filter which PaymentMethods to update
     */
    where?: PaymentMethodWhereInput
    /**
     * Limit how many PaymentMethods to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentMethod upsert
   */
  export type PaymentMethodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentMethod to update in case it exists.
     */
    where: PaymentMethodWhereUniqueInput
    /**
     * In case the PaymentMethod found by the `where` argument doesn't exist, create a new PaymentMethod with this data.
     */
    create: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
    /**
     * In case the PaymentMethod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
  }

  /**
   * PaymentMethod delete
   */
  export type PaymentMethodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter which PaymentMethod to delete.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod deleteMany
   */
  export type PaymentMethodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethods to delete
     */
    where?: PaymentMethodWhereInput
    /**
     * Limit how many PaymentMethods to delete.
     */
    limit?: number
  }

  /**
   * PaymentMethod.Warehouses
   */
  export type PaymentMethod$WarehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * PaymentMethod.Sale
   */
  export type PaymentMethod$SaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
  }

  /**
   * PaymentMethod without action
   */
  export type PaymentMethodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
  }


  /**
   * Model ReceiptSettings
   */

  export type AggregateReceiptSettings = {
    _count: ReceiptSettingsCountAggregateOutputType | null
    _avg: ReceiptSettingsAvgAggregateOutputType | null
    _sum: ReceiptSettingsSumAggregateOutputType | null
    _min: ReceiptSettingsMinAggregateOutputType | null
    _max: ReceiptSettingsMaxAggregateOutputType | null
  }

  export type ReceiptSettingsAvgAggregateOutputType = {
    printCopyCount: number | null
  }

  export type ReceiptSettingsSumAggregateOutputType = {
    printCopyCount: number | null
  }

  export type ReceiptSettingsMinAggregateOutputType = {
    id: string | null
    companyName: string | null
    businessName: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    phone: string | null
    email: string | null
    website: string | null
    receiptTitle: string | null
    headerMessage: string | null
    footerMessage: string | null
    showLogo: boolean | null
    logoUrl: string | null
    showQrCode: boolean | null
    qrCodeContent: string | null
    customQrContent: string | null
    showCustomerInfo: boolean | null
    showCashierInfo: boolean | null
    showItemCodes: boolean | null
    showItemDescriptions: boolean | null
    showTaxBreakdown: boolean | null
    showPaymentMethods: boolean | null
    showBalance: boolean | null
    showTimestamp: boolean | null
    use24HourFormat: boolean | null
    showItemNumbers: boolean | null
    showRunningTotal: boolean | null
    paperSize: string | null
    fontSize: string | null
    printDensity: string | null
    lineSpacing: string | null
    primaryColor: string | null
    accentColor: string | null
    fontFamily: string | null
    printCopyCount: number | null
    autoPrint: boolean | null
    language: string | null
    currency: string | null
    currencySymbol: string | null
    currencyPosition: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type ReceiptSettingsMaxAggregateOutputType = {
    id: string | null
    companyName: string | null
    businessName: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    phone: string | null
    email: string | null
    website: string | null
    receiptTitle: string | null
    headerMessage: string | null
    footerMessage: string | null
    showLogo: boolean | null
    logoUrl: string | null
    showQrCode: boolean | null
    qrCodeContent: string | null
    customQrContent: string | null
    showCustomerInfo: boolean | null
    showCashierInfo: boolean | null
    showItemCodes: boolean | null
    showItemDescriptions: boolean | null
    showTaxBreakdown: boolean | null
    showPaymentMethods: boolean | null
    showBalance: boolean | null
    showTimestamp: boolean | null
    use24HourFormat: boolean | null
    showItemNumbers: boolean | null
    showRunningTotal: boolean | null
    paperSize: string | null
    fontSize: string | null
    printDensity: string | null
    lineSpacing: string | null
    primaryColor: string | null
    accentColor: string | null
    fontFamily: string | null
    printCopyCount: number | null
    autoPrint: boolean | null
    language: string | null
    currency: string | null
    currencySymbol: string | null
    currencyPosition: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type ReceiptSettingsCountAggregateOutputType = {
    id: number
    companyName: number
    businessName: number
    address: number
    city: number
    state: number
    country: number
    phone: number
    email: number
    website: number
    receiptTitle: number
    headerMessage: number
    footerMessage: number
    showLogo: number
    logoUrl: number
    showQrCode: number
    qrCodeContent: number
    customQrContent: number
    showCustomerInfo: number
    showCashierInfo: number
    showItemCodes: number
    showItemDescriptions: number
    showTaxBreakdown: number
    showPaymentMethods: number
    showBalance: number
    showTimestamp: number
    use24HourFormat: number
    showItemNumbers: number
    showRunningTotal: number
    paperSize: number
    fontSize: number
    printDensity: number
    lineSpacing: number
    primaryColor: number
    accentColor: number
    fontFamily: number
    printCopyCount: number
    autoPrint: number
    language: number
    currency: number
    currencySymbol: number
    currencyPosition: number
    warehousesId: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type ReceiptSettingsAvgAggregateInputType = {
    printCopyCount?: true
  }

  export type ReceiptSettingsSumAggregateInputType = {
    printCopyCount?: true
  }

  export type ReceiptSettingsMinAggregateInputType = {
    id?: true
    companyName?: true
    businessName?: true
    address?: true
    city?: true
    state?: true
    country?: true
    phone?: true
    email?: true
    website?: true
    receiptTitle?: true
    headerMessage?: true
    footerMessage?: true
    showLogo?: true
    logoUrl?: true
    showQrCode?: true
    qrCodeContent?: true
    customQrContent?: true
    showCustomerInfo?: true
    showCashierInfo?: true
    showItemCodes?: true
    showItemDescriptions?: true
    showTaxBreakdown?: true
    showPaymentMethods?: true
    showBalance?: true
    showTimestamp?: true
    use24HourFormat?: true
    showItemNumbers?: true
    showRunningTotal?: true
    paperSize?: true
    fontSize?: true
    printDensity?: true
    lineSpacing?: true
    primaryColor?: true
    accentColor?: true
    fontFamily?: true
    printCopyCount?: true
    autoPrint?: true
    language?: true
    currency?: true
    currencySymbol?: true
    currencyPosition?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type ReceiptSettingsMaxAggregateInputType = {
    id?: true
    companyName?: true
    businessName?: true
    address?: true
    city?: true
    state?: true
    country?: true
    phone?: true
    email?: true
    website?: true
    receiptTitle?: true
    headerMessage?: true
    footerMessage?: true
    showLogo?: true
    logoUrl?: true
    showQrCode?: true
    qrCodeContent?: true
    customQrContent?: true
    showCustomerInfo?: true
    showCashierInfo?: true
    showItemCodes?: true
    showItemDescriptions?: true
    showTaxBreakdown?: true
    showPaymentMethods?: true
    showBalance?: true
    showTimestamp?: true
    use24HourFormat?: true
    showItemNumbers?: true
    showRunningTotal?: true
    paperSize?: true
    fontSize?: true
    printDensity?: true
    lineSpacing?: true
    primaryColor?: true
    accentColor?: true
    fontFamily?: true
    printCopyCount?: true
    autoPrint?: true
    language?: true
    currency?: true
    currencySymbol?: true
    currencyPosition?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type ReceiptSettingsCountAggregateInputType = {
    id?: true
    companyName?: true
    businessName?: true
    address?: true
    city?: true
    state?: true
    country?: true
    phone?: true
    email?: true
    website?: true
    receiptTitle?: true
    headerMessage?: true
    footerMessage?: true
    showLogo?: true
    logoUrl?: true
    showQrCode?: true
    qrCodeContent?: true
    customQrContent?: true
    showCustomerInfo?: true
    showCashierInfo?: true
    showItemCodes?: true
    showItemDescriptions?: true
    showTaxBreakdown?: true
    showPaymentMethods?: true
    showBalance?: true
    showTimestamp?: true
    use24HourFormat?: true
    showItemNumbers?: true
    showRunningTotal?: true
    paperSize?: true
    fontSize?: true
    printDensity?: true
    lineSpacing?: true
    primaryColor?: true
    accentColor?: true
    fontFamily?: true
    printCopyCount?: true
    autoPrint?: true
    language?: true
    currency?: true
    currencySymbol?: true
    currencyPosition?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type ReceiptSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptSettings to aggregate.
     */
    where?: ReceiptSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptSettings to fetch.
     */
    orderBy?: ReceiptSettingsOrderByWithRelationInput | ReceiptSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceiptSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReceiptSettings
    **/
    _count?: true | ReceiptSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceiptSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceiptSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceiptSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceiptSettingsMaxAggregateInputType
  }

  export type GetReceiptSettingsAggregateType<T extends ReceiptSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateReceiptSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceiptSettings[P]>
      : GetScalarType<T[P], AggregateReceiptSettings[P]>
  }




  export type ReceiptSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceiptSettingsWhereInput
    orderBy?: ReceiptSettingsOrderByWithAggregationInput | ReceiptSettingsOrderByWithAggregationInput[]
    by: ReceiptSettingsScalarFieldEnum[] | ReceiptSettingsScalarFieldEnum
    having?: ReceiptSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceiptSettingsCountAggregateInputType | true
    _avg?: ReceiptSettingsAvgAggregateInputType
    _sum?: ReceiptSettingsSumAggregateInputType
    _min?: ReceiptSettingsMinAggregateInputType
    _max?: ReceiptSettingsMaxAggregateInputType
  }

  export type ReceiptSettingsGroupByOutputType = {
    id: string
    companyName: string
    businessName: string
    address: string
    city: string
    state: string
    country: string
    phone: string
    email: string
    website: string
    receiptTitle: string | null
    headerMessage: string | null
    footerMessage: string | null
    showLogo: boolean | null
    logoUrl: string | null
    showQrCode: boolean | null
    qrCodeContent: string | null
    customQrContent: string | null
    showCustomerInfo: boolean | null
    showCashierInfo: boolean | null
    showItemCodes: boolean | null
    showItemDescriptions: boolean | null
    showTaxBreakdown: boolean | null
    showPaymentMethods: boolean | null
    showBalance: boolean | null
    showTimestamp: boolean | null
    use24HourFormat: boolean | null
    showItemNumbers: boolean | null
    showRunningTotal: boolean | null
    paperSize: string | null
    fontSize: string | null
    printDensity: string | null
    lineSpacing: string | null
    primaryColor: string | null
    accentColor: string | null
    fontFamily: string | null
    printCopyCount: number | null
    autoPrint: boolean | null
    language: string | null
    currency: string | null
    currencySymbol: string | null
    currencyPosition: string | null
    warehousesId: string
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: ReceiptSettingsCountAggregateOutputType | null
    _avg: ReceiptSettingsAvgAggregateOutputType | null
    _sum: ReceiptSettingsSumAggregateOutputType | null
    _min: ReceiptSettingsMinAggregateOutputType | null
    _max: ReceiptSettingsMaxAggregateOutputType | null
  }

  type GetReceiptSettingsGroupByPayload<T extends ReceiptSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceiptSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceiptSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceiptSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], ReceiptSettingsGroupByOutputType[P]>
        }
      >
    >


  export type ReceiptSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    businessName?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    receiptTitle?: boolean
    headerMessage?: boolean
    footerMessage?: boolean
    showLogo?: boolean
    logoUrl?: boolean
    showQrCode?: boolean
    qrCodeContent?: boolean
    customQrContent?: boolean
    showCustomerInfo?: boolean
    showCashierInfo?: boolean
    showItemCodes?: boolean
    showItemDescriptions?: boolean
    showTaxBreakdown?: boolean
    showPaymentMethods?: boolean
    showBalance?: boolean
    showTimestamp?: boolean
    use24HourFormat?: boolean
    showItemNumbers?: boolean
    showRunningTotal?: boolean
    paperSize?: boolean
    fontSize?: boolean
    printDensity?: boolean
    lineSpacing?: boolean
    primaryColor?: boolean
    accentColor?: boolean
    fontFamily?: boolean
    printCopyCount?: boolean
    autoPrint?: boolean
    language?: boolean
    currency?: boolean
    currencySymbol?: boolean
    currencyPosition?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | ReceiptSettings$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["receiptSettings"]>

  export type ReceiptSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    businessName?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    receiptTitle?: boolean
    headerMessage?: boolean
    footerMessage?: boolean
    showLogo?: boolean
    logoUrl?: boolean
    showQrCode?: boolean
    qrCodeContent?: boolean
    customQrContent?: boolean
    showCustomerInfo?: boolean
    showCashierInfo?: boolean
    showItemCodes?: boolean
    showItemDescriptions?: boolean
    showTaxBreakdown?: boolean
    showPaymentMethods?: boolean
    showBalance?: boolean
    showTimestamp?: boolean
    use24HourFormat?: boolean
    showItemNumbers?: boolean
    showRunningTotal?: boolean
    paperSize?: boolean
    fontSize?: boolean
    printDensity?: boolean
    lineSpacing?: boolean
    primaryColor?: boolean
    accentColor?: boolean
    fontFamily?: boolean
    printCopyCount?: boolean
    autoPrint?: boolean
    language?: boolean
    currency?: boolean
    currencySymbol?: boolean
    currencyPosition?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | ReceiptSettings$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["receiptSettings"]>

  export type ReceiptSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    businessName?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    receiptTitle?: boolean
    headerMessage?: boolean
    footerMessage?: boolean
    showLogo?: boolean
    logoUrl?: boolean
    showQrCode?: boolean
    qrCodeContent?: boolean
    customQrContent?: boolean
    showCustomerInfo?: boolean
    showCashierInfo?: boolean
    showItemCodes?: boolean
    showItemDescriptions?: boolean
    showTaxBreakdown?: boolean
    showPaymentMethods?: boolean
    showBalance?: boolean
    showTimestamp?: boolean
    use24HourFormat?: boolean
    showItemNumbers?: boolean
    showRunningTotal?: boolean
    paperSize?: boolean
    fontSize?: boolean
    printDensity?: boolean
    lineSpacing?: boolean
    primaryColor?: boolean
    accentColor?: boolean
    fontFamily?: boolean
    printCopyCount?: boolean
    autoPrint?: boolean
    language?: boolean
    currency?: boolean
    currencySymbol?: boolean
    currencyPosition?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    Warehouses?: boolean | ReceiptSettings$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["receiptSettings"]>

  export type ReceiptSettingsSelectScalar = {
    id?: boolean
    companyName?: boolean
    businessName?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    receiptTitle?: boolean
    headerMessage?: boolean
    footerMessage?: boolean
    showLogo?: boolean
    logoUrl?: boolean
    showQrCode?: boolean
    qrCodeContent?: boolean
    customQrContent?: boolean
    showCustomerInfo?: boolean
    showCashierInfo?: boolean
    showItemCodes?: boolean
    showItemDescriptions?: boolean
    showTaxBreakdown?: boolean
    showPaymentMethods?: boolean
    showBalance?: boolean
    showTimestamp?: boolean
    use24HourFormat?: boolean
    showItemNumbers?: boolean
    showRunningTotal?: boolean
    paperSize?: boolean
    fontSize?: boolean
    printDensity?: boolean
    lineSpacing?: boolean
    primaryColor?: boolean
    accentColor?: boolean
    fontFamily?: boolean
    printCopyCount?: boolean
    autoPrint?: boolean
    language?: boolean
    currency?: boolean
    currencySymbol?: boolean
    currencyPosition?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type ReceiptSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyName" | "businessName" | "address" | "city" | "state" | "country" | "phone" | "email" | "website" | "receiptTitle" | "headerMessage" | "footerMessage" | "showLogo" | "logoUrl" | "showQrCode" | "qrCodeContent" | "customQrContent" | "showCustomerInfo" | "showCashierInfo" | "showItemCodes" | "showItemDescriptions" | "showTaxBreakdown" | "showPaymentMethods" | "showBalance" | "showTimestamp" | "use24HourFormat" | "showItemNumbers" | "showRunningTotal" | "paperSize" | "fontSize" | "printDensity" | "lineSpacing" | "primaryColor" | "accentColor" | "fontFamily" | "printCopyCount" | "autoPrint" | "language" | "currency" | "currencySymbol" | "currencyPosition" | "warehousesId" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["receiptSettings"]>
  export type ReceiptSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | ReceiptSettings$WarehousesArgs<ExtArgs>
  }
  export type ReceiptSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | ReceiptSettings$WarehousesArgs<ExtArgs>
  }
  export type ReceiptSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Warehouses?: boolean | ReceiptSettings$WarehousesArgs<ExtArgs>
  }

  export type $ReceiptSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReceiptSettings"
    objects: {
      Warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyName: string
      businessName: string
      address: string
      city: string
      state: string
      country: string
      phone: string
      email: string
      website: string
      receiptTitle: string | null
      headerMessage: string | null
      footerMessage: string | null
      showLogo: boolean | null
      logoUrl: string | null
      showQrCode: boolean | null
      qrCodeContent: string | null
      customQrContent: string | null
      showCustomerInfo: boolean | null
      showCashierInfo: boolean | null
      showItemCodes: boolean | null
      showItemDescriptions: boolean | null
      showTaxBreakdown: boolean | null
      showPaymentMethods: boolean | null
      showBalance: boolean | null
      showTimestamp: boolean | null
      use24HourFormat: boolean | null
      showItemNumbers: boolean | null
      showRunningTotal: boolean | null
      paperSize: string | null
      fontSize: string | null
      printDensity: string | null
      lineSpacing: string | null
      primaryColor: string | null
      accentColor: string | null
      fontFamily: string | null
      printCopyCount: number | null
      autoPrint: boolean | null
      language: string | null
      currency: string | null
      currencySymbol: string | null
      currencyPosition: string | null
      warehousesId: string
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["receiptSettings"]>
    composites: {}
  }

  type ReceiptSettingsGetPayload<S extends boolean | null | undefined | ReceiptSettingsDefaultArgs> = $Result.GetResult<Prisma.$ReceiptSettingsPayload, S>

  type ReceiptSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReceiptSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReceiptSettingsCountAggregateInputType | true
    }

  export interface ReceiptSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReceiptSettings'], meta: { name: 'ReceiptSettings' } }
    /**
     * Find zero or one ReceiptSettings that matches the filter.
     * @param {ReceiptSettingsFindUniqueArgs} args - Arguments to find a ReceiptSettings
     * @example
     * // Get one ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceiptSettingsFindUniqueArgs>(args: SelectSubset<T, ReceiptSettingsFindUniqueArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReceiptSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReceiptSettingsFindUniqueOrThrowArgs} args - Arguments to find a ReceiptSettings
     * @example
     * // Get one ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceiptSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceiptSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptSettingsFindFirstArgs} args - Arguments to find a ReceiptSettings
     * @example
     * // Get one ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceiptSettingsFindFirstArgs>(args?: SelectSubset<T, ReceiptSettingsFindFirstArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReceiptSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptSettingsFindFirstOrThrowArgs} args - Arguments to find a ReceiptSettings
     * @example
     * // Get one ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceiptSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceiptSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReceiptSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.findMany()
     * 
     * // Get first 10 ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receiptSettingsWithIdOnly = await prisma.receiptSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceiptSettingsFindManyArgs>(args?: SelectSubset<T, ReceiptSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReceiptSettings.
     * @param {ReceiptSettingsCreateArgs} args - Arguments to create a ReceiptSettings.
     * @example
     * // Create one ReceiptSettings
     * const ReceiptSettings = await prisma.receiptSettings.create({
     *   data: {
     *     // ... data to create a ReceiptSettings
     *   }
     * })
     * 
     */
    create<T extends ReceiptSettingsCreateArgs>(args: SelectSubset<T, ReceiptSettingsCreateArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReceiptSettings.
     * @param {ReceiptSettingsCreateManyArgs} args - Arguments to create many ReceiptSettings.
     * @example
     * // Create many ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceiptSettingsCreateManyArgs>(args?: SelectSubset<T, ReceiptSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReceiptSettings and returns the data saved in the database.
     * @param {ReceiptSettingsCreateManyAndReturnArgs} args - Arguments to create many ReceiptSettings.
     * @example
     * // Create many ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReceiptSettings and only return the `id`
     * const receiptSettingsWithIdOnly = await prisma.receiptSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceiptSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceiptSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReceiptSettings.
     * @param {ReceiptSettingsDeleteArgs} args - Arguments to delete one ReceiptSettings.
     * @example
     * // Delete one ReceiptSettings
     * const ReceiptSettings = await prisma.receiptSettings.delete({
     *   where: {
     *     // ... filter to delete one ReceiptSettings
     *   }
     * })
     * 
     */
    delete<T extends ReceiptSettingsDeleteArgs>(args: SelectSubset<T, ReceiptSettingsDeleteArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReceiptSettings.
     * @param {ReceiptSettingsUpdateArgs} args - Arguments to update one ReceiptSettings.
     * @example
     * // Update one ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceiptSettingsUpdateArgs>(args: SelectSubset<T, ReceiptSettingsUpdateArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReceiptSettings.
     * @param {ReceiptSettingsDeleteManyArgs} args - Arguments to filter ReceiptSettings to delete.
     * @example
     * // Delete a few ReceiptSettings
     * const { count } = await prisma.receiptSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceiptSettingsDeleteManyArgs>(args?: SelectSubset<T, ReceiptSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceiptSettingsUpdateManyArgs>(args: SelectSubset<T, ReceiptSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReceiptSettings and returns the data updated in the database.
     * @param {ReceiptSettingsUpdateManyAndReturnArgs} args - Arguments to update many ReceiptSettings.
     * @example
     * // Update many ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReceiptSettings and only return the `id`
     * const receiptSettingsWithIdOnly = await prisma.receiptSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReceiptSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, ReceiptSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReceiptSettings.
     * @param {ReceiptSettingsUpsertArgs} args - Arguments to update or create a ReceiptSettings.
     * @example
     * // Update or create a ReceiptSettings
     * const receiptSettings = await prisma.receiptSettings.upsert({
     *   create: {
     *     // ... data to create a ReceiptSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReceiptSettings we want to update
     *   }
     * })
     */
    upsert<T extends ReceiptSettingsUpsertArgs>(args: SelectSubset<T, ReceiptSettingsUpsertArgs<ExtArgs>>): Prisma__ReceiptSettingsClient<$Result.GetResult<Prisma.$ReceiptSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReceiptSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptSettingsCountArgs} args - Arguments to filter ReceiptSettings to count.
     * @example
     * // Count the number of ReceiptSettings
     * const count = await prisma.receiptSettings.count({
     *   where: {
     *     // ... the filter for the ReceiptSettings we want to count
     *   }
     * })
    **/
    count<T extends ReceiptSettingsCountArgs>(
      args?: Subset<T, ReceiptSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceiptSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReceiptSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceiptSettingsAggregateArgs>(args: Subset<T, ReceiptSettingsAggregateArgs>): Prisma.PrismaPromise<GetReceiptSettingsAggregateType<T>>

    /**
     * Group by ReceiptSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceiptSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceiptSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceiptSettingsGroupByArgs['orderBy'] }
        : { orderBy?: ReceiptSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceiptSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceiptSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReceiptSettings model
   */
  readonly fields: ReceiptSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReceiptSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceiptSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Warehouses<T extends ReceiptSettings$WarehousesArgs<ExtArgs> = {}>(args?: Subset<T, ReceiptSettings$WarehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReceiptSettings model
   */
  interface ReceiptSettingsFieldRefs {
    readonly id: FieldRef<"ReceiptSettings", 'String'>
    readonly companyName: FieldRef<"ReceiptSettings", 'String'>
    readonly businessName: FieldRef<"ReceiptSettings", 'String'>
    readonly address: FieldRef<"ReceiptSettings", 'String'>
    readonly city: FieldRef<"ReceiptSettings", 'String'>
    readonly state: FieldRef<"ReceiptSettings", 'String'>
    readonly country: FieldRef<"ReceiptSettings", 'String'>
    readonly phone: FieldRef<"ReceiptSettings", 'String'>
    readonly email: FieldRef<"ReceiptSettings", 'String'>
    readonly website: FieldRef<"ReceiptSettings", 'String'>
    readonly receiptTitle: FieldRef<"ReceiptSettings", 'String'>
    readonly headerMessage: FieldRef<"ReceiptSettings", 'String'>
    readonly footerMessage: FieldRef<"ReceiptSettings", 'String'>
    readonly showLogo: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly logoUrl: FieldRef<"ReceiptSettings", 'String'>
    readonly showQrCode: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly qrCodeContent: FieldRef<"ReceiptSettings", 'String'>
    readonly customQrContent: FieldRef<"ReceiptSettings", 'String'>
    readonly showCustomerInfo: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showCashierInfo: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showItemCodes: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showItemDescriptions: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showTaxBreakdown: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showPaymentMethods: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showBalance: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showTimestamp: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly use24HourFormat: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showItemNumbers: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly showRunningTotal: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly paperSize: FieldRef<"ReceiptSettings", 'String'>
    readonly fontSize: FieldRef<"ReceiptSettings", 'String'>
    readonly printDensity: FieldRef<"ReceiptSettings", 'String'>
    readonly lineSpacing: FieldRef<"ReceiptSettings", 'String'>
    readonly primaryColor: FieldRef<"ReceiptSettings", 'String'>
    readonly accentColor: FieldRef<"ReceiptSettings", 'String'>
    readonly fontFamily: FieldRef<"ReceiptSettings", 'String'>
    readonly printCopyCount: FieldRef<"ReceiptSettings", 'Int'>
    readonly autoPrint: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly language: FieldRef<"ReceiptSettings", 'String'>
    readonly currency: FieldRef<"ReceiptSettings", 'String'>
    readonly currencySymbol: FieldRef<"ReceiptSettings", 'String'>
    readonly currencyPosition: FieldRef<"ReceiptSettings", 'String'>
    readonly warehousesId: FieldRef<"ReceiptSettings", 'String'>
    readonly createdAt: FieldRef<"ReceiptSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"ReceiptSettings", 'DateTime'>
    readonly sync: FieldRef<"ReceiptSettings", 'Boolean'>
    readonly syncedAt: FieldRef<"ReceiptSettings", 'DateTime'>
    readonly isDeleted: FieldRef<"ReceiptSettings", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ReceiptSettings findUnique
   */
  export type ReceiptSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptSettings to fetch.
     */
    where: ReceiptSettingsWhereUniqueInput
  }

  /**
   * ReceiptSettings findUniqueOrThrow
   */
  export type ReceiptSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptSettings to fetch.
     */
    where: ReceiptSettingsWhereUniqueInput
  }

  /**
   * ReceiptSettings findFirst
   */
  export type ReceiptSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptSettings to fetch.
     */
    where?: ReceiptSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptSettings to fetch.
     */
    orderBy?: ReceiptSettingsOrderByWithRelationInput | ReceiptSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptSettings.
     */
    cursor?: ReceiptSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptSettings.
     */
    distinct?: ReceiptSettingsScalarFieldEnum | ReceiptSettingsScalarFieldEnum[]
  }

  /**
   * ReceiptSettings findFirstOrThrow
   */
  export type ReceiptSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptSettings to fetch.
     */
    where?: ReceiptSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptSettings to fetch.
     */
    orderBy?: ReceiptSettingsOrderByWithRelationInput | ReceiptSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReceiptSettings.
     */
    cursor?: ReceiptSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReceiptSettings.
     */
    distinct?: ReceiptSettingsScalarFieldEnum | ReceiptSettingsScalarFieldEnum[]
  }

  /**
   * ReceiptSettings findMany
   */
  export type ReceiptSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * Filter, which ReceiptSettings to fetch.
     */
    where?: ReceiptSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReceiptSettings to fetch.
     */
    orderBy?: ReceiptSettingsOrderByWithRelationInput | ReceiptSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReceiptSettings.
     */
    cursor?: ReceiptSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReceiptSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReceiptSettings.
     */
    skip?: number
    distinct?: ReceiptSettingsScalarFieldEnum | ReceiptSettingsScalarFieldEnum[]
  }

  /**
   * ReceiptSettings create
   */
  export type ReceiptSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a ReceiptSettings.
     */
    data: XOR<ReceiptSettingsCreateInput, ReceiptSettingsUncheckedCreateInput>
  }

  /**
   * ReceiptSettings createMany
   */
  export type ReceiptSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReceiptSettings.
     */
    data: ReceiptSettingsCreateManyInput | ReceiptSettingsCreateManyInput[]
  }

  /**
   * ReceiptSettings createManyAndReturn
   */
  export type ReceiptSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many ReceiptSettings.
     */
    data: ReceiptSettingsCreateManyInput | ReceiptSettingsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptSettings update
   */
  export type ReceiptSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a ReceiptSettings.
     */
    data: XOR<ReceiptSettingsUpdateInput, ReceiptSettingsUncheckedUpdateInput>
    /**
     * Choose, which ReceiptSettings to update.
     */
    where: ReceiptSettingsWhereUniqueInput
  }

  /**
   * ReceiptSettings updateMany
   */
  export type ReceiptSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReceiptSettings.
     */
    data: XOR<ReceiptSettingsUpdateManyMutationInput, ReceiptSettingsUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptSettings to update
     */
    where?: ReceiptSettingsWhereInput
    /**
     * Limit how many ReceiptSettings to update.
     */
    limit?: number
  }

  /**
   * ReceiptSettings updateManyAndReturn
   */
  export type ReceiptSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * The data used to update ReceiptSettings.
     */
    data: XOR<ReceiptSettingsUpdateManyMutationInput, ReceiptSettingsUncheckedUpdateManyInput>
    /**
     * Filter which ReceiptSettings to update
     */
    where?: ReceiptSettingsWhereInput
    /**
     * Limit how many ReceiptSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReceiptSettings upsert
   */
  export type ReceiptSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the ReceiptSettings to update in case it exists.
     */
    where: ReceiptSettingsWhereUniqueInput
    /**
     * In case the ReceiptSettings found by the `where` argument doesn't exist, create a new ReceiptSettings with this data.
     */
    create: XOR<ReceiptSettingsCreateInput, ReceiptSettingsUncheckedCreateInput>
    /**
     * In case the ReceiptSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceiptSettingsUpdateInput, ReceiptSettingsUncheckedUpdateInput>
  }

  /**
   * ReceiptSettings delete
   */
  export type ReceiptSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
    /**
     * Filter which ReceiptSettings to delete.
     */
    where: ReceiptSettingsWhereUniqueInput
  }

  /**
   * ReceiptSettings deleteMany
   */
  export type ReceiptSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReceiptSettings to delete
     */
    where?: ReceiptSettingsWhereInput
    /**
     * Limit how many ReceiptSettings to delete.
     */
    limit?: number
  }

  /**
   * ReceiptSettings.Warehouses
   */
  export type ReceiptSettings$WarehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * ReceiptSettings without action
   */
  export type ReceiptSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReceiptSettings
     */
    select?: ReceiptSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReceiptSettings
     */
    omit?: ReceiptSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceiptSettingsInclude<ExtArgs> | null
  }


  /**
   * Model BalancePayment
   */

  export type AggregateBalancePayment = {
    _count: BalancePaymentCountAggregateOutputType | null
    _avg: BalancePaymentAvgAggregateOutputType | null
    _sum: BalancePaymentSumAggregateOutputType | null
    _min: BalancePaymentMinAggregateOutputType | null
    _max: BalancePaymentMaxAggregateOutputType | null
  }

  export type BalancePaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type BalancePaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type BalancePaymentMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    saleId: string | null
    amount: number | null
    paymentMethod: string | null
    receiptNo: string | null
    notes: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type BalancePaymentMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    saleId: string | null
    amount: number | null
    paymentMethod: string | null
    receiptNo: string | null
    notes: string | null
    warehousesId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type BalancePaymentCountAggregateOutputType = {
    id: number
    customerId: number
    saleId: number
    amount: number
    paymentMethod: number
    receiptNo: number
    notes: number
    warehousesId: number
    createdAt: number
    updatedAt: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type BalancePaymentAvgAggregateInputType = {
    amount?: true
  }

  export type BalancePaymentSumAggregateInputType = {
    amount?: true
  }

  export type BalancePaymentMinAggregateInputType = {
    id?: true
    customerId?: true
    saleId?: true
    amount?: true
    paymentMethod?: true
    receiptNo?: true
    notes?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type BalancePaymentMaxAggregateInputType = {
    id?: true
    customerId?: true
    saleId?: true
    amount?: true
    paymentMethod?: true
    receiptNo?: true
    notes?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type BalancePaymentCountAggregateInputType = {
    id?: true
    customerId?: true
    saleId?: true
    amount?: true
    paymentMethod?: true
    receiptNo?: true
    notes?: true
    warehousesId?: true
    createdAt?: true
    updatedAt?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type BalancePaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BalancePayment to aggregate.
     */
    where?: BalancePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalancePayments to fetch.
     */
    orderBy?: BalancePaymentOrderByWithRelationInput | BalancePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BalancePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalancePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalancePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BalancePayments
    **/
    _count?: true | BalancePaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BalancePaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BalancePaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BalancePaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BalancePaymentMaxAggregateInputType
  }

  export type GetBalancePaymentAggregateType<T extends BalancePaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateBalancePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalancePayment[P]>
      : GetScalarType<T[P], AggregateBalancePayment[P]>
  }




  export type BalancePaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalancePaymentWhereInput
    orderBy?: BalancePaymentOrderByWithAggregationInput | BalancePaymentOrderByWithAggregationInput[]
    by: BalancePaymentScalarFieldEnum[] | BalancePaymentScalarFieldEnum
    having?: BalancePaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BalancePaymentCountAggregateInputType | true
    _avg?: BalancePaymentAvgAggregateInputType
    _sum?: BalancePaymentSumAggregateInputType
    _min?: BalancePaymentMinAggregateInputType
    _max?: BalancePaymentMaxAggregateInputType
  }

  export type BalancePaymentGroupByOutputType = {
    id: string
    customerId: string
    saleId: string | null
    amount: number
    paymentMethod: string
    receiptNo: string
    notes: string | null
    warehousesId: string | null
    createdAt: Date
    updatedAt: Date
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: BalancePaymentCountAggregateOutputType | null
    _avg: BalancePaymentAvgAggregateOutputType | null
    _sum: BalancePaymentSumAggregateOutputType | null
    _min: BalancePaymentMinAggregateOutputType | null
    _max: BalancePaymentMaxAggregateOutputType | null
  }

  type GetBalancePaymentGroupByPayload<T extends BalancePaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BalancePaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BalancePaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BalancePaymentGroupByOutputType[P]>
            : GetScalarType<T[P], BalancePaymentGroupByOutputType[P]>
        }
      >
    >


  export type BalancePaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    saleId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    receiptNo?: boolean
    notes?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sale?: boolean | BalancePayment$saleArgs<ExtArgs>
    warehouses?: boolean | BalancePayment$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["balancePayment"]>

  export type BalancePaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    saleId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    receiptNo?: boolean
    notes?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sale?: boolean | BalancePayment$saleArgs<ExtArgs>
    warehouses?: boolean | BalancePayment$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["balancePayment"]>

  export type BalancePaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    saleId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    receiptNo?: boolean
    notes?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sale?: boolean | BalancePayment$saleArgs<ExtArgs>
    warehouses?: boolean | BalancePayment$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["balancePayment"]>

  export type BalancePaymentSelectScalar = {
    id?: boolean
    customerId?: boolean
    saleId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    receiptNo?: boolean
    notes?: boolean
    warehousesId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type BalancePaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "saleId" | "amount" | "paymentMethod" | "receiptNo" | "notes" | "warehousesId" | "createdAt" | "updatedAt" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["balancePayment"]>
  export type BalancePaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sale?: boolean | BalancePayment$saleArgs<ExtArgs>
    warehouses?: boolean | BalancePayment$warehousesArgs<ExtArgs>
  }
  export type BalancePaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sale?: boolean | BalancePayment$saleArgs<ExtArgs>
    warehouses?: boolean | BalancePayment$warehousesArgs<ExtArgs>
  }
  export type BalancePaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sale?: boolean | BalancePayment$saleArgs<ExtArgs>
    warehouses?: boolean | BalancePayment$warehousesArgs<ExtArgs>
  }

  export type $BalancePaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BalancePayment"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      sale: Prisma.$SalePayload<ExtArgs> | null
      warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      saleId: string | null
      amount: number
      paymentMethod: string
      receiptNo: string
      notes: string | null
      warehousesId: string | null
      createdAt: Date
      updatedAt: Date
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["balancePayment"]>
    composites: {}
  }

  type BalancePaymentGetPayload<S extends boolean | null | undefined | BalancePaymentDefaultArgs> = $Result.GetResult<Prisma.$BalancePaymentPayload, S>

  type BalancePaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BalancePaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BalancePaymentCountAggregateInputType | true
    }

  export interface BalancePaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BalancePayment'], meta: { name: 'BalancePayment' } }
    /**
     * Find zero or one BalancePayment that matches the filter.
     * @param {BalancePaymentFindUniqueArgs} args - Arguments to find a BalancePayment
     * @example
     * // Get one BalancePayment
     * const balancePayment = await prisma.balancePayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BalancePaymentFindUniqueArgs>(args: SelectSubset<T, BalancePaymentFindUniqueArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BalancePayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BalancePaymentFindUniqueOrThrowArgs} args - Arguments to find a BalancePayment
     * @example
     * // Get one BalancePayment
     * const balancePayment = await prisma.balancePayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BalancePaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, BalancePaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BalancePayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalancePaymentFindFirstArgs} args - Arguments to find a BalancePayment
     * @example
     * // Get one BalancePayment
     * const balancePayment = await prisma.balancePayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BalancePaymentFindFirstArgs>(args?: SelectSubset<T, BalancePaymentFindFirstArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BalancePayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalancePaymentFindFirstOrThrowArgs} args - Arguments to find a BalancePayment
     * @example
     * // Get one BalancePayment
     * const balancePayment = await prisma.balancePayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BalancePaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, BalancePaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BalancePayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalancePaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BalancePayments
     * const balancePayments = await prisma.balancePayment.findMany()
     * 
     * // Get first 10 BalancePayments
     * const balancePayments = await prisma.balancePayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balancePaymentWithIdOnly = await prisma.balancePayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BalancePaymentFindManyArgs>(args?: SelectSubset<T, BalancePaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BalancePayment.
     * @param {BalancePaymentCreateArgs} args - Arguments to create a BalancePayment.
     * @example
     * // Create one BalancePayment
     * const BalancePayment = await prisma.balancePayment.create({
     *   data: {
     *     // ... data to create a BalancePayment
     *   }
     * })
     * 
     */
    create<T extends BalancePaymentCreateArgs>(args: SelectSubset<T, BalancePaymentCreateArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BalancePayments.
     * @param {BalancePaymentCreateManyArgs} args - Arguments to create many BalancePayments.
     * @example
     * // Create many BalancePayments
     * const balancePayment = await prisma.balancePayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BalancePaymentCreateManyArgs>(args?: SelectSubset<T, BalancePaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BalancePayments and returns the data saved in the database.
     * @param {BalancePaymentCreateManyAndReturnArgs} args - Arguments to create many BalancePayments.
     * @example
     * // Create many BalancePayments
     * const balancePayment = await prisma.balancePayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BalancePayments and only return the `id`
     * const balancePaymentWithIdOnly = await prisma.balancePayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BalancePaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, BalancePaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BalancePayment.
     * @param {BalancePaymentDeleteArgs} args - Arguments to delete one BalancePayment.
     * @example
     * // Delete one BalancePayment
     * const BalancePayment = await prisma.balancePayment.delete({
     *   where: {
     *     // ... filter to delete one BalancePayment
     *   }
     * })
     * 
     */
    delete<T extends BalancePaymentDeleteArgs>(args: SelectSubset<T, BalancePaymentDeleteArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BalancePayment.
     * @param {BalancePaymentUpdateArgs} args - Arguments to update one BalancePayment.
     * @example
     * // Update one BalancePayment
     * const balancePayment = await prisma.balancePayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BalancePaymentUpdateArgs>(args: SelectSubset<T, BalancePaymentUpdateArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BalancePayments.
     * @param {BalancePaymentDeleteManyArgs} args - Arguments to filter BalancePayments to delete.
     * @example
     * // Delete a few BalancePayments
     * const { count } = await prisma.balancePayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BalancePaymentDeleteManyArgs>(args?: SelectSubset<T, BalancePaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BalancePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalancePaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BalancePayments
     * const balancePayment = await prisma.balancePayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BalancePaymentUpdateManyArgs>(args: SelectSubset<T, BalancePaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BalancePayments and returns the data updated in the database.
     * @param {BalancePaymentUpdateManyAndReturnArgs} args - Arguments to update many BalancePayments.
     * @example
     * // Update many BalancePayments
     * const balancePayment = await prisma.balancePayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BalancePayments and only return the `id`
     * const balancePaymentWithIdOnly = await prisma.balancePayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BalancePaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, BalancePaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BalancePayment.
     * @param {BalancePaymentUpsertArgs} args - Arguments to update or create a BalancePayment.
     * @example
     * // Update or create a BalancePayment
     * const balancePayment = await prisma.balancePayment.upsert({
     *   create: {
     *     // ... data to create a BalancePayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BalancePayment we want to update
     *   }
     * })
     */
    upsert<T extends BalancePaymentUpsertArgs>(args: SelectSubset<T, BalancePaymentUpsertArgs<ExtArgs>>): Prisma__BalancePaymentClient<$Result.GetResult<Prisma.$BalancePaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BalancePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalancePaymentCountArgs} args - Arguments to filter BalancePayments to count.
     * @example
     * // Count the number of BalancePayments
     * const count = await prisma.balancePayment.count({
     *   where: {
     *     // ... the filter for the BalancePayments we want to count
     *   }
     * })
    **/
    count<T extends BalancePaymentCountArgs>(
      args?: Subset<T, BalancePaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BalancePaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BalancePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalancePaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BalancePaymentAggregateArgs>(args: Subset<T, BalancePaymentAggregateArgs>): Prisma.PrismaPromise<GetBalancePaymentAggregateType<T>>

    /**
     * Group by BalancePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalancePaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BalancePaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BalancePaymentGroupByArgs['orderBy'] }
        : { orderBy?: BalancePaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BalancePaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalancePaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BalancePayment model
   */
  readonly fields: BalancePaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BalancePayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BalancePaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sale<T extends BalancePayment$saleArgs<ExtArgs> = {}>(args?: Subset<T, BalancePayment$saleArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    warehouses<T extends BalancePayment$warehousesArgs<ExtArgs> = {}>(args?: Subset<T, BalancePayment$warehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BalancePayment model
   */
  interface BalancePaymentFieldRefs {
    readonly id: FieldRef<"BalancePayment", 'String'>
    readonly customerId: FieldRef<"BalancePayment", 'String'>
    readonly saleId: FieldRef<"BalancePayment", 'String'>
    readonly amount: FieldRef<"BalancePayment", 'Float'>
    readonly paymentMethod: FieldRef<"BalancePayment", 'String'>
    readonly receiptNo: FieldRef<"BalancePayment", 'String'>
    readonly notes: FieldRef<"BalancePayment", 'String'>
    readonly warehousesId: FieldRef<"BalancePayment", 'String'>
    readonly createdAt: FieldRef<"BalancePayment", 'DateTime'>
    readonly updatedAt: FieldRef<"BalancePayment", 'DateTime'>
    readonly sync: FieldRef<"BalancePayment", 'Boolean'>
    readonly syncedAt: FieldRef<"BalancePayment", 'DateTime'>
    readonly isDeleted: FieldRef<"BalancePayment", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * BalancePayment findUnique
   */
  export type BalancePaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * Filter, which BalancePayment to fetch.
     */
    where: BalancePaymentWhereUniqueInput
  }

  /**
   * BalancePayment findUniqueOrThrow
   */
  export type BalancePaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * Filter, which BalancePayment to fetch.
     */
    where: BalancePaymentWhereUniqueInput
  }

  /**
   * BalancePayment findFirst
   */
  export type BalancePaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * Filter, which BalancePayment to fetch.
     */
    where?: BalancePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalancePayments to fetch.
     */
    orderBy?: BalancePaymentOrderByWithRelationInput | BalancePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BalancePayments.
     */
    cursor?: BalancePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalancePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalancePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BalancePayments.
     */
    distinct?: BalancePaymentScalarFieldEnum | BalancePaymentScalarFieldEnum[]
  }

  /**
   * BalancePayment findFirstOrThrow
   */
  export type BalancePaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * Filter, which BalancePayment to fetch.
     */
    where?: BalancePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalancePayments to fetch.
     */
    orderBy?: BalancePaymentOrderByWithRelationInput | BalancePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BalancePayments.
     */
    cursor?: BalancePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalancePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalancePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BalancePayments.
     */
    distinct?: BalancePaymentScalarFieldEnum | BalancePaymentScalarFieldEnum[]
  }

  /**
   * BalancePayment findMany
   */
  export type BalancePaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * Filter, which BalancePayments to fetch.
     */
    where?: BalancePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalancePayments to fetch.
     */
    orderBy?: BalancePaymentOrderByWithRelationInput | BalancePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BalancePayments.
     */
    cursor?: BalancePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalancePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalancePayments.
     */
    skip?: number
    distinct?: BalancePaymentScalarFieldEnum | BalancePaymentScalarFieldEnum[]
  }

  /**
   * BalancePayment create
   */
  export type BalancePaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a BalancePayment.
     */
    data: XOR<BalancePaymentCreateInput, BalancePaymentUncheckedCreateInput>
  }

  /**
   * BalancePayment createMany
   */
  export type BalancePaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BalancePayments.
     */
    data: BalancePaymentCreateManyInput | BalancePaymentCreateManyInput[]
  }

  /**
   * BalancePayment createManyAndReturn
   */
  export type BalancePaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * The data used to create many BalancePayments.
     */
    data: BalancePaymentCreateManyInput | BalancePaymentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BalancePayment update
   */
  export type BalancePaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a BalancePayment.
     */
    data: XOR<BalancePaymentUpdateInput, BalancePaymentUncheckedUpdateInput>
    /**
     * Choose, which BalancePayment to update.
     */
    where: BalancePaymentWhereUniqueInput
  }

  /**
   * BalancePayment updateMany
   */
  export type BalancePaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BalancePayments.
     */
    data: XOR<BalancePaymentUpdateManyMutationInput, BalancePaymentUncheckedUpdateManyInput>
    /**
     * Filter which BalancePayments to update
     */
    where?: BalancePaymentWhereInput
    /**
     * Limit how many BalancePayments to update.
     */
    limit?: number
  }

  /**
   * BalancePayment updateManyAndReturn
   */
  export type BalancePaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * The data used to update BalancePayments.
     */
    data: XOR<BalancePaymentUpdateManyMutationInput, BalancePaymentUncheckedUpdateManyInput>
    /**
     * Filter which BalancePayments to update
     */
    where?: BalancePaymentWhereInput
    /**
     * Limit how many BalancePayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BalancePayment upsert
   */
  export type BalancePaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the BalancePayment to update in case it exists.
     */
    where: BalancePaymentWhereUniqueInput
    /**
     * In case the BalancePayment found by the `where` argument doesn't exist, create a new BalancePayment with this data.
     */
    create: XOR<BalancePaymentCreateInput, BalancePaymentUncheckedCreateInput>
    /**
     * In case the BalancePayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BalancePaymentUpdateInput, BalancePaymentUncheckedUpdateInput>
  }

  /**
   * BalancePayment delete
   */
  export type BalancePaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
    /**
     * Filter which BalancePayment to delete.
     */
    where: BalancePaymentWhereUniqueInput
  }

  /**
   * BalancePayment deleteMany
   */
  export type BalancePaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BalancePayments to delete
     */
    where?: BalancePaymentWhereInput
    /**
     * Limit how many BalancePayments to delete.
     */
    limit?: number
  }

  /**
   * BalancePayment.sale
   */
  export type BalancePayment$saleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
  }

  /**
   * BalancePayment.warehouses
   */
  export type BalancePayment$warehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * BalancePayment without action
   */
  export type BalancePaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalancePayment
     */
    select?: BalancePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalancePayment
     */
    omit?: BalancePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalancePaymentInclude<ExtArgs> | null
  }


  /**
   * Model Quotation
   */

  export type AggregateQuotation = {
    _count: QuotationCountAggregateOutputType | null
    _avg: QuotationAvgAggregateOutputType | null
    _sum: QuotationSumAggregateOutputType | null
    _min: QuotationMinAggregateOutputType | null
    _max: QuotationMaxAggregateOutputType | null
  }

  export type QuotationAvgAggregateOutputType = {
    taxRate: number | null
    subTotal: number | null
    grandTotal: number | null
  }

  export type QuotationSumAggregateOutputType = {
    taxRate: number | null
    subTotal: number | null
    grandTotal: number | null
  }

  export type QuotationMinAggregateOutputType = {
    id: string | null
    selectedCustomerId: string | null
    taxRate: number | null
    subTotal: number | null
    notes: string | null
    grandTotal: number | null
    validUntil: Date | null
    status: string | null
    convertedToSaleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    warehousesId: string | null
    quotationNo: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type QuotationMaxAggregateOutputType = {
    id: string | null
    selectedCustomerId: string | null
    taxRate: number | null
    subTotal: number | null
    notes: string | null
    grandTotal: number | null
    validUntil: Date | null
    status: string | null
    convertedToSaleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    warehousesId: string | null
    quotationNo: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type QuotationCountAggregateOutputType = {
    id: number
    selectedCustomerId: number
    taxRate: number
    subTotal: number
    notes: number
    grandTotal: number
    validUntil: number
    status: number
    convertedToSaleId: number
    createdAt: number
    updatedAt: number
    warehousesId: number
    quotationNo: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type QuotationAvgAggregateInputType = {
    taxRate?: true
    subTotal?: true
    grandTotal?: true
  }

  export type QuotationSumAggregateInputType = {
    taxRate?: true
    subTotal?: true
    grandTotal?: true
  }

  export type QuotationMinAggregateInputType = {
    id?: true
    selectedCustomerId?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    grandTotal?: true
    validUntil?: true
    status?: true
    convertedToSaleId?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    quotationNo?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type QuotationMaxAggregateInputType = {
    id?: true
    selectedCustomerId?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    grandTotal?: true
    validUntil?: true
    status?: true
    convertedToSaleId?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    quotationNo?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type QuotationCountAggregateInputType = {
    id?: true
    selectedCustomerId?: true
    taxRate?: true
    subTotal?: true
    notes?: true
    grandTotal?: true
    validUntil?: true
    status?: true
    convertedToSaleId?: true
    createdAt?: true
    updatedAt?: true
    warehousesId?: true
    quotationNo?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type QuotationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quotation to aggregate.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quotations
    **/
    _count?: true | QuotationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuotationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuotationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuotationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuotationMaxAggregateInputType
  }

  export type GetQuotationAggregateType<T extends QuotationAggregateArgs> = {
        [P in keyof T & keyof AggregateQuotation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuotation[P]>
      : GetScalarType<T[P], AggregateQuotation[P]>
  }




  export type QuotationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationWhereInput
    orderBy?: QuotationOrderByWithAggregationInput | QuotationOrderByWithAggregationInput[]
    by: QuotationScalarFieldEnum[] | QuotationScalarFieldEnum
    having?: QuotationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuotationCountAggregateInputType | true
    _avg?: QuotationAvgAggregateInputType
    _sum?: QuotationSumAggregateInputType
    _min?: QuotationMinAggregateInputType
    _max?: QuotationMaxAggregateInputType
  }

  export type QuotationGroupByOutputType = {
    id: string
    selectedCustomerId: string | null
    taxRate: number
    subTotal: number
    notes: string | null
    grandTotal: number
    validUntil: Date | null
    status: string
    convertedToSaleId: string | null
    createdAt: Date
    updatedAt: Date
    warehousesId: string | null
    quotationNo: string
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: QuotationCountAggregateOutputType | null
    _avg: QuotationAvgAggregateOutputType | null
    _sum: QuotationSumAggregateOutputType | null
    _min: QuotationMinAggregateOutputType | null
    _max: QuotationMaxAggregateOutputType | null
  }

  type GetQuotationGroupByPayload<T extends QuotationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuotationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuotationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuotationGroupByOutputType[P]>
            : GetScalarType<T[P], QuotationGroupByOutputType[P]>
        }
      >
    >


  export type QuotationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    grandTotal?: boolean
    validUntil?: boolean
    status?: boolean
    convertedToSaleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    quotationNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    quotationItems?: boolean | Quotation$quotationItemsArgs<ExtArgs>
    selectedCustomer?: boolean | Quotation$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Quotation$warehousesArgs<ExtArgs>
    _count?: boolean | QuotationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quotation"]>

  export type QuotationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    grandTotal?: boolean
    validUntil?: boolean
    status?: boolean
    convertedToSaleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    quotationNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    selectedCustomer?: boolean | Quotation$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Quotation$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["quotation"]>

  export type QuotationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    grandTotal?: boolean
    validUntil?: boolean
    status?: boolean
    convertedToSaleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    quotationNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    selectedCustomer?: boolean | Quotation$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Quotation$warehousesArgs<ExtArgs>
  }, ExtArgs["result"]["quotation"]>

  export type QuotationSelectScalar = {
    id?: boolean
    selectedCustomerId?: boolean
    taxRate?: boolean
    subTotal?: boolean
    notes?: boolean
    grandTotal?: boolean
    validUntil?: boolean
    status?: boolean
    convertedToSaleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehousesId?: boolean
    quotationNo?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type QuotationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "selectedCustomerId" | "taxRate" | "subTotal" | "notes" | "grandTotal" | "validUntil" | "status" | "convertedToSaleId" | "createdAt" | "updatedAt" | "warehousesId" | "quotationNo" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["quotation"]>
  export type QuotationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotationItems?: boolean | Quotation$quotationItemsArgs<ExtArgs>
    selectedCustomer?: boolean | Quotation$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Quotation$warehousesArgs<ExtArgs>
    _count?: boolean | QuotationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuotationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selectedCustomer?: boolean | Quotation$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Quotation$warehousesArgs<ExtArgs>
  }
  export type QuotationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selectedCustomer?: boolean | Quotation$selectedCustomerArgs<ExtArgs>
    warehouses?: boolean | Quotation$warehousesArgs<ExtArgs>
  }

  export type $QuotationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quotation"
    objects: {
      quotationItems: Prisma.$QuotationItemPayload<ExtArgs>[]
      selectedCustomer: Prisma.$CustomerPayload<ExtArgs> | null
      warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      selectedCustomerId: string | null
      taxRate: number
      subTotal: number
      notes: string | null
      grandTotal: number
      validUntil: Date | null
      status: string
      convertedToSaleId: string | null
      createdAt: Date
      updatedAt: Date
      warehousesId: string | null
      quotationNo: string
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["quotation"]>
    composites: {}
  }

  type QuotationGetPayload<S extends boolean | null | undefined | QuotationDefaultArgs> = $Result.GetResult<Prisma.$QuotationPayload, S>

  type QuotationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuotationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuotationCountAggregateInputType | true
    }

  export interface QuotationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quotation'], meta: { name: 'Quotation' } }
    /**
     * Find zero or one Quotation that matches the filter.
     * @param {QuotationFindUniqueArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuotationFindUniqueArgs>(args: SelectSubset<T, QuotationFindUniqueArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Quotation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuotationFindUniqueOrThrowArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuotationFindUniqueOrThrowArgs>(args: SelectSubset<T, QuotationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quotation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationFindFirstArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuotationFindFirstArgs>(args?: SelectSubset<T, QuotationFindFirstArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quotation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationFindFirstOrThrowArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuotationFindFirstOrThrowArgs>(args?: SelectSubset<T, QuotationFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Quotations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quotations
     * const quotations = await prisma.quotation.findMany()
     * 
     * // Get first 10 Quotations
     * const quotations = await prisma.quotation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quotationWithIdOnly = await prisma.quotation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuotationFindManyArgs>(args?: SelectSubset<T, QuotationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Quotation.
     * @param {QuotationCreateArgs} args - Arguments to create a Quotation.
     * @example
     * // Create one Quotation
     * const Quotation = await prisma.quotation.create({
     *   data: {
     *     // ... data to create a Quotation
     *   }
     * })
     * 
     */
    create<T extends QuotationCreateArgs>(args: SelectSubset<T, QuotationCreateArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Quotations.
     * @param {QuotationCreateManyArgs} args - Arguments to create many Quotations.
     * @example
     * // Create many Quotations
     * const quotation = await prisma.quotation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuotationCreateManyArgs>(args?: SelectSubset<T, QuotationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quotations and returns the data saved in the database.
     * @param {QuotationCreateManyAndReturnArgs} args - Arguments to create many Quotations.
     * @example
     * // Create many Quotations
     * const quotation = await prisma.quotation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quotations and only return the `id`
     * const quotationWithIdOnly = await prisma.quotation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuotationCreateManyAndReturnArgs>(args?: SelectSubset<T, QuotationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Quotation.
     * @param {QuotationDeleteArgs} args - Arguments to delete one Quotation.
     * @example
     * // Delete one Quotation
     * const Quotation = await prisma.quotation.delete({
     *   where: {
     *     // ... filter to delete one Quotation
     *   }
     * })
     * 
     */
    delete<T extends QuotationDeleteArgs>(args: SelectSubset<T, QuotationDeleteArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Quotation.
     * @param {QuotationUpdateArgs} args - Arguments to update one Quotation.
     * @example
     * // Update one Quotation
     * const quotation = await prisma.quotation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuotationUpdateArgs>(args: SelectSubset<T, QuotationUpdateArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Quotations.
     * @param {QuotationDeleteManyArgs} args - Arguments to filter Quotations to delete.
     * @example
     * // Delete a few Quotations
     * const { count } = await prisma.quotation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuotationDeleteManyArgs>(args?: SelectSubset<T, QuotationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quotations
     * const quotation = await prisma.quotation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuotationUpdateManyArgs>(args: SelectSubset<T, QuotationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotations and returns the data updated in the database.
     * @param {QuotationUpdateManyAndReturnArgs} args - Arguments to update many Quotations.
     * @example
     * // Update many Quotations
     * const quotation = await prisma.quotation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quotations and only return the `id`
     * const quotationWithIdOnly = await prisma.quotation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuotationUpdateManyAndReturnArgs>(args: SelectSubset<T, QuotationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Quotation.
     * @param {QuotationUpsertArgs} args - Arguments to update or create a Quotation.
     * @example
     * // Update or create a Quotation
     * const quotation = await prisma.quotation.upsert({
     *   create: {
     *     // ... data to create a Quotation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quotation we want to update
     *   }
     * })
     */
    upsert<T extends QuotationUpsertArgs>(args: SelectSubset<T, QuotationUpsertArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Quotations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationCountArgs} args - Arguments to filter Quotations to count.
     * @example
     * // Count the number of Quotations
     * const count = await prisma.quotation.count({
     *   where: {
     *     // ... the filter for the Quotations we want to count
     *   }
     * })
    **/
    count<T extends QuotationCountArgs>(
      args?: Subset<T, QuotationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuotationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quotation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuotationAggregateArgs>(args: Subset<T, QuotationAggregateArgs>): Prisma.PrismaPromise<GetQuotationAggregateType<T>>

    /**
     * Group by Quotation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuotationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuotationGroupByArgs['orderBy'] }
        : { orderBy?: QuotationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuotationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuotationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quotation model
   */
  readonly fields: QuotationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quotation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuotationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quotationItems<T extends Quotation$quotationItemsArgs<ExtArgs> = {}>(args?: Subset<T, Quotation$quotationItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    selectedCustomer<T extends Quotation$selectedCustomerArgs<ExtArgs> = {}>(args?: Subset<T, Quotation$selectedCustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    warehouses<T extends Quotation$warehousesArgs<ExtArgs> = {}>(args?: Subset<T, Quotation$warehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quotation model
   */
  interface QuotationFieldRefs {
    readonly id: FieldRef<"Quotation", 'String'>
    readonly selectedCustomerId: FieldRef<"Quotation", 'String'>
    readonly taxRate: FieldRef<"Quotation", 'Float'>
    readonly subTotal: FieldRef<"Quotation", 'Float'>
    readonly notes: FieldRef<"Quotation", 'String'>
    readonly grandTotal: FieldRef<"Quotation", 'Float'>
    readonly validUntil: FieldRef<"Quotation", 'DateTime'>
    readonly status: FieldRef<"Quotation", 'String'>
    readonly convertedToSaleId: FieldRef<"Quotation", 'String'>
    readonly createdAt: FieldRef<"Quotation", 'DateTime'>
    readonly updatedAt: FieldRef<"Quotation", 'DateTime'>
    readonly warehousesId: FieldRef<"Quotation", 'String'>
    readonly quotationNo: FieldRef<"Quotation", 'String'>
    readonly sync: FieldRef<"Quotation", 'Boolean'>
    readonly syncedAt: FieldRef<"Quotation", 'DateTime'>
    readonly isDeleted: FieldRef<"Quotation", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Quotation findUnique
   */
  export type QuotationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation findUniqueOrThrow
   */
  export type QuotationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation findFirst
   */
  export type QuotationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotations.
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotations.
     */
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Quotation findFirstOrThrow
   */
  export type QuotationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotations.
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotations.
     */
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Quotation findMany
   */
  export type QuotationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotations to fetch.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quotations.
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Quotation create
   */
  export type QuotationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * The data needed to create a Quotation.
     */
    data: XOR<QuotationCreateInput, QuotationUncheckedCreateInput>
  }

  /**
   * Quotation createMany
   */
  export type QuotationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quotations.
     */
    data: QuotationCreateManyInput | QuotationCreateManyInput[]
  }

  /**
   * Quotation createManyAndReturn
   */
  export type QuotationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * The data used to create many Quotations.
     */
    data: QuotationCreateManyInput | QuotationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quotation update
   */
  export type QuotationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * The data needed to update a Quotation.
     */
    data: XOR<QuotationUpdateInput, QuotationUncheckedUpdateInput>
    /**
     * Choose, which Quotation to update.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation updateMany
   */
  export type QuotationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quotations.
     */
    data: XOR<QuotationUpdateManyMutationInput, QuotationUncheckedUpdateManyInput>
    /**
     * Filter which Quotations to update
     */
    where?: QuotationWhereInput
    /**
     * Limit how many Quotations to update.
     */
    limit?: number
  }

  /**
   * Quotation updateManyAndReturn
   */
  export type QuotationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * The data used to update Quotations.
     */
    data: XOR<QuotationUpdateManyMutationInput, QuotationUncheckedUpdateManyInput>
    /**
     * Filter which Quotations to update
     */
    where?: QuotationWhereInput
    /**
     * Limit how many Quotations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quotation upsert
   */
  export type QuotationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * The filter to search for the Quotation to update in case it exists.
     */
    where: QuotationWhereUniqueInput
    /**
     * In case the Quotation found by the `where` argument doesn't exist, create a new Quotation with this data.
     */
    create: XOR<QuotationCreateInput, QuotationUncheckedCreateInput>
    /**
     * In case the Quotation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuotationUpdateInput, QuotationUncheckedUpdateInput>
  }

  /**
   * Quotation delete
   */
  export type QuotationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter which Quotation to delete.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation deleteMany
   */
  export type QuotationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quotations to delete
     */
    where?: QuotationWhereInput
    /**
     * Limit how many Quotations to delete.
     */
    limit?: number
  }

  /**
   * Quotation.quotationItems
   */
  export type Quotation$quotationItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    where?: QuotationItemWhereInput
    orderBy?: QuotationItemOrderByWithRelationInput | QuotationItemOrderByWithRelationInput[]
    cursor?: QuotationItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationItemScalarFieldEnum | QuotationItemScalarFieldEnum[]
  }

  /**
   * Quotation.selectedCustomer
   */
  export type Quotation$selectedCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Quotation.warehouses
   */
  export type Quotation$warehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * Quotation without action
   */
  export type QuotationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
  }


  /**
   * Model QuotationItem
   */

  export type AggregateQuotationItem = {
    _count: QuotationItemCountAggregateOutputType | null
    _avg: QuotationItemAvgAggregateOutputType | null
    _sum: QuotationItemSumAggregateOutputType | null
    _min: QuotationItemMinAggregateOutputType | null
    _max: QuotationItemMaxAggregateOutputType | null
  }

  export type QuotationItemAvgAggregateOutputType = {
    cost: number | null
    selectedPrice: number | null
    quantity: number | null
    discount: number | null
    total: number | null
  }

  export type QuotationItemSumAggregateOutputType = {
    cost: number | null
    selectedPrice: number | null
    quantity: number | null
    discount: number | null
    total: number | null
  }

  export type QuotationItemMinAggregateOutputType = {
    id: string | null
    quotationId: string | null
    productId: string | null
    productName: string | null
    cost: number | null
    selectedPrice: number | null
    priceType: string | null
    quantity: number | null
    discount: number | null
    total: number | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type QuotationItemMaxAggregateOutputType = {
    id: string | null
    quotationId: string | null
    productId: string | null
    productName: string | null
    cost: number | null
    selectedPrice: number | null
    priceType: string | null
    quantity: number | null
    discount: number | null
    total: number | null
    warehousesId: string | null
    sync: boolean | null
    syncedAt: Date | null
    isDeleted: boolean | null
  }

  export type QuotationItemCountAggregateOutputType = {
    id: number
    quotationId: number
    productId: number
    productName: number
    cost: number
    selectedPrice: number
    priceType: number
    quantity: number
    discount: number
    total: number
    warehousesId: number
    sync: number
    syncedAt: number
    isDeleted: number
    _all: number
  }


  export type QuotationItemAvgAggregateInputType = {
    cost?: true
    selectedPrice?: true
    quantity?: true
    discount?: true
    total?: true
  }

  export type QuotationItemSumAggregateInputType = {
    cost?: true
    selectedPrice?: true
    quantity?: true
    discount?: true
    total?: true
  }

  export type QuotationItemMinAggregateInputType = {
    id?: true
    quotationId?: true
    productId?: true
    productName?: true
    cost?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type QuotationItemMaxAggregateInputType = {
    id?: true
    quotationId?: true
    productId?: true
    productName?: true
    cost?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
  }

  export type QuotationItemCountAggregateInputType = {
    id?: true
    quotationId?: true
    productId?: true
    productName?: true
    cost?: true
    selectedPrice?: true
    priceType?: true
    quantity?: true
    discount?: true
    total?: true
    warehousesId?: true
    sync?: true
    syncedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type QuotationItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuotationItem to aggregate.
     */
    where?: QuotationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationItems to fetch.
     */
    orderBy?: QuotationItemOrderByWithRelationInput | QuotationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuotationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuotationItems
    **/
    _count?: true | QuotationItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuotationItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuotationItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuotationItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuotationItemMaxAggregateInputType
  }

  export type GetQuotationItemAggregateType<T extends QuotationItemAggregateArgs> = {
        [P in keyof T & keyof AggregateQuotationItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuotationItem[P]>
      : GetScalarType<T[P], AggregateQuotationItem[P]>
  }




  export type QuotationItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationItemWhereInput
    orderBy?: QuotationItemOrderByWithAggregationInput | QuotationItemOrderByWithAggregationInput[]
    by: QuotationItemScalarFieldEnum[] | QuotationItemScalarFieldEnum
    having?: QuotationItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuotationItemCountAggregateInputType | true
    _avg?: QuotationItemAvgAggregateInputType
    _sum?: QuotationItemSumAggregateInputType
    _min?: QuotationItemMinAggregateInputType
    _max?: QuotationItemMaxAggregateInputType
  }

  export type QuotationItemGroupByOutputType = {
    id: string
    quotationId: string | null
    productId: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    warehousesId: string | null
    sync: boolean
    syncedAt: Date | null
    isDeleted: boolean
    _count: QuotationItemCountAggregateOutputType | null
    _avg: QuotationItemAvgAggregateOutputType | null
    _sum: QuotationItemSumAggregateOutputType | null
    _min: QuotationItemMinAggregateOutputType | null
    _max: QuotationItemMaxAggregateOutputType | null
  }

  type GetQuotationItemGroupByPayload<T extends QuotationItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuotationItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuotationItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuotationItemGroupByOutputType[P]>
            : GetScalarType<T[P], QuotationItemGroupByOutputType[P]>
        }
      >
    >


  export type QuotationItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quotationId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    quotation?: boolean | QuotationItem$quotationArgs<ExtArgs>
    product?: boolean | QuotationItem$productArgs<ExtArgs>
    Warehouses?: boolean | QuotationItem$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["quotationItem"]>

  export type QuotationItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quotationId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    quotation?: boolean | QuotationItem$quotationArgs<ExtArgs>
    product?: boolean | QuotationItem$productArgs<ExtArgs>
    Warehouses?: boolean | QuotationItem$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["quotationItem"]>

  export type QuotationItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quotationId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
    quotation?: boolean | QuotationItem$quotationArgs<ExtArgs>
    product?: boolean | QuotationItem$productArgs<ExtArgs>
    Warehouses?: boolean | QuotationItem$WarehousesArgs<ExtArgs>
  }, ExtArgs["result"]["quotationItem"]>

  export type QuotationItemSelectScalar = {
    id?: boolean
    quotationId?: boolean
    productId?: boolean
    productName?: boolean
    cost?: boolean
    selectedPrice?: boolean
    priceType?: boolean
    quantity?: boolean
    discount?: boolean
    total?: boolean
    warehousesId?: boolean
    sync?: boolean
    syncedAt?: boolean
    isDeleted?: boolean
  }

  export type QuotationItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quotationId" | "productId" | "productName" | "cost" | "selectedPrice" | "priceType" | "quantity" | "discount" | "total" | "warehousesId" | "sync" | "syncedAt" | "isDeleted", ExtArgs["result"]["quotationItem"]>
  export type QuotationItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotation?: boolean | QuotationItem$quotationArgs<ExtArgs>
    product?: boolean | QuotationItem$productArgs<ExtArgs>
    Warehouses?: boolean | QuotationItem$WarehousesArgs<ExtArgs>
  }
  export type QuotationItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotation?: boolean | QuotationItem$quotationArgs<ExtArgs>
    product?: boolean | QuotationItem$productArgs<ExtArgs>
    Warehouses?: boolean | QuotationItem$WarehousesArgs<ExtArgs>
  }
  export type QuotationItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotation?: boolean | QuotationItem$quotationArgs<ExtArgs>
    product?: boolean | QuotationItem$productArgs<ExtArgs>
    Warehouses?: boolean | QuotationItem$WarehousesArgs<ExtArgs>
  }

  export type $QuotationItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuotationItem"
    objects: {
      quotation: Prisma.$QuotationPayload<ExtArgs> | null
      product: Prisma.$ProductPayload<ExtArgs> | null
      Warehouses: Prisma.$WarehousesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quotationId: string | null
      productId: string | null
      productName: string
      cost: number
      selectedPrice: number
      priceType: string
      quantity: number
      discount: number
      total: number
      warehousesId: string | null
      sync: boolean
      syncedAt: Date | null
      isDeleted: boolean
    }, ExtArgs["result"]["quotationItem"]>
    composites: {}
  }

  type QuotationItemGetPayload<S extends boolean | null | undefined | QuotationItemDefaultArgs> = $Result.GetResult<Prisma.$QuotationItemPayload, S>

  type QuotationItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuotationItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuotationItemCountAggregateInputType | true
    }

  export interface QuotationItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuotationItem'], meta: { name: 'QuotationItem' } }
    /**
     * Find zero or one QuotationItem that matches the filter.
     * @param {QuotationItemFindUniqueArgs} args - Arguments to find a QuotationItem
     * @example
     * // Get one QuotationItem
     * const quotationItem = await prisma.quotationItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuotationItemFindUniqueArgs>(args: SelectSubset<T, QuotationItemFindUniqueArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuotationItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuotationItemFindUniqueOrThrowArgs} args - Arguments to find a QuotationItem
     * @example
     * // Get one QuotationItem
     * const quotationItem = await prisma.quotationItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuotationItemFindUniqueOrThrowArgs>(args: SelectSubset<T, QuotationItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuotationItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationItemFindFirstArgs} args - Arguments to find a QuotationItem
     * @example
     * // Get one QuotationItem
     * const quotationItem = await prisma.quotationItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuotationItemFindFirstArgs>(args?: SelectSubset<T, QuotationItemFindFirstArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuotationItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationItemFindFirstOrThrowArgs} args - Arguments to find a QuotationItem
     * @example
     * // Get one QuotationItem
     * const quotationItem = await prisma.quotationItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuotationItemFindFirstOrThrowArgs>(args?: SelectSubset<T, QuotationItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuotationItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuotationItems
     * const quotationItems = await prisma.quotationItem.findMany()
     * 
     * // Get first 10 QuotationItems
     * const quotationItems = await prisma.quotationItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quotationItemWithIdOnly = await prisma.quotationItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuotationItemFindManyArgs>(args?: SelectSubset<T, QuotationItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuotationItem.
     * @param {QuotationItemCreateArgs} args - Arguments to create a QuotationItem.
     * @example
     * // Create one QuotationItem
     * const QuotationItem = await prisma.quotationItem.create({
     *   data: {
     *     // ... data to create a QuotationItem
     *   }
     * })
     * 
     */
    create<T extends QuotationItemCreateArgs>(args: SelectSubset<T, QuotationItemCreateArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuotationItems.
     * @param {QuotationItemCreateManyArgs} args - Arguments to create many QuotationItems.
     * @example
     * // Create many QuotationItems
     * const quotationItem = await prisma.quotationItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuotationItemCreateManyArgs>(args?: SelectSubset<T, QuotationItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuotationItems and returns the data saved in the database.
     * @param {QuotationItemCreateManyAndReturnArgs} args - Arguments to create many QuotationItems.
     * @example
     * // Create many QuotationItems
     * const quotationItem = await prisma.quotationItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuotationItems and only return the `id`
     * const quotationItemWithIdOnly = await prisma.quotationItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuotationItemCreateManyAndReturnArgs>(args?: SelectSubset<T, QuotationItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuotationItem.
     * @param {QuotationItemDeleteArgs} args - Arguments to delete one QuotationItem.
     * @example
     * // Delete one QuotationItem
     * const QuotationItem = await prisma.quotationItem.delete({
     *   where: {
     *     // ... filter to delete one QuotationItem
     *   }
     * })
     * 
     */
    delete<T extends QuotationItemDeleteArgs>(args: SelectSubset<T, QuotationItemDeleteArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuotationItem.
     * @param {QuotationItemUpdateArgs} args - Arguments to update one QuotationItem.
     * @example
     * // Update one QuotationItem
     * const quotationItem = await prisma.quotationItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuotationItemUpdateArgs>(args: SelectSubset<T, QuotationItemUpdateArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuotationItems.
     * @param {QuotationItemDeleteManyArgs} args - Arguments to filter QuotationItems to delete.
     * @example
     * // Delete a few QuotationItems
     * const { count } = await prisma.quotationItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuotationItemDeleteManyArgs>(args?: SelectSubset<T, QuotationItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuotationItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuotationItems
     * const quotationItem = await prisma.quotationItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuotationItemUpdateManyArgs>(args: SelectSubset<T, QuotationItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuotationItems and returns the data updated in the database.
     * @param {QuotationItemUpdateManyAndReturnArgs} args - Arguments to update many QuotationItems.
     * @example
     * // Update many QuotationItems
     * const quotationItem = await prisma.quotationItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuotationItems and only return the `id`
     * const quotationItemWithIdOnly = await prisma.quotationItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuotationItemUpdateManyAndReturnArgs>(args: SelectSubset<T, QuotationItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuotationItem.
     * @param {QuotationItemUpsertArgs} args - Arguments to update or create a QuotationItem.
     * @example
     * // Update or create a QuotationItem
     * const quotationItem = await prisma.quotationItem.upsert({
     *   create: {
     *     // ... data to create a QuotationItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuotationItem we want to update
     *   }
     * })
     */
    upsert<T extends QuotationItemUpsertArgs>(args: SelectSubset<T, QuotationItemUpsertArgs<ExtArgs>>): Prisma__QuotationItemClient<$Result.GetResult<Prisma.$QuotationItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuotationItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationItemCountArgs} args - Arguments to filter QuotationItems to count.
     * @example
     * // Count the number of QuotationItems
     * const count = await prisma.quotationItem.count({
     *   where: {
     *     // ... the filter for the QuotationItems we want to count
     *   }
     * })
    **/
    count<T extends QuotationItemCountArgs>(
      args?: Subset<T, QuotationItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuotationItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuotationItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuotationItemAggregateArgs>(args: Subset<T, QuotationItemAggregateArgs>): Prisma.PrismaPromise<GetQuotationItemAggregateType<T>>

    /**
     * Group by QuotationItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuotationItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuotationItemGroupByArgs['orderBy'] }
        : { orderBy?: QuotationItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuotationItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuotationItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuotationItem model
   */
  readonly fields: QuotationItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuotationItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuotationItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quotation<T extends QuotationItem$quotationArgs<ExtArgs> = {}>(args?: Subset<T, QuotationItem$quotationArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends QuotationItem$productArgs<ExtArgs> = {}>(args?: Subset<T, QuotationItem$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Warehouses<T extends QuotationItem$WarehousesArgs<ExtArgs> = {}>(args?: Subset<T, QuotationItem$WarehousesArgs<ExtArgs>>): Prisma__WarehousesClient<$Result.GetResult<Prisma.$WarehousesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuotationItem model
   */
  interface QuotationItemFieldRefs {
    readonly id: FieldRef<"QuotationItem", 'String'>
    readonly quotationId: FieldRef<"QuotationItem", 'String'>
    readonly productId: FieldRef<"QuotationItem", 'String'>
    readonly productName: FieldRef<"QuotationItem", 'String'>
    readonly cost: FieldRef<"QuotationItem", 'Float'>
    readonly selectedPrice: FieldRef<"QuotationItem", 'Float'>
    readonly priceType: FieldRef<"QuotationItem", 'String'>
    readonly quantity: FieldRef<"QuotationItem", 'Int'>
    readonly discount: FieldRef<"QuotationItem", 'Float'>
    readonly total: FieldRef<"QuotationItem", 'Float'>
    readonly warehousesId: FieldRef<"QuotationItem", 'String'>
    readonly sync: FieldRef<"QuotationItem", 'Boolean'>
    readonly syncedAt: FieldRef<"QuotationItem", 'DateTime'>
    readonly isDeleted: FieldRef<"QuotationItem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * QuotationItem findUnique
   */
  export type QuotationItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * Filter, which QuotationItem to fetch.
     */
    where: QuotationItemWhereUniqueInput
  }

  /**
   * QuotationItem findUniqueOrThrow
   */
  export type QuotationItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * Filter, which QuotationItem to fetch.
     */
    where: QuotationItemWhereUniqueInput
  }

  /**
   * QuotationItem findFirst
   */
  export type QuotationItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * Filter, which QuotationItem to fetch.
     */
    where?: QuotationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationItems to fetch.
     */
    orderBy?: QuotationItemOrderByWithRelationInput | QuotationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuotationItems.
     */
    cursor?: QuotationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuotationItems.
     */
    distinct?: QuotationItemScalarFieldEnum | QuotationItemScalarFieldEnum[]
  }

  /**
   * QuotationItem findFirstOrThrow
   */
  export type QuotationItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * Filter, which QuotationItem to fetch.
     */
    where?: QuotationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationItems to fetch.
     */
    orderBy?: QuotationItemOrderByWithRelationInput | QuotationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuotationItems.
     */
    cursor?: QuotationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuotationItems.
     */
    distinct?: QuotationItemScalarFieldEnum | QuotationItemScalarFieldEnum[]
  }

  /**
   * QuotationItem findMany
   */
  export type QuotationItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * Filter, which QuotationItems to fetch.
     */
    where?: QuotationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationItems to fetch.
     */
    orderBy?: QuotationItemOrderByWithRelationInput | QuotationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuotationItems.
     */
    cursor?: QuotationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationItems.
     */
    skip?: number
    distinct?: QuotationItemScalarFieldEnum | QuotationItemScalarFieldEnum[]
  }

  /**
   * QuotationItem create
   */
  export type QuotationItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * The data needed to create a QuotationItem.
     */
    data: XOR<QuotationItemCreateInput, QuotationItemUncheckedCreateInput>
  }

  /**
   * QuotationItem createMany
   */
  export type QuotationItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuotationItems.
     */
    data: QuotationItemCreateManyInput | QuotationItemCreateManyInput[]
  }

  /**
   * QuotationItem createManyAndReturn
   */
  export type QuotationItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * The data used to create many QuotationItems.
     */
    data: QuotationItemCreateManyInput | QuotationItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuotationItem update
   */
  export type QuotationItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * The data needed to update a QuotationItem.
     */
    data: XOR<QuotationItemUpdateInput, QuotationItemUncheckedUpdateInput>
    /**
     * Choose, which QuotationItem to update.
     */
    where: QuotationItemWhereUniqueInput
  }

  /**
   * QuotationItem updateMany
   */
  export type QuotationItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuotationItems.
     */
    data: XOR<QuotationItemUpdateManyMutationInput, QuotationItemUncheckedUpdateManyInput>
    /**
     * Filter which QuotationItems to update
     */
    where?: QuotationItemWhereInput
    /**
     * Limit how many QuotationItems to update.
     */
    limit?: number
  }

  /**
   * QuotationItem updateManyAndReturn
   */
  export type QuotationItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * The data used to update QuotationItems.
     */
    data: XOR<QuotationItemUpdateManyMutationInput, QuotationItemUncheckedUpdateManyInput>
    /**
     * Filter which QuotationItems to update
     */
    where?: QuotationItemWhereInput
    /**
     * Limit how many QuotationItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuotationItem upsert
   */
  export type QuotationItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * The filter to search for the QuotationItem to update in case it exists.
     */
    where: QuotationItemWhereUniqueInput
    /**
     * In case the QuotationItem found by the `where` argument doesn't exist, create a new QuotationItem with this data.
     */
    create: XOR<QuotationItemCreateInput, QuotationItemUncheckedCreateInput>
    /**
     * In case the QuotationItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuotationItemUpdateInput, QuotationItemUncheckedUpdateInput>
  }

  /**
   * QuotationItem delete
   */
  export type QuotationItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
    /**
     * Filter which QuotationItem to delete.
     */
    where: QuotationItemWhereUniqueInput
  }

  /**
   * QuotationItem deleteMany
   */
  export type QuotationItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuotationItems to delete
     */
    where?: QuotationItemWhereInput
    /**
     * Limit how many QuotationItems to delete.
     */
    limit?: number
  }

  /**
   * QuotationItem.quotation
   */
  export type QuotationItem$quotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quotation
     */
    omit?: QuotationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    where?: QuotationWhereInput
  }

  /**
   * QuotationItem.product
   */
  export type QuotationItem$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * QuotationItem.Warehouses
   */
  export type QuotationItem$WarehousesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouses
     */
    select?: WarehousesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouses
     */
    omit?: WarehousesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehousesInclude<ExtArgs> | null
    where?: WarehousesWhereInput
  }

  /**
   * QuotationItem without action
   */
  export type QuotationItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationItem
     */
    select?: QuotationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuotationItem
     */
    omit?: QuotationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SuperAdminScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    email: 'email',
    password: 'password',
    role: 'role',
    lastLogin: 'lastLogin',
    warehousesId: 'warehousesId',
    sync: 'sync',
    syncedAt: 'syncedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted'
  };

  export type SuperAdminScalarFieldEnum = (typeof SuperAdminScalarFieldEnum)[keyof typeof SuperAdminScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    userName: 'userName',
    phoneNumber: 'phoneNumber',
    password: 'password',
    role: 'role',
    warehousesId: 'warehousesId',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SettingsScalarFieldEnum: {
    setting_id: 'setting_id',
    companyName: 'companyName',
    companyEmail: 'companyEmail',
    phoneNumber: 'phoneNumber',
    websiteURL: 'websiteURL',
    address: 'address',
    logoUrl: 'logoUrl',
    defaultCurrency: 'defaultCurrency',
    taxRate: 'taxRate',
    mode: 'mode',
    itermsPerPage: 'itermsPerPage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


  export const WarehousesScalarFieldEnum: {
    id: 'id',
    warehouseCode: 'warehouseCode',
    name: 'name',
    phoneNumber: 'phoneNumber',
    email: 'email',
    description: 'description',
    address: 'address',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type WarehousesScalarFieldEnum = (typeof WarehousesScalarFieldEnum)[keyof typeof WarehousesScalarFieldEnum]


  export const SaleScalarFieldEnum: {
    id: 'id',
    selectedCustomerId: 'selectedCustomerId',
    taxRate: 'taxRate',
    subTotal: 'subTotal',
    notes: 'notes',
    amountPaid: 'amountPaid',
    grandTotal: 'grandTotal',
    paidAmount: 'paidAmount',
    balance: 'balance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    warehousesId: 'warehousesId',
    invoiceNo: 'invoiceNo',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type SaleScalarFieldEnum = (typeof SaleScalarFieldEnum)[keyof typeof SaleScalarFieldEnum]


  export const SaleItemScalarFieldEnum: {
    id: 'id',
    saleId: 'saleId',
    productId: 'productId',
    productName: 'productName',
    cost: 'cost',
    selectedPrice: 'selectedPrice',
    priceType: 'priceType',
    quantity: 'quantity',
    discount: 'discount',
    total: 'total',
    profit: 'profit',
    warehousesId: 'warehousesId',
    sync: 'sync',
    syncedAt: 'syncedAt',
    customerId: 'customerId',
    isDeleted: 'isDeleted'
  };

  export type SaleItemScalarFieldEnum = (typeof SaleItemScalarFieldEnum)[keyof typeof SaleItemScalarFieldEnum]


  export const PurchaseScalarFieldEnum: {
    id: 'id',
    taxRate: 'taxRate',
    subTotal: 'subTotal',
    notes: 'notes',
    amountPaid: 'amountPaid',
    grandTotal: 'grandTotal',
    paidAmount: 'paidAmount',
    balance: 'balance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    warehousesId: 'warehousesId',
    referenceNo: 'referenceNo',
    sync: 'sync',
    syncedAt: 'syncedAt',
    supplierId: 'supplierId',
    isDeleted: 'isDeleted'
  };

  export type PurchaseScalarFieldEnum = (typeof PurchaseScalarFieldEnum)[keyof typeof PurchaseScalarFieldEnum]


  export const PurchaseItemScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    cost: 'cost',
    productName: 'productName',
    selectedPrice: 'selectedPrice',
    priceType: 'priceType',
    quantity: 'quantity',
    discount: 'discount',
    total: 'total',
    profit: 'profit',
    warehousesId: 'warehousesId',
    sync: 'sync',
    syncedAt: 'syncedAt',
    purchaseId: 'purchaseId',
    customRetailPrice: 'customRetailPrice',
    customWholesalePrice: 'customWholesalePrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted'
  };

  export type PurchaseItemScalarFieldEnum = (typeof PurchaseItemScalarFieldEnum)[keyof typeof PurchaseItemScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    companyName: 'companyName',
    email: 'email',
    address: 'address',
    phone: 'phone',
    warehousesId: 'warehousesId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const SupplierScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    companyName: 'companyName',
    email: 'email',
    address: 'address',
    phone: 'phone',
    warehousesId: 'warehousesId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type SupplierScalarFieldEnum = (typeof SupplierScalarFieldEnum)[keyof typeof SupplierScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    barcode: 'barcode',
    wholeSalePrice: 'wholeSalePrice',
    retailPrice: 'retailPrice',
    cost: 'cost',
    quantity: 'quantity',
    taxRate: 'taxRate',
    unit: 'unit',
    description: 'description',
    warehousesId: 'warehousesId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const PaymentMethodScalarFieldEnum: {
    id: 'id',
    method: 'method',
    amount: 'amount',
    warehousesId: 'warehousesId',
    saleId: 'saleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type PaymentMethodScalarFieldEnum = (typeof PaymentMethodScalarFieldEnum)[keyof typeof PaymentMethodScalarFieldEnum]


  export const ReceiptSettingsScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    businessName: 'businessName',
    address: 'address',
    city: 'city',
    state: 'state',
    country: 'country',
    phone: 'phone',
    email: 'email',
    website: 'website',
    receiptTitle: 'receiptTitle',
    headerMessage: 'headerMessage',
    footerMessage: 'footerMessage',
    showLogo: 'showLogo',
    logoUrl: 'logoUrl',
    showQrCode: 'showQrCode',
    qrCodeContent: 'qrCodeContent',
    customQrContent: 'customQrContent',
    showCustomerInfo: 'showCustomerInfo',
    showCashierInfo: 'showCashierInfo',
    showItemCodes: 'showItemCodes',
    showItemDescriptions: 'showItemDescriptions',
    showTaxBreakdown: 'showTaxBreakdown',
    showPaymentMethods: 'showPaymentMethods',
    showBalance: 'showBalance',
    showTimestamp: 'showTimestamp',
    use24HourFormat: 'use24HourFormat',
    showItemNumbers: 'showItemNumbers',
    showRunningTotal: 'showRunningTotal',
    paperSize: 'paperSize',
    fontSize: 'fontSize',
    printDensity: 'printDensity',
    lineSpacing: 'lineSpacing',
    primaryColor: 'primaryColor',
    accentColor: 'accentColor',
    fontFamily: 'fontFamily',
    printCopyCount: 'printCopyCount',
    autoPrint: 'autoPrint',
    language: 'language',
    currency: 'currency',
    currencySymbol: 'currencySymbol',
    currencyPosition: 'currencyPosition',
    warehousesId: 'warehousesId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type ReceiptSettingsScalarFieldEnum = (typeof ReceiptSettingsScalarFieldEnum)[keyof typeof ReceiptSettingsScalarFieldEnum]


  export const BalancePaymentScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    saleId: 'saleId',
    amount: 'amount',
    paymentMethod: 'paymentMethod',
    receiptNo: 'receiptNo',
    notes: 'notes',
    warehousesId: 'warehousesId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type BalancePaymentScalarFieldEnum = (typeof BalancePaymentScalarFieldEnum)[keyof typeof BalancePaymentScalarFieldEnum]


  export const QuotationScalarFieldEnum: {
    id: 'id',
    selectedCustomerId: 'selectedCustomerId',
    taxRate: 'taxRate',
    subTotal: 'subTotal',
    notes: 'notes',
    grandTotal: 'grandTotal',
    validUntil: 'validUntil',
    status: 'status',
    convertedToSaleId: 'convertedToSaleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    warehousesId: 'warehousesId',
    quotationNo: 'quotationNo',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type QuotationScalarFieldEnum = (typeof QuotationScalarFieldEnum)[keyof typeof QuotationScalarFieldEnum]


  export const QuotationItemScalarFieldEnum: {
    id: 'id',
    quotationId: 'quotationId',
    productId: 'productId',
    productName: 'productName',
    cost: 'cost',
    selectedPrice: 'selectedPrice',
    priceType: 'priceType',
    quantity: 'quantity',
    discount: 'discount',
    total: 'total',
    warehousesId: 'warehousesId',
    sync: 'sync',
    syncedAt: 'syncedAt',
    isDeleted: 'isDeleted'
  };

  export type QuotationItemScalarFieldEnum = (typeof QuotationItemScalarFieldEnum)[keyof typeof QuotationItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'role'
   */
  export type EnumroleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'role'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'mode'
   */
  export type EnummodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'unit'
   */
  export type EnumunitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'unit'>
    
  /**
   * Deep Input Types
   */


  export type superAdminWhereInput = {
    AND?: superAdminWhereInput | superAdminWhereInput[]
    OR?: superAdminWhereInput[]
    NOT?: superAdminWhereInput | superAdminWhereInput[]
    id?: StringFilter<"superAdmin"> | string
    userName?: StringFilter<"superAdmin"> | string
    email?: StringFilter<"superAdmin"> | string
    password?: StringFilter<"superAdmin"> | string
    role?: StringFilter<"superAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"superAdmin"> | Date | string | null
    warehousesId?: StringNullableFilter<"superAdmin"> | string | null
    sync?: BoolFilter<"superAdmin"> | boolean
    syncedAt?: DateTimeNullableFilter<"superAdmin"> | Date | string | null
    createdAt?: DateTimeFilter<"superAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"superAdmin"> | Date | string
    isDeleted?: BoolFilter<"superAdmin"> | boolean
  }

  export type superAdminOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type superAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: superAdminWhereInput | superAdminWhereInput[]
    OR?: superAdminWhereInput[]
    NOT?: superAdminWhereInput | superAdminWhereInput[]
    userName?: StringFilter<"superAdmin"> | string
    password?: StringFilter<"superAdmin"> | string
    role?: StringFilter<"superAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"superAdmin"> | Date | string | null
    warehousesId?: StringNullableFilter<"superAdmin"> | string | null
    sync?: BoolFilter<"superAdmin"> | boolean
    syncedAt?: DateTimeNullableFilter<"superAdmin"> | Date | string | null
    createdAt?: DateTimeFilter<"superAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"superAdmin"> | Date | string
    isDeleted?: BoolFilter<"superAdmin"> | boolean
  }, "id" | "email">

  export type superAdminOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    _count?: superAdminCountOrderByAggregateInput
    _max?: superAdminMaxOrderByAggregateInput
    _min?: superAdminMinOrderByAggregateInput
  }

  export type superAdminScalarWhereWithAggregatesInput = {
    AND?: superAdminScalarWhereWithAggregatesInput | superAdminScalarWhereWithAggregatesInput[]
    OR?: superAdminScalarWhereWithAggregatesInput[]
    NOT?: superAdminScalarWhereWithAggregatesInput | superAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"superAdmin"> | string
    userName?: StringWithAggregatesFilter<"superAdmin"> | string
    email?: StringWithAggregatesFilter<"superAdmin"> | string
    password?: StringWithAggregatesFilter<"superAdmin"> | string
    role?: StringWithAggregatesFilter<"superAdmin"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"superAdmin"> | Date | string | null
    warehousesId?: StringNullableWithAggregatesFilter<"superAdmin"> | string | null
    sync?: BoolWithAggregatesFilter<"superAdmin"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"superAdmin"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"superAdmin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"superAdmin"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"superAdmin"> | boolean
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    userName?: StringFilter<"users"> | string
    phoneNumber?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: EnumroleFilter<"users"> | $Enums.role
    warehousesId?: StringNullableFilter<"users"> | string | null
    lastLogin?: DateTimeNullableFilter<"users"> | Date | string | null
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    sync?: BoolFilter<"users"> | boolean
    syncedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    isDeleted?: BoolFilter<"users"> | boolean
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    warehouses?: WarehousesOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userName?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    email?: StringFilter<"users"> | string
    phoneNumber?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: EnumroleFilter<"users"> | $Enums.role
    warehousesId?: StringNullableFilter<"users"> | string | null
    lastLogin?: DateTimeNullableFilter<"users"> | Date | string | null
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    sync?: BoolFilter<"users"> | boolean
    syncedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    isDeleted?: BoolFilter<"users"> | boolean
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }, "id" | "userName">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    userName?: StringWithAggregatesFilter<"users"> | string
    phoneNumber?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    role?: EnumroleWithAggregatesFilter<"users"> | $Enums.role
    warehousesId?: StringNullableWithAggregatesFilter<"users"> | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    sync?: BoolWithAggregatesFilter<"users"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"users"> | boolean
  }

  export type SettingsWhereInput = {
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    setting_id?: IntFilter<"Settings"> | number
    companyName?: StringFilter<"Settings"> | string
    companyEmail?: StringFilter<"Settings"> | string
    phoneNumber?: StringFilter<"Settings"> | string
    websiteURL?: StringFilter<"Settings"> | string
    address?: StringFilter<"Settings"> | string
    logoUrl?: StringFilter<"Settings"> | string
    defaultCurrency?: StringFilter<"Settings"> | string
    taxRate?: IntFilter<"Settings"> | number
    mode?: EnummodeFilter<"Settings"> | $Enums.mode
    itermsPerPage?: IntFilter<"Settings"> | number
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
    sync?: BoolFilter<"Settings"> | boolean
    syncedAt?: DateTimeNullableFilter<"Settings"> | Date | string | null
    isDeleted?: BoolFilter<"Settings"> | boolean
  }

  export type SettingsOrderByWithRelationInput = {
    setting_id?: SortOrder
    companyName?: SortOrder
    companyEmail?: SortOrder
    phoneNumber?: SortOrder
    websiteURL?: SortOrder
    address?: SortOrder
    logoUrl?: SortOrder
    defaultCurrency?: SortOrder
    taxRate?: SortOrder
    mode?: SortOrder
    itermsPerPage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
  }

  export type SettingsWhereUniqueInput = Prisma.AtLeast<{
    setting_id?: number
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    companyName?: StringFilter<"Settings"> | string
    companyEmail?: StringFilter<"Settings"> | string
    phoneNumber?: StringFilter<"Settings"> | string
    websiteURL?: StringFilter<"Settings"> | string
    address?: StringFilter<"Settings"> | string
    logoUrl?: StringFilter<"Settings"> | string
    defaultCurrency?: StringFilter<"Settings"> | string
    taxRate?: IntFilter<"Settings"> | number
    mode?: EnummodeFilter<"Settings"> | $Enums.mode
    itermsPerPage?: IntFilter<"Settings"> | number
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
    sync?: BoolFilter<"Settings"> | boolean
    syncedAt?: DateTimeNullableFilter<"Settings"> | Date | string | null
    isDeleted?: BoolFilter<"Settings"> | boolean
  }, "setting_id">

  export type SettingsOrderByWithAggregationInput = {
    setting_id?: SortOrder
    companyName?: SortOrder
    companyEmail?: SortOrder
    phoneNumber?: SortOrder
    websiteURL?: SortOrder
    address?: SortOrder
    logoUrl?: SortOrder
    defaultCurrency?: SortOrder
    taxRate?: SortOrder
    mode?: SortOrder
    itermsPerPage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: SettingsCountOrderByAggregateInput
    _avg?: SettingsAvgOrderByAggregateInput
    _max?: SettingsMaxOrderByAggregateInput
    _min?: SettingsMinOrderByAggregateInput
    _sum?: SettingsSumOrderByAggregateInput
  }

  export type SettingsScalarWhereWithAggregatesInput = {
    AND?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    OR?: SettingsScalarWhereWithAggregatesInput[]
    NOT?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    setting_id?: IntWithAggregatesFilter<"Settings"> | number
    companyName?: StringWithAggregatesFilter<"Settings"> | string
    companyEmail?: StringWithAggregatesFilter<"Settings"> | string
    phoneNumber?: StringWithAggregatesFilter<"Settings"> | string
    websiteURL?: StringWithAggregatesFilter<"Settings"> | string
    address?: StringWithAggregatesFilter<"Settings"> | string
    logoUrl?: StringWithAggregatesFilter<"Settings"> | string
    defaultCurrency?: StringWithAggregatesFilter<"Settings"> | string
    taxRate?: IntWithAggregatesFilter<"Settings"> | number
    mode?: EnummodeWithAggregatesFilter<"Settings"> | $Enums.mode
    itermsPerPage?: IntWithAggregatesFilter<"Settings"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    sync?: BoolWithAggregatesFilter<"Settings"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Settings"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Settings"> | boolean
  }

  export type WarehousesWhereInput = {
    AND?: WarehousesWhereInput | WarehousesWhereInput[]
    OR?: WarehousesWhereInput[]
    NOT?: WarehousesWhereInput | WarehousesWhereInput[]
    id?: StringFilter<"Warehouses"> | string
    warehouseCode?: StringFilter<"Warehouses"> | string
    name?: StringFilter<"Warehouses"> | string
    phoneNumber?: StringFilter<"Warehouses"> | string
    email?: StringFilter<"Warehouses"> | string
    description?: StringNullableFilter<"Warehouses"> | string | null
    address?: StringFilter<"Warehouses"> | string
    sync?: BoolFilter<"Warehouses"> | boolean
    syncedAt?: DateTimeNullableFilter<"Warehouses"> | Date | string | null
    isDeleted?: BoolFilter<"Warehouses"> | boolean
    users?: UsersListRelationFilter
    products?: ProductListRelationFilter
    customer?: CustomerListRelationFilter
    saleItem?: SaleItemListRelationFilter
    sale?: SaleListRelationFilter
    paymentMethod?: PaymentMethodListRelationFilter
    purchase?: PurchaseListRelationFilter
    purchaseItem?: PurchaseItemListRelationFilter
    supplier?: SupplierListRelationFilter
    receiptSettings?: ReceiptSettingsListRelationFilter
    balancePayment?: BalancePaymentListRelationFilter
    quotation?: QuotationListRelationFilter
    quotationItem?: QuotationItemListRelationFilter
  }

  export type WarehousesOrderByWithRelationInput = {
    id?: SortOrder
    warehouseCode?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    description?: SortOrderInput | SortOrder
    address?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    users?: usersOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
    customer?: CustomerOrderByRelationAggregateInput
    saleItem?: SaleItemOrderByRelationAggregateInput
    sale?: SaleOrderByRelationAggregateInput
    paymentMethod?: PaymentMethodOrderByRelationAggregateInput
    purchase?: PurchaseOrderByRelationAggregateInput
    purchaseItem?: PurchaseItemOrderByRelationAggregateInput
    supplier?: SupplierOrderByRelationAggregateInput
    receiptSettings?: ReceiptSettingsOrderByRelationAggregateInput
    balancePayment?: BalancePaymentOrderByRelationAggregateInput
    quotation?: QuotationOrderByRelationAggregateInput
    quotationItem?: QuotationItemOrderByRelationAggregateInput
  }

  export type WarehousesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    warehouseCode?: string
    AND?: WarehousesWhereInput | WarehousesWhereInput[]
    OR?: WarehousesWhereInput[]
    NOT?: WarehousesWhereInput | WarehousesWhereInput[]
    name?: StringFilter<"Warehouses"> | string
    phoneNumber?: StringFilter<"Warehouses"> | string
    email?: StringFilter<"Warehouses"> | string
    description?: StringNullableFilter<"Warehouses"> | string | null
    address?: StringFilter<"Warehouses"> | string
    sync?: BoolFilter<"Warehouses"> | boolean
    syncedAt?: DateTimeNullableFilter<"Warehouses"> | Date | string | null
    isDeleted?: BoolFilter<"Warehouses"> | boolean
    users?: UsersListRelationFilter
    products?: ProductListRelationFilter
    customer?: CustomerListRelationFilter
    saleItem?: SaleItemListRelationFilter
    sale?: SaleListRelationFilter
    paymentMethod?: PaymentMethodListRelationFilter
    purchase?: PurchaseListRelationFilter
    purchaseItem?: PurchaseItemListRelationFilter
    supplier?: SupplierListRelationFilter
    receiptSettings?: ReceiptSettingsListRelationFilter
    balancePayment?: BalancePaymentListRelationFilter
    quotation?: QuotationListRelationFilter
    quotationItem?: QuotationItemListRelationFilter
  }, "id" | "warehouseCode">

  export type WarehousesOrderByWithAggregationInput = {
    id?: SortOrder
    warehouseCode?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    description?: SortOrderInput | SortOrder
    address?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: WarehousesCountOrderByAggregateInput
    _max?: WarehousesMaxOrderByAggregateInput
    _min?: WarehousesMinOrderByAggregateInput
  }

  export type WarehousesScalarWhereWithAggregatesInput = {
    AND?: WarehousesScalarWhereWithAggregatesInput | WarehousesScalarWhereWithAggregatesInput[]
    OR?: WarehousesScalarWhereWithAggregatesInput[]
    NOT?: WarehousesScalarWhereWithAggregatesInput | WarehousesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Warehouses"> | string
    warehouseCode?: StringWithAggregatesFilter<"Warehouses"> | string
    name?: StringWithAggregatesFilter<"Warehouses"> | string
    phoneNumber?: StringWithAggregatesFilter<"Warehouses"> | string
    email?: StringWithAggregatesFilter<"Warehouses"> | string
    description?: StringNullableWithAggregatesFilter<"Warehouses"> | string | null
    address?: StringWithAggregatesFilter<"Warehouses"> | string
    sync?: BoolWithAggregatesFilter<"Warehouses"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Warehouses"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Warehouses"> | boolean
  }

  export type SaleWhereInput = {
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    id?: StringFilter<"Sale"> | string
    selectedCustomerId?: StringNullableFilter<"Sale"> | string | null
    taxRate?: FloatFilter<"Sale"> | number
    subTotal?: FloatFilter<"Sale"> | number
    notes?: StringNullableFilter<"Sale"> | string | null
    amountPaid?: FloatNullableFilter<"Sale"> | number | null
    grandTotal?: FloatFilter<"Sale"> | number
    paidAmount?: FloatFilter<"Sale"> | number
    balance?: FloatFilter<"Sale"> | number
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    updatedAt?: DateTimeFilter<"Sale"> | Date | string
    warehousesId?: StringNullableFilter<"Sale"> | string | null
    invoiceNo?: StringFilter<"Sale"> | string
    sync?: BoolFilter<"Sale"> | boolean
    syncedAt?: DateTimeNullableFilter<"Sale"> | Date | string | null
    isDeleted?: BoolFilter<"Sale"> | boolean
    saleItems?: SaleItemListRelationFilter
    selectedCustomer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    paymentMethod?: PaymentMethodListRelationFilter
    balancePayment?: BalancePaymentListRelationFilter
  }

  export type SaleOrderByWithRelationInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrderInput | SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrderInput | SortOrder
    amountPaid?: SortOrderInput | SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    invoiceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    saleItems?: SaleItemOrderByRelationAggregateInput
    selectedCustomer?: CustomerOrderByWithRelationInput
    warehouses?: WarehousesOrderByWithRelationInput
    paymentMethod?: PaymentMethodOrderByRelationAggregateInput
    balancePayment?: BalancePaymentOrderByRelationAggregateInput
  }

  export type SaleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    invoiceNo?: string
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    selectedCustomerId?: StringNullableFilter<"Sale"> | string | null
    taxRate?: FloatFilter<"Sale"> | number
    subTotal?: FloatFilter<"Sale"> | number
    notes?: StringNullableFilter<"Sale"> | string | null
    amountPaid?: FloatNullableFilter<"Sale"> | number | null
    grandTotal?: FloatFilter<"Sale"> | number
    paidAmount?: FloatFilter<"Sale"> | number
    balance?: FloatFilter<"Sale"> | number
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    updatedAt?: DateTimeFilter<"Sale"> | Date | string
    warehousesId?: StringNullableFilter<"Sale"> | string | null
    sync?: BoolFilter<"Sale"> | boolean
    syncedAt?: DateTimeNullableFilter<"Sale"> | Date | string | null
    isDeleted?: BoolFilter<"Sale"> | boolean
    saleItems?: SaleItemListRelationFilter
    selectedCustomer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    paymentMethod?: PaymentMethodListRelationFilter
    balancePayment?: BalancePaymentListRelationFilter
  }, "id" | "invoiceNo">

  export type SaleOrderByWithAggregationInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrderInput | SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrderInput | SortOrder
    amountPaid?: SortOrderInput | SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    invoiceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: SaleCountOrderByAggregateInput
    _avg?: SaleAvgOrderByAggregateInput
    _max?: SaleMaxOrderByAggregateInput
    _min?: SaleMinOrderByAggregateInput
    _sum?: SaleSumOrderByAggregateInput
  }

  export type SaleScalarWhereWithAggregatesInput = {
    AND?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    OR?: SaleScalarWhereWithAggregatesInput[]
    NOT?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sale"> | string
    selectedCustomerId?: StringNullableWithAggregatesFilter<"Sale"> | string | null
    taxRate?: FloatWithAggregatesFilter<"Sale"> | number
    subTotal?: FloatWithAggregatesFilter<"Sale"> | number
    notes?: StringNullableWithAggregatesFilter<"Sale"> | string | null
    amountPaid?: FloatNullableWithAggregatesFilter<"Sale"> | number | null
    grandTotal?: FloatWithAggregatesFilter<"Sale"> | number
    paidAmount?: FloatWithAggregatesFilter<"Sale"> | number
    balance?: FloatWithAggregatesFilter<"Sale"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Sale"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sale"> | Date | string
    warehousesId?: StringNullableWithAggregatesFilter<"Sale"> | string | null
    invoiceNo?: StringWithAggregatesFilter<"Sale"> | string
    sync?: BoolWithAggregatesFilter<"Sale"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Sale"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Sale"> | boolean
  }

  export type SaleItemWhereInput = {
    AND?: SaleItemWhereInput | SaleItemWhereInput[]
    OR?: SaleItemWhereInput[]
    NOT?: SaleItemWhereInput | SaleItemWhereInput[]
    id?: StringFilter<"SaleItem"> | string
    saleId?: StringNullableFilter<"SaleItem"> | string | null
    productId?: StringNullableFilter<"SaleItem"> | string | null
    productName?: StringFilter<"SaleItem"> | string
    cost?: FloatFilter<"SaleItem"> | number
    selectedPrice?: FloatFilter<"SaleItem"> | number
    priceType?: StringFilter<"SaleItem"> | string
    quantity?: IntFilter<"SaleItem"> | number
    discount?: FloatFilter<"SaleItem"> | number
    total?: FloatFilter<"SaleItem"> | number
    profit?: FloatFilter<"SaleItem"> | number
    warehousesId?: StringNullableFilter<"SaleItem"> | string | null
    sync?: BoolFilter<"SaleItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"SaleItem"> | Date | string | null
    customerId?: StringNullableFilter<"SaleItem"> | string | null
    isDeleted?: BoolFilter<"SaleItem"> | boolean
    sale?: XOR<SaleNullableScalarRelationFilter, SaleWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }

  export type SaleItemOrderByWithRelationInput = {
    id?: SortOrder
    saleId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    sale?: SaleOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    Warehouses?: WarehousesOrderByWithRelationInput
    Customer?: CustomerOrderByWithRelationInput
  }

  export type SaleItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SaleItemWhereInput | SaleItemWhereInput[]
    OR?: SaleItemWhereInput[]
    NOT?: SaleItemWhereInput | SaleItemWhereInput[]
    saleId?: StringNullableFilter<"SaleItem"> | string | null
    productId?: StringNullableFilter<"SaleItem"> | string | null
    productName?: StringFilter<"SaleItem"> | string
    cost?: FloatFilter<"SaleItem"> | number
    selectedPrice?: FloatFilter<"SaleItem"> | number
    priceType?: StringFilter<"SaleItem"> | string
    quantity?: IntFilter<"SaleItem"> | number
    discount?: FloatFilter<"SaleItem"> | number
    total?: FloatFilter<"SaleItem"> | number
    profit?: FloatFilter<"SaleItem"> | number
    warehousesId?: StringNullableFilter<"SaleItem"> | string | null
    sync?: BoolFilter<"SaleItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"SaleItem"> | Date | string | null
    customerId?: StringNullableFilter<"SaleItem"> | string | null
    isDeleted?: BoolFilter<"SaleItem"> | boolean
    sale?: XOR<SaleNullableScalarRelationFilter, SaleWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }, "id">

  export type SaleItemOrderByWithAggregationInput = {
    id?: SortOrder
    saleId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: SaleItemCountOrderByAggregateInput
    _avg?: SaleItemAvgOrderByAggregateInput
    _max?: SaleItemMaxOrderByAggregateInput
    _min?: SaleItemMinOrderByAggregateInput
    _sum?: SaleItemSumOrderByAggregateInput
  }

  export type SaleItemScalarWhereWithAggregatesInput = {
    AND?: SaleItemScalarWhereWithAggregatesInput | SaleItemScalarWhereWithAggregatesInput[]
    OR?: SaleItemScalarWhereWithAggregatesInput[]
    NOT?: SaleItemScalarWhereWithAggregatesInput | SaleItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SaleItem"> | string
    saleId?: StringNullableWithAggregatesFilter<"SaleItem"> | string | null
    productId?: StringNullableWithAggregatesFilter<"SaleItem"> | string | null
    productName?: StringWithAggregatesFilter<"SaleItem"> | string
    cost?: FloatWithAggregatesFilter<"SaleItem"> | number
    selectedPrice?: FloatWithAggregatesFilter<"SaleItem"> | number
    priceType?: StringWithAggregatesFilter<"SaleItem"> | string
    quantity?: IntWithAggregatesFilter<"SaleItem"> | number
    discount?: FloatWithAggregatesFilter<"SaleItem"> | number
    total?: FloatWithAggregatesFilter<"SaleItem"> | number
    profit?: FloatWithAggregatesFilter<"SaleItem"> | number
    warehousesId?: StringNullableWithAggregatesFilter<"SaleItem"> | string | null
    sync?: BoolWithAggregatesFilter<"SaleItem"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"SaleItem"> | Date | string | null
    customerId?: StringNullableWithAggregatesFilter<"SaleItem"> | string | null
    isDeleted?: BoolWithAggregatesFilter<"SaleItem"> | boolean
  }

  export type PurchaseWhereInput = {
    AND?: PurchaseWhereInput | PurchaseWhereInput[]
    OR?: PurchaseWhereInput[]
    NOT?: PurchaseWhereInput | PurchaseWhereInput[]
    id?: StringFilter<"Purchase"> | string
    taxRate?: FloatFilter<"Purchase"> | number
    subTotal?: FloatFilter<"Purchase"> | number
    notes?: StringNullableFilter<"Purchase"> | string | null
    amountPaid?: FloatNullableFilter<"Purchase"> | number | null
    grandTotal?: FloatFilter<"Purchase"> | number
    paidAmount?: FloatFilter<"Purchase"> | number
    balance?: FloatFilter<"Purchase"> | number
    createdAt?: DateTimeFilter<"Purchase"> | Date | string
    updatedAt?: DateTimeFilter<"Purchase"> | Date | string
    warehousesId?: StringNullableFilter<"Purchase"> | string | null
    referenceNo?: StringFilter<"Purchase"> | string
    sync?: BoolFilter<"Purchase"> | boolean
    syncedAt?: DateTimeNullableFilter<"Purchase"> | Date | string | null
    supplierId?: StringNullableFilter<"Purchase"> | string | null
    isDeleted?: BoolFilter<"Purchase"> | boolean
    purchaseItem?: PurchaseItemListRelationFilter
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Supplier?: XOR<SupplierNullableScalarRelationFilter, SupplierWhereInput> | null
  }

  export type PurchaseOrderByWithRelationInput = {
    id?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrderInput | SortOrder
    amountPaid?: SortOrderInput | SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    referenceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    supplierId?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    purchaseItem?: PurchaseItemOrderByRelationAggregateInput
    warehouses?: WarehousesOrderByWithRelationInput
    Supplier?: SupplierOrderByWithRelationInput
  }

  export type PurchaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    referenceNo?: string
    AND?: PurchaseWhereInput | PurchaseWhereInput[]
    OR?: PurchaseWhereInput[]
    NOT?: PurchaseWhereInput | PurchaseWhereInput[]
    taxRate?: FloatFilter<"Purchase"> | number
    subTotal?: FloatFilter<"Purchase"> | number
    notes?: StringNullableFilter<"Purchase"> | string | null
    amountPaid?: FloatNullableFilter<"Purchase"> | number | null
    grandTotal?: FloatFilter<"Purchase"> | number
    paidAmount?: FloatFilter<"Purchase"> | number
    balance?: FloatFilter<"Purchase"> | number
    createdAt?: DateTimeFilter<"Purchase"> | Date | string
    updatedAt?: DateTimeFilter<"Purchase"> | Date | string
    warehousesId?: StringNullableFilter<"Purchase"> | string | null
    sync?: BoolFilter<"Purchase"> | boolean
    syncedAt?: DateTimeNullableFilter<"Purchase"> | Date | string | null
    supplierId?: StringNullableFilter<"Purchase"> | string | null
    isDeleted?: BoolFilter<"Purchase"> | boolean
    purchaseItem?: PurchaseItemListRelationFilter
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Supplier?: XOR<SupplierNullableScalarRelationFilter, SupplierWhereInput> | null
  }, "id" | "referenceNo">

  export type PurchaseOrderByWithAggregationInput = {
    id?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrderInput | SortOrder
    amountPaid?: SortOrderInput | SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    referenceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    supplierId?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: PurchaseCountOrderByAggregateInput
    _avg?: PurchaseAvgOrderByAggregateInput
    _max?: PurchaseMaxOrderByAggregateInput
    _min?: PurchaseMinOrderByAggregateInput
    _sum?: PurchaseSumOrderByAggregateInput
  }

  export type PurchaseScalarWhereWithAggregatesInput = {
    AND?: PurchaseScalarWhereWithAggregatesInput | PurchaseScalarWhereWithAggregatesInput[]
    OR?: PurchaseScalarWhereWithAggregatesInput[]
    NOT?: PurchaseScalarWhereWithAggregatesInput | PurchaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Purchase"> | string
    taxRate?: FloatWithAggregatesFilter<"Purchase"> | number
    subTotal?: FloatWithAggregatesFilter<"Purchase"> | number
    notes?: StringNullableWithAggregatesFilter<"Purchase"> | string | null
    amountPaid?: FloatNullableWithAggregatesFilter<"Purchase"> | number | null
    grandTotal?: FloatWithAggregatesFilter<"Purchase"> | number
    paidAmount?: FloatWithAggregatesFilter<"Purchase"> | number
    balance?: FloatWithAggregatesFilter<"Purchase"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Purchase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Purchase"> | Date | string
    warehousesId?: StringNullableWithAggregatesFilter<"Purchase"> | string | null
    referenceNo?: StringWithAggregatesFilter<"Purchase"> | string
    sync?: BoolWithAggregatesFilter<"Purchase"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Purchase"> | Date | string | null
    supplierId?: StringNullableWithAggregatesFilter<"Purchase"> | string | null
    isDeleted?: BoolWithAggregatesFilter<"Purchase"> | boolean
  }

  export type PurchaseItemWhereInput = {
    AND?: PurchaseItemWhereInput | PurchaseItemWhereInput[]
    OR?: PurchaseItemWhereInput[]
    NOT?: PurchaseItemWhereInput | PurchaseItemWhereInput[]
    id?: StringFilter<"PurchaseItem"> | string
    productId?: StringNullableFilter<"PurchaseItem"> | string | null
    cost?: FloatFilter<"PurchaseItem"> | number
    productName?: StringNullableFilter<"PurchaseItem"> | string | null
    selectedPrice?: FloatFilter<"PurchaseItem"> | number
    priceType?: StringFilter<"PurchaseItem"> | string
    quantity?: IntFilter<"PurchaseItem"> | number
    discount?: FloatFilter<"PurchaseItem"> | number
    total?: FloatFilter<"PurchaseItem"> | number
    profit?: FloatFilter<"PurchaseItem"> | number
    warehousesId?: StringNullableFilter<"PurchaseItem"> | string | null
    sync?: BoolFilter<"PurchaseItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"PurchaseItem"> | Date | string | null
    purchaseId?: StringNullableFilter<"PurchaseItem"> | string | null
    customRetailPrice?: FloatNullableFilter<"PurchaseItem"> | number | null
    customWholesalePrice?: FloatNullableFilter<"PurchaseItem"> | number | null
    createdAt?: DateTimeFilter<"PurchaseItem"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseItem"> | Date | string
    isDeleted?: BoolFilter<"PurchaseItem"> | boolean
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Purchase?: XOR<PurchaseNullableScalarRelationFilter, PurchaseWhereInput> | null
  }

  export type PurchaseItemOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    cost?: SortOrder
    productName?: SortOrderInput | SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    purchaseId?: SortOrderInput | SortOrder
    customRetailPrice?: SortOrderInput | SortOrder
    customWholesalePrice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    product?: ProductOrderByWithRelationInput
    Warehouses?: WarehousesOrderByWithRelationInput
    Purchase?: PurchaseOrderByWithRelationInput
  }

  export type PurchaseItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PurchaseItemWhereInput | PurchaseItemWhereInput[]
    OR?: PurchaseItemWhereInput[]
    NOT?: PurchaseItemWhereInput | PurchaseItemWhereInput[]
    productId?: StringNullableFilter<"PurchaseItem"> | string | null
    cost?: FloatFilter<"PurchaseItem"> | number
    productName?: StringNullableFilter<"PurchaseItem"> | string | null
    selectedPrice?: FloatFilter<"PurchaseItem"> | number
    priceType?: StringFilter<"PurchaseItem"> | string
    quantity?: IntFilter<"PurchaseItem"> | number
    discount?: FloatFilter<"PurchaseItem"> | number
    total?: FloatFilter<"PurchaseItem"> | number
    profit?: FloatFilter<"PurchaseItem"> | number
    warehousesId?: StringNullableFilter<"PurchaseItem"> | string | null
    sync?: BoolFilter<"PurchaseItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"PurchaseItem"> | Date | string | null
    purchaseId?: StringNullableFilter<"PurchaseItem"> | string | null
    customRetailPrice?: FloatNullableFilter<"PurchaseItem"> | number | null
    customWholesalePrice?: FloatNullableFilter<"PurchaseItem"> | number | null
    createdAt?: DateTimeFilter<"PurchaseItem"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseItem"> | Date | string
    isDeleted?: BoolFilter<"PurchaseItem"> | boolean
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Purchase?: XOR<PurchaseNullableScalarRelationFilter, PurchaseWhereInput> | null
  }, "id">

  export type PurchaseItemOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrderInput | SortOrder
    cost?: SortOrder
    productName?: SortOrderInput | SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    purchaseId?: SortOrderInput | SortOrder
    customRetailPrice?: SortOrderInput | SortOrder
    customWholesalePrice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    _count?: PurchaseItemCountOrderByAggregateInput
    _avg?: PurchaseItemAvgOrderByAggregateInput
    _max?: PurchaseItemMaxOrderByAggregateInput
    _min?: PurchaseItemMinOrderByAggregateInput
    _sum?: PurchaseItemSumOrderByAggregateInput
  }

  export type PurchaseItemScalarWhereWithAggregatesInput = {
    AND?: PurchaseItemScalarWhereWithAggregatesInput | PurchaseItemScalarWhereWithAggregatesInput[]
    OR?: PurchaseItemScalarWhereWithAggregatesInput[]
    NOT?: PurchaseItemScalarWhereWithAggregatesInput | PurchaseItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PurchaseItem"> | string
    productId?: StringNullableWithAggregatesFilter<"PurchaseItem"> | string | null
    cost?: FloatWithAggregatesFilter<"PurchaseItem"> | number
    productName?: StringNullableWithAggregatesFilter<"PurchaseItem"> | string | null
    selectedPrice?: FloatWithAggregatesFilter<"PurchaseItem"> | number
    priceType?: StringWithAggregatesFilter<"PurchaseItem"> | string
    quantity?: IntWithAggregatesFilter<"PurchaseItem"> | number
    discount?: FloatWithAggregatesFilter<"PurchaseItem"> | number
    total?: FloatWithAggregatesFilter<"PurchaseItem"> | number
    profit?: FloatWithAggregatesFilter<"PurchaseItem"> | number
    warehousesId?: StringNullableWithAggregatesFilter<"PurchaseItem"> | string | null
    sync?: BoolWithAggregatesFilter<"PurchaseItem"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"PurchaseItem"> | Date | string | null
    purchaseId?: StringNullableWithAggregatesFilter<"PurchaseItem"> | string | null
    customRetailPrice?: FloatNullableWithAggregatesFilter<"PurchaseItem"> | number | null
    customWholesalePrice?: FloatNullableWithAggregatesFilter<"PurchaseItem"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PurchaseItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PurchaseItem"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"PurchaseItem"> | boolean
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    type?: StringFilter<"Customer"> | string
    companyName?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    phone?: StringFilter<"Customer"> | string
    warehousesId?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    sync?: BoolFilter<"Customer"> | boolean
    syncedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    isDeleted?: BoolFilter<"Customer"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Sale?: SaleListRelationFilter
    saleItem?: SaleItemListRelationFilter
    balancePayment?: BalancePaymentListRelationFilter
    quotation?: QuotationListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    Warehouses?: WarehousesOrderByWithRelationInput
    Sale?: SaleOrderByRelationAggregateInput
    saleItem?: SaleItemOrderByRelationAggregateInput
    balancePayment?: BalancePaymentOrderByRelationAggregateInput
    quotation?: QuotationOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    type?: StringFilter<"Customer"> | string
    companyName?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    phone?: StringFilter<"Customer"> | string
    warehousesId?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    sync?: BoolFilter<"Customer"> | boolean
    syncedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    isDeleted?: BoolFilter<"Customer"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Sale?: SaleListRelationFilter
    saleItem?: SaleItemListRelationFilter
    balancePayment?: BalancePaymentListRelationFilter
    quotation?: QuotationListRelationFilter
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    name?: StringWithAggregatesFilter<"Customer"> | string
    type?: StringWithAggregatesFilter<"Customer"> | string
    companyName?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    phone?: StringWithAggregatesFilter<"Customer"> | string
    warehousesId?: StringWithAggregatesFilter<"Customer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    sync?: BoolWithAggregatesFilter<"Customer"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Customer"> | boolean
  }

  export type SupplierWhereInput = {
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    id?: StringFilter<"Supplier"> | string
    name?: StringFilter<"Supplier"> | string
    type?: StringFilter<"Supplier"> | string
    companyName?: StringNullableFilter<"Supplier"> | string | null
    email?: StringFilter<"Supplier"> | string
    address?: StringFilter<"Supplier"> | string
    phone?: StringFilter<"Supplier"> | string
    warehousesId?: StringFilter<"Supplier"> | string
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    sync?: BoolFilter<"Supplier"> | boolean
    syncedAt?: DateTimeNullableFilter<"Supplier"> | Date | string | null
    isDeleted?: BoolFilter<"Supplier"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    purchase?: PurchaseListRelationFilter
  }

  export type SupplierOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrderInput | SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    Warehouses?: WarehousesOrderByWithRelationInput
    purchase?: PurchaseOrderByRelationAggregateInput
  }

  export type SupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    name?: StringFilter<"Supplier"> | string
    type?: StringFilter<"Supplier"> | string
    companyName?: StringNullableFilter<"Supplier"> | string | null
    email?: StringFilter<"Supplier"> | string
    address?: StringFilter<"Supplier"> | string
    phone?: StringFilter<"Supplier"> | string
    warehousesId?: StringFilter<"Supplier"> | string
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    sync?: BoolFilter<"Supplier"> | boolean
    syncedAt?: DateTimeNullableFilter<"Supplier"> | Date | string | null
    isDeleted?: BoolFilter<"Supplier"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    purchase?: PurchaseListRelationFilter
  }, "id">

  export type SupplierOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrderInput | SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: SupplierCountOrderByAggregateInput
    _max?: SupplierMaxOrderByAggregateInput
    _min?: SupplierMinOrderByAggregateInput
  }

  export type SupplierScalarWhereWithAggregatesInput = {
    AND?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    OR?: SupplierScalarWhereWithAggregatesInput[]
    NOT?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Supplier"> | string
    name?: StringWithAggregatesFilter<"Supplier"> | string
    type?: StringWithAggregatesFilter<"Supplier"> | string
    companyName?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    email?: StringWithAggregatesFilter<"Supplier"> | string
    address?: StringWithAggregatesFilter<"Supplier"> | string
    phone?: StringWithAggregatesFilter<"Supplier"> | string
    warehousesId?: StringWithAggregatesFilter<"Supplier"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    sync?: BoolWithAggregatesFilter<"Supplier"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Supplier"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Supplier"> | boolean
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    barcode?: StringFilter<"Product"> | string
    wholeSalePrice?: FloatFilter<"Product"> | number
    retailPrice?: FloatFilter<"Product"> | number
    cost?: FloatFilter<"Product"> | number
    quantity?: IntFilter<"Product"> | number
    taxRate?: IntFilter<"Product"> | number
    unit?: EnumunitFilter<"Product"> | $Enums.unit
    description?: StringFilter<"Product"> | string
    warehousesId?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    sync?: BoolFilter<"Product"> | boolean
    syncedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    isDeleted?: BoolFilter<"Product"> | boolean
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    SaleItem?: SaleItemListRelationFilter
    purchaseItem?: PurchaseItemListRelationFilter
    quotationItem?: QuotationItemListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    barcode?: SortOrder
    wholeSalePrice?: SortOrder
    retailPrice?: SortOrder
    cost?: SortOrder
    quantity?: SortOrder
    taxRate?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    warehouses?: WarehousesOrderByWithRelationInput
    SaleItem?: SaleItemOrderByRelationAggregateInput
    purchaseItem?: PurchaseItemOrderByRelationAggregateInput
    quotationItem?: QuotationItemOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    barcode?: StringFilter<"Product"> | string
    wholeSalePrice?: FloatFilter<"Product"> | number
    retailPrice?: FloatFilter<"Product"> | number
    cost?: FloatFilter<"Product"> | number
    quantity?: IntFilter<"Product"> | number
    taxRate?: IntFilter<"Product"> | number
    unit?: EnumunitFilter<"Product"> | $Enums.unit
    description?: StringFilter<"Product"> | string
    warehousesId?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    sync?: BoolFilter<"Product"> | boolean
    syncedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    isDeleted?: BoolFilter<"Product"> | boolean
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    SaleItem?: SaleItemListRelationFilter
    purchaseItem?: PurchaseItemListRelationFilter
    quotationItem?: QuotationItemListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    barcode?: SortOrder
    wholeSalePrice?: SortOrder
    retailPrice?: SortOrder
    cost?: SortOrder
    quantity?: SortOrder
    taxRate?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    barcode?: StringWithAggregatesFilter<"Product"> | string
    wholeSalePrice?: FloatWithAggregatesFilter<"Product"> | number
    retailPrice?: FloatWithAggregatesFilter<"Product"> | number
    cost?: FloatWithAggregatesFilter<"Product"> | number
    quantity?: IntWithAggregatesFilter<"Product"> | number
    taxRate?: IntWithAggregatesFilter<"Product"> | number
    unit?: EnumunitWithAggregatesFilter<"Product"> | $Enums.unit
    description?: StringWithAggregatesFilter<"Product"> | string
    warehousesId?: StringNullableWithAggregatesFilter<"Product"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    sync?: BoolWithAggregatesFilter<"Product"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Product"> | boolean
  }

  export type PaymentMethodWhereInput = {
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    id?: StringFilter<"PaymentMethod"> | string
    method?: StringFilter<"PaymentMethod"> | string
    amount?: IntFilter<"PaymentMethod"> | number
    warehousesId?: StringNullableFilter<"PaymentMethod"> | string | null
    saleId?: StringNullableFilter<"PaymentMethod"> | string | null
    createdAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    sync?: BoolFilter<"PaymentMethod"> | boolean
    syncedAt?: DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
    isDeleted?: BoolFilter<"PaymentMethod"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Sale?: XOR<SaleNullableScalarRelationFilter, SaleWhereInput> | null
  }

  export type PaymentMethodOrderByWithRelationInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    saleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    Warehouses?: WarehousesOrderByWithRelationInput
    Sale?: SaleOrderByWithRelationInput
  }

  export type PaymentMethodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    method?: StringFilter<"PaymentMethod"> | string
    amount?: IntFilter<"PaymentMethod"> | number
    warehousesId?: StringNullableFilter<"PaymentMethod"> | string | null
    saleId?: StringNullableFilter<"PaymentMethod"> | string | null
    createdAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    sync?: BoolFilter<"PaymentMethod"> | boolean
    syncedAt?: DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
    isDeleted?: BoolFilter<"PaymentMethod"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
    Sale?: XOR<SaleNullableScalarRelationFilter, SaleWhereInput> | null
  }, "id">

  export type PaymentMethodOrderByWithAggregationInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    saleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: PaymentMethodCountOrderByAggregateInput
    _avg?: PaymentMethodAvgOrderByAggregateInput
    _max?: PaymentMethodMaxOrderByAggregateInput
    _min?: PaymentMethodMinOrderByAggregateInput
    _sum?: PaymentMethodSumOrderByAggregateInput
  }

  export type PaymentMethodScalarWhereWithAggregatesInput = {
    AND?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    OR?: PaymentMethodScalarWhereWithAggregatesInput[]
    NOT?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentMethod"> | string
    method?: StringWithAggregatesFilter<"PaymentMethod"> | string
    amount?: IntWithAggregatesFilter<"PaymentMethod"> | number
    warehousesId?: StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
    saleId?: StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PaymentMethod"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentMethod"> | Date | string
    sync?: BoolWithAggregatesFilter<"PaymentMethod"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"PaymentMethod"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"PaymentMethod"> | boolean
  }

  export type ReceiptSettingsWhereInput = {
    AND?: ReceiptSettingsWhereInput | ReceiptSettingsWhereInput[]
    OR?: ReceiptSettingsWhereInput[]
    NOT?: ReceiptSettingsWhereInput | ReceiptSettingsWhereInput[]
    id?: StringFilter<"ReceiptSettings"> | string
    companyName?: StringFilter<"ReceiptSettings"> | string
    businessName?: StringFilter<"ReceiptSettings"> | string
    address?: StringFilter<"ReceiptSettings"> | string
    city?: StringFilter<"ReceiptSettings"> | string
    state?: StringFilter<"ReceiptSettings"> | string
    country?: StringFilter<"ReceiptSettings"> | string
    phone?: StringFilter<"ReceiptSettings"> | string
    email?: StringFilter<"ReceiptSettings"> | string
    website?: StringFilter<"ReceiptSettings"> | string
    receiptTitle?: StringNullableFilter<"ReceiptSettings"> | string | null
    headerMessage?: StringNullableFilter<"ReceiptSettings"> | string | null
    footerMessage?: StringNullableFilter<"ReceiptSettings"> | string | null
    showLogo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    logoUrl?: StringNullableFilter<"ReceiptSettings"> | string | null
    showQrCode?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    qrCodeContent?: StringNullableFilter<"ReceiptSettings"> | string | null
    customQrContent?: StringNullableFilter<"ReceiptSettings"> | string | null
    showCustomerInfo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showCashierInfo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemCodes?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemDescriptions?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showTaxBreakdown?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showPaymentMethods?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showBalance?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showTimestamp?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    use24HourFormat?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemNumbers?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showRunningTotal?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    paperSize?: StringNullableFilter<"ReceiptSettings"> | string | null
    fontSize?: StringNullableFilter<"ReceiptSettings"> | string | null
    printDensity?: StringNullableFilter<"ReceiptSettings"> | string | null
    lineSpacing?: StringNullableFilter<"ReceiptSettings"> | string | null
    primaryColor?: StringNullableFilter<"ReceiptSettings"> | string | null
    accentColor?: StringNullableFilter<"ReceiptSettings"> | string | null
    fontFamily?: StringNullableFilter<"ReceiptSettings"> | string | null
    printCopyCount?: IntNullableFilter<"ReceiptSettings"> | number | null
    autoPrint?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    language?: StringNullableFilter<"ReceiptSettings"> | string | null
    currency?: StringNullableFilter<"ReceiptSettings"> | string | null
    currencySymbol?: StringNullableFilter<"ReceiptSettings"> | string | null
    currencyPosition?: StringNullableFilter<"ReceiptSettings"> | string | null
    warehousesId?: StringFilter<"ReceiptSettings"> | string
    createdAt?: DateTimeFilter<"ReceiptSettings"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptSettings"> | Date | string
    sync?: BoolFilter<"ReceiptSettings"> | boolean
    syncedAt?: DateTimeNullableFilter<"ReceiptSettings"> | Date | string | null
    isDeleted?: BoolFilter<"ReceiptSettings"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }

  export type ReceiptSettingsOrderByWithRelationInput = {
    id?: SortOrder
    companyName?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    receiptTitle?: SortOrderInput | SortOrder
    headerMessage?: SortOrderInput | SortOrder
    footerMessage?: SortOrderInput | SortOrder
    showLogo?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    showQrCode?: SortOrderInput | SortOrder
    qrCodeContent?: SortOrderInput | SortOrder
    customQrContent?: SortOrderInput | SortOrder
    showCustomerInfo?: SortOrderInput | SortOrder
    showCashierInfo?: SortOrderInput | SortOrder
    showItemCodes?: SortOrderInput | SortOrder
    showItemDescriptions?: SortOrderInput | SortOrder
    showTaxBreakdown?: SortOrderInput | SortOrder
    showPaymentMethods?: SortOrderInput | SortOrder
    showBalance?: SortOrderInput | SortOrder
    showTimestamp?: SortOrderInput | SortOrder
    use24HourFormat?: SortOrderInput | SortOrder
    showItemNumbers?: SortOrderInput | SortOrder
    showRunningTotal?: SortOrderInput | SortOrder
    paperSize?: SortOrderInput | SortOrder
    fontSize?: SortOrderInput | SortOrder
    printDensity?: SortOrderInput | SortOrder
    lineSpacing?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    accentColor?: SortOrderInput | SortOrder
    fontFamily?: SortOrderInput | SortOrder
    printCopyCount?: SortOrderInput | SortOrder
    autoPrint?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    currencySymbol?: SortOrderInput | SortOrder
    currencyPosition?: SortOrderInput | SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    Warehouses?: WarehousesOrderByWithRelationInput
  }

  export type ReceiptSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    warehousesId?: string
    AND?: ReceiptSettingsWhereInput | ReceiptSettingsWhereInput[]
    OR?: ReceiptSettingsWhereInput[]
    NOT?: ReceiptSettingsWhereInput | ReceiptSettingsWhereInput[]
    companyName?: StringFilter<"ReceiptSettings"> | string
    businessName?: StringFilter<"ReceiptSettings"> | string
    address?: StringFilter<"ReceiptSettings"> | string
    city?: StringFilter<"ReceiptSettings"> | string
    state?: StringFilter<"ReceiptSettings"> | string
    country?: StringFilter<"ReceiptSettings"> | string
    phone?: StringFilter<"ReceiptSettings"> | string
    email?: StringFilter<"ReceiptSettings"> | string
    website?: StringFilter<"ReceiptSettings"> | string
    receiptTitle?: StringNullableFilter<"ReceiptSettings"> | string | null
    headerMessage?: StringNullableFilter<"ReceiptSettings"> | string | null
    footerMessage?: StringNullableFilter<"ReceiptSettings"> | string | null
    showLogo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    logoUrl?: StringNullableFilter<"ReceiptSettings"> | string | null
    showQrCode?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    qrCodeContent?: StringNullableFilter<"ReceiptSettings"> | string | null
    customQrContent?: StringNullableFilter<"ReceiptSettings"> | string | null
    showCustomerInfo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showCashierInfo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemCodes?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemDescriptions?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showTaxBreakdown?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showPaymentMethods?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showBalance?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showTimestamp?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    use24HourFormat?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemNumbers?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showRunningTotal?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    paperSize?: StringNullableFilter<"ReceiptSettings"> | string | null
    fontSize?: StringNullableFilter<"ReceiptSettings"> | string | null
    printDensity?: StringNullableFilter<"ReceiptSettings"> | string | null
    lineSpacing?: StringNullableFilter<"ReceiptSettings"> | string | null
    primaryColor?: StringNullableFilter<"ReceiptSettings"> | string | null
    accentColor?: StringNullableFilter<"ReceiptSettings"> | string | null
    fontFamily?: StringNullableFilter<"ReceiptSettings"> | string | null
    printCopyCount?: IntNullableFilter<"ReceiptSettings"> | number | null
    autoPrint?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    language?: StringNullableFilter<"ReceiptSettings"> | string | null
    currency?: StringNullableFilter<"ReceiptSettings"> | string | null
    currencySymbol?: StringNullableFilter<"ReceiptSettings"> | string | null
    currencyPosition?: StringNullableFilter<"ReceiptSettings"> | string | null
    createdAt?: DateTimeFilter<"ReceiptSettings"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptSettings"> | Date | string
    sync?: BoolFilter<"ReceiptSettings"> | boolean
    syncedAt?: DateTimeNullableFilter<"ReceiptSettings"> | Date | string | null
    isDeleted?: BoolFilter<"ReceiptSettings"> | boolean
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }, "id" | "warehousesId">

  export type ReceiptSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    receiptTitle?: SortOrderInput | SortOrder
    headerMessage?: SortOrderInput | SortOrder
    footerMessage?: SortOrderInput | SortOrder
    showLogo?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    showQrCode?: SortOrderInput | SortOrder
    qrCodeContent?: SortOrderInput | SortOrder
    customQrContent?: SortOrderInput | SortOrder
    showCustomerInfo?: SortOrderInput | SortOrder
    showCashierInfo?: SortOrderInput | SortOrder
    showItemCodes?: SortOrderInput | SortOrder
    showItemDescriptions?: SortOrderInput | SortOrder
    showTaxBreakdown?: SortOrderInput | SortOrder
    showPaymentMethods?: SortOrderInput | SortOrder
    showBalance?: SortOrderInput | SortOrder
    showTimestamp?: SortOrderInput | SortOrder
    use24HourFormat?: SortOrderInput | SortOrder
    showItemNumbers?: SortOrderInput | SortOrder
    showRunningTotal?: SortOrderInput | SortOrder
    paperSize?: SortOrderInput | SortOrder
    fontSize?: SortOrderInput | SortOrder
    printDensity?: SortOrderInput | SortOrder
    lineSpacing?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    accentColor?: SortOrderInput | SortOrder
    fontFamily?: SortOrderInput | SortOrder
    printCopyCount?: SortOrderInput | SortOrder
    autoPrint?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    currencySymbol?: SortOrderInput | SortOrder
    currencyPosition?: SortOrderInput | SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: ReceiptSettingsCountOrderByAggregateInput
    _avg?: ReceiptSettingsAvgOrderByAggregateInput
    _max?: ReceiptSettingsMaxOrderByAggregateInput
    _min?: ReceiptSettingsMinOrderByAggregateInput
    _sum?: ReceiptSettingsSumOrderByAggregateInput
  }

  export type ReceiptSettingsScalarWhereWithAggregatesInput = {
    AND?: ReceiptSettingsScalarWhereWithAggregatesInput | ReceiptSettingsScalarWhereWithAggregatesInput[]
    OR?: ReceiptSettingsScalarWhereWithAggregatesInput[]
    NOT?: ReceiptSettingsScalarWhereWithAggregatesInput | ReceiptSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    companyName?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    businessName?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    address?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    city?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    state?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    country?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    phone?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    email?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    website?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    receiptTitle?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    headerMessage?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    footerMessage?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    showLogo?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    logoUrl?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    showQrCode?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    qrCodeContent?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    customQrContent?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    showCustomerInfo?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showCashierInfo?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showItemCodes?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showItemDescriptions?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showTaxBreakdown?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showPaymentMethods?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showBalance?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showTimestamp?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    use24HourFormat?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showItemNumbers?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    showRunningTotal?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    paperSize?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    fontSize?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    printDensity?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    lineSpacing?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    primaryColor?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    accentColor?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    fontFamily?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    printCopyCount?: IntNullableWithAggregatesFilter<"ReceiptSettings"> | number | null
    autoPrint?: BoolNullableWithAggregatesFilter<"ReceiptSettings"> | boolean | null
    language?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    currency?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    currencySymbol?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    currencyPosition?: StringNullableWithAggregatesFilter<"ReceiptSettings"> | string | null
    warehousesId?: StringWithAggregatesFilter<"ReceiptSettings"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReceiptSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReceiptSettings"> | Date | string
    sync?: BoolWithAggregatesFilter<"ReceiptSettings"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"ReceiptSettings"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"ReceiptSettings"> | boolean
  }

  export type BalancePaymentWhereInput = {
    AND?: BalancePaymentWhereInput | BalancePaymentWhereInput[]
    OR?: BalancePaymentWhereInput[]
    NOT?: BalancePaymentWhereInput | BalancePaymentWhereInput[]
    id?: StringFilter<"BalancePayment"> | string
    customerId?: StringFilter<"BalancePayment"> | string
    saleId?: StringNullableFilter<"BalancePayment"> | string | null
    amount?: FloatFilter<"BalancePayment"> | number
    paymentMethod?: StringFilter<"BalancePayment"> | string
    receiptNo?: StringFilter<"BalancePayment"> | string
    notes?: StringNullableFilter<"BalancePayment"> | string | null
    warehousesId?: StringNullableFilter<"BalancePayment"> | string | null
    createdAt?: DateTimeFilter<"BalancePayment"> | Date | string
    updatedAt?: DateTimeFilter<"BalancePayment"> | Date | string
    sync?: BoolFilter<"BalancePayment"> | boolean
    syncedAt?: DateTimeNullableFilter<"BalancePayment"> | Date | string | null
    isDeleted?: BoolFilter<"BalancePayment"> | boolean
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    sale?: XOR<SaleNullableScalarRelationFilter, SaleWhereInput> | null
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }

  export type BalancePaymentOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrderInput | SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    receiptNo?: SortOrder
    notes?: SortOrderInput | SortOrder
    warehousesId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    sale?: SaleOrderByWithRelationInput
    warehouses?: WarehousesOrderByWithRelationInput
  }

  export type BalancePaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    receiptNo?: string
    AND?: BalancePaymentWhereInput | BalancePaymentWhereInput[]
    OR?: BalancePaymentWhereInput[]
    NOT?: BalancePaymentWhereInput | BalancePaymentWhereInput[]
    customerId?: StringFilter<"BalancePayment"> | string
    saleId?: StringNullableFilter<"BalancePayment"> | string | null
    amount?: FloatFilter<"BalancePayment"> | number
    paymentMethod?: StringFilter<"BalancePayment"> | string
    notes?: StringNullableFilter<"BalancePayment"> | string | null
    warehousesId?: StringNullableFilter<"BalancePayment"> | string | null
    createdAt?: DateTimeFilter<"BalancePayment"> | Date | string
    updatedAt?: DateTimeFilter<"BalancePayment"> | Date | string
    sync?: BoolFilter<"BalancePayment"> | boolean
    syncedAt?: DateTimeNullableFilter<"BalancePayment"> | Date | string | null
    isDeleted?: BoolFilter<"BalancePayment"> | boolean
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    sale?: XOR<SaleNullableScalarRelationFilter, SaleWhereInput> | null
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }, "id" | "receiptNo">

  export type BalancePaymentOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrderInput | SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    receiptNo?: SortOrder
    notes?: SortOrderInput | SortOrder
    warehousesId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: BalancePaymentCountOrderByAggregateInput
    _avg?: BalancePaymentAvgOrderByAggregateInput
    _max?: BalancePaymentMaxOrderByAggregateInput
    _min?: BalancePaymentMinOrderByAggregateInput
    _sum?: BalancePaymentSumOrderByAggregateInput
  }

  export type BalancePaymentScalarWhereWithAggregatesInput = {
    AND?: BalancePaymentScalarWhereWithAggregatesInput | BalancePaymentScalarWhereWithAggregatesInput[]
    OR?: BalancePaymentScalarWhereWithAggregatesInput[]
    NOT?: BalancePaymentScalarWhereWithAggregatesInput | BalancePaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BalancePayment"> | string
    customerId?: StringWithAggregatesFilter<"BalancePayment"> | string
    saleId?: StringNullableWithAggregatesFilter<"BalancePayment"> | string | null
    amount?: FloatWithAggregatesFilter<"BalancePayment"> | number
    paymentMethod?: StringWithAggregatesFilter<"BalancePayment"> | string
    receiptNo?: StringWithAggregatesFilter<"BalancePayment"> | string
    notes?: StringNullableWithAggregatesFilter<"BalancePayment"> | string | null
    warehousesId?: StringNullableWithAggregatesFilter<"BalancePayment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BalancePayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BalancePayment"> | Date | string
    sync?: BoolWithAggregatesFilter<"BalancePayment"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"BalancePayment"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"BalancePayment"> | boolean
  }

  export type QuotationWhereInput = {
    AND?: QuotationWhereInput | QuotationWhereInput[]
    OR?: QuotationWhereInput[]
    NOT?: QuotationWhereInput | QuotationWhereInput[]
    id?: StringFilter<"Quotation"> | string
    selectedCustomerId?: StringNullableFilter<"Quotation"> | string | null
    taxRate?: FloatFilter<"Quotation"> | number
    subTotal?: FloatFilter<"Quotation"> | number
    notes?: StringNullableFilter<"Quotation"> | string | null
    grandTotal?: FloatFilter<"Quotation"> | number
    validUntil?: DateTimeNullableFilter<"Quotation"> | Date | string | null
    status?: StringFilter<"Quotation"> | string
    convertedToSaleId?: StringNullableFilter<"Quotation"> | string | null
    createdAt?: DateTimeFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeFilter<"Quotation"> | Date | string
    warehousesId?: StringNullableFilter<"Quotation"> | string | null
    quotationNo?: StringFilter<"Quotation"> | string
    sync?: BoolFilter<"Quotation"> | boolean
    syncedAt?: DateTimeNullableFilter<"Quotation"> | Date | string | null
    isDeleted?: BoolFilter<"Quotation"> | boolean
    quotationItems?: QuotationItemListRelationFilter
    selectedCustomer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }

  export type QuotationOrderByWithRelationInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrderInput | SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrderInput | SortOrder
    grandTotal?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    status?: SortOrder
    convertedToSaleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    quotationNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    quotationItems?: QuotationItemOrderByRelationAggregateInput
    selectedCustomer?: CustomerOrderByWithRelationInput
    warehouses?: WarehousesOrderByWithRelationInput
  }

  export type QuotationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    quotationNo?: string
    AND?: QuotationWhereInput | QuotationWhereInput[]
    OR?: QuotationWhereInput[]
    NOT?: QuotationWhereInput | QuotationWhereInput[]
    selectedCustomerId?: StringNullableFilter<"Quotation"> | string | null
    taxRate?: FloatFilter<"Quotation"> | number
    subTotal?: FloatFilter<"Quotation"> | number
    notes?: StringNullableFilter<"Quotation"> | string | null
    grandTotal?: FloatFilter<"Quotation"> | number
    validUntil?: DateTimeNullableFilter<"Quotation"> | Date | string | null
    status?: StringFilter<"Quotation"> | string
    convertedToSaleId?: StringNullableFilter<"Quotation"> | string | null
    createdAt?: DateTimeFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeFilter<"Quotation"> | Date | string
    warehousesId?: StringNullableFilter<"Quotation"> | string | null
    sync?: BoolFilter<"Quotation"> | boolean
    syncedAt?: DateTimeNullableFilter<"Quotation"> | Date | string | null
    isDeleted?: BoolFilter<"Quotation"> | boolean
    quotationItems?: QuotationItemListRelationFilter
    selectedCustomer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }, "id" | "quotationNo">

  export type QuotationOrderByWithAggregationInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrderInput | SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrderInput | SortOrder
    grandTotal?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    status?: SortOrder
    convertedToSaleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    quotationNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: QuotationCountOrderByAggregateInput
    _avg?: QuotationAvgOrderByAggregateInput
    _max?: QuotationMaxOrderByAggregateInput
    _min?: QuotationMinOrderByAggregateInput
    _sum?: QuotationSumOrderByAggregateInput
  }

  export type QuotationScalarWhereWithAggregatesInput = {
    AND?: QuotationScalarWhereWithAggregatesInput | QuotationScalarWhereWithAggregatesInput[]
    OR?: QuotationScalarWhereWithAggregatesInput[]
    NOT?: QuotationScalarWhereWithAggregatesInput | QuotationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Quotation"> | string
    selectedCustomerId?: StringNullableWithAggregatesFilter<"Quotation"> | string | null
    taxRate?: FloatWithAggregatesFilter<"Quotation"> | number
    subTotal?: FloatWithAggregatesFilter<"Quotation"> | number
    notes?: StringNullableWithAggregatesFilter<"Quotation"> | string | null
    grandTotal?: FloatWithAggregatesFilter<"Quotation"> | number
    validUntil?: DateTimeNullableWithAggregatesFilter<"Quotation"> | Date | string | null
    status?: StringWithAggregatesFilter<"Quotation"> | string
    convertedToSaleId?: StringNullableWithAggregatesFilter<"Quotation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Quotation"> | Date | string
    warehousesId?: StringNullableWithAggregatesFilter<"Quotation"> | string | null
    quotationNo?: StringWithAggregatesFilter<"Quotation"> | string
    sync?: BoolWithAggregatesFilter<"Quotation"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Quotation"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"Quotation"> | boolean
  }

  export type QuotationItemWhereInput = {
    AND?: QuotationItemWhereInput | QuotationItemWhereInput[]
    OR?: QuotationItemWhereInput[]
    NOT?: QuotationItemWhereInput | QuotationItemWhereInput[]
    id?: StringFilter<"QuotationItem"> | string
    quotationId?: StringNullableFilter<"QuotationItem"> | string | null
    productId?: StringNullableFilter<"QuotationItem"> | string | null
    productName?: StringFilter<"QuotationItem"> | string
    cost?: FloatFilter<"QuotationItem"> | number
    selectedPrice?: FloatFilter<"QuotationItem"> | number
    priceType?: StringFilter<"QuotationItem"> | string
    quantity?: IntFilter<"QuotationItem"> | number
    discount?: FloatFilter<"QuotationItem"> | number
    total?: FloatFilter<"QuotationItem"> | number
    warehousesId?: StringNullableFilter<"QuotationItem"> | string | null
    sync?: BoolFilter<"QuotationItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"QuotationItem"> | Date | string | null
    isDeleted?: BoolFilter<"QuotationItem"> | boolean
    quotation?: XOR<QuotationNullableScalarRelationFilter, QuotationWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }

  export type QuotationItemOrderByWithRelationInput = {
    id?: SortOrder
    quotationId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    quotation?: QuotationOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    Warehouses?: WarehousesOrderByWithRelationInput
  }

  export type QuotationItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuotationItemWhereInput | QuotationItemWhereInput[]
    OR?: QuotationItemWhereInput[]
    NOT?: QuotationItemWhereInput | QuotationItemWhereInput[]
    quotationId?: StringNullableFilter<"QuotationItem"> | string | null
    productId?: StringNullableFilter<"QuotationItem"> | string | null
    productName?: StringFilter<"QuotationItem"> | string
    cost?: FloatFilter<"QuotationItem"> | number
    selectedPrice?: FloatFilter<"QuotationItem"> | number
    priceType?: StringFilter<"QuotationItem"> | string
    quantity?: IntFilter<"QuotationItem"> | number
    discount?: FloatFilter<"QuotationItem"> | number
    total?: FloatFilter<"QuotationItem"> | number
    warehousesId?: StringNullableFilter<"QuotationItem"> | string | null
    sync?: BoolFilter<"QuotationItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"QuotationItem"> | Date | string | null
    isDeleted?: BoolFilter<"QuotationItem"> | boolean
    quotation?: XOR<QuotationNullableScalarRelationFilter, QuotationWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
    Warehouses?: XOR<WarehousesNullableScalarRelationFilter, WarehousesWhereInput> | null
  }, "id">

  export type QuotationItemOrderByWithAggregationInput = {
    id?: SortOrder
    quotationId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    warehousesId?: SortOrderInput | SortOrder
    sync?: SortOrder
    syncedAt?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: QuotationItemCountOrderByAggregateInput
    _avg?: QuotationItemAvgOrderByAggregateInput
    _max?: QuotationItemMaxOrderByAggregateInput
    _min?: QuotationItemMinOrderByAggregateInput
    _sum?: QuotationItemSumOrderByAggregateInput
  }

  export type QuotationItemScalarWhereWithAggregatesInput = {
    AND?: QuotationItemScalarWhereWithAggregatesInput | QuotationItemScalarWhereWithAggregatesInput[]
    OR?: QuotationItemScalarWhereWithAggregatesInput[]
    NOT?: QuotationItemScalarWhereWithAggregatesInput | QuotationItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuotationItem"> | string
    quotationId?: StringNullableWithAggregatesFilter<"QuotationItem"> | string | null
    productId?: StringNullableWithAggregatesFilter<"QuotationItem"> | string | null
    productName?: StringWithAggregatesFilter<"QuotationItem"> | string
    cost?: FloatWithAggregatesFilter<"QuotationItem"> | number
    selectedPrice?: FloatWithAggregatesFilter<"QuotationItem"> | number
    priceType?: StringWithAggregatesFilter<"QuotationItem"> | string
    quantity?: IntWithAggregatesFilter<"QuotationItem"> | number
    discount?: FloatWithAggregatesFilter<"QuotationItem"> | number
    total?: FloatWithAggregatesFilter<"QuotationItem"> | number
    warehousesId?: StringNullableWithAggregatesFilter<"QuotationItem"> | string | null
    sync?: BoolWithAggregatesFilter<"QuotationItem"> | boolean
    syncedAt?: DateTimeNullableWithAggregatesFilter<"QuotationItem"> | Date | string | null
    isDeleted?: BoolWithAggregatesFilter<"QuotationItem"> | boolean
  }

  export type superAdminCreateInput = {
    id?: string
    userName: string
    email: string
    password: string
    role: string
    lastLogin?: Date | string | null
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type superAdminUncheckedCreateInput = {
    id?: string
    userName: string
    email: string
    password: string
    role: string
    lastLogin?: Date | string | null
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type superAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type superAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type superAdminCreateManyInput = {
    id?: string
    userName: string
    email: string
    password: string
    role: string
    lastLogin?: Date | string | null
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type superAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type superAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersCreateInput = {
    id?: string
    email: string
    userName: string
    phoneNumber: string
    password: string
    role: $Enums.role
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    warehouses?: WarehousesCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    email: string
    userName: string
    phoneNumber: string
    password: string
    role: $Enums.role
    warehousesId?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    warehouses?: WarehousesUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersCreateManyInput = {
    id?: string
    email: string
    userName: string
    phoneNumber: string
    password: string
    role: $Enums.role
    warehousesId?: string | null
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SettingsCreateInput = {
    setting_id: number
    companyName: string
    companyEmail: string
    phoneNumber: string
    websiteURL: string
    address: string
    logoUrl: string
    defaultCurrency: string
    taxRate: number
    mode: $Enums.mode
    itermsPerPage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SettingsUncheckedCreateInput = {
    setting_id: number
    companyName: string
    companyEmail: string
    phoneNumber: string
    websiteURL: string
    address: string
    logoUrl: string
    defaultCurrency: string
    taxRate: number
    mode: $Enums.mode
    itermsPerPage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SettingsUpdateInput = {
    setting_id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    websiteURL?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    taxRate?: IntFieldUpdateOperationsInput | number
    mode?: EnummodeFieldUpdateOperationsInput | $Enums.mode
    itermsPerPage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SettingsUncheckedUpdateInput = {
    setting_id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    websiteURL?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    taxRate?: IntFieldUpdateOperationsInput | number
    mode?: EnummodeFieldUpdateOperationsInput | $Enums.mode
    itermsPerPage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SettingsCreateManyInput = {
    setting_id: number
    companyName: string
    companyEmail: string
    phoneNumber: string
    websiteURL: string
    address: string
    logoUrl: string
    defaultCurrency: string
    taxRate: number
    mode: $Enums.mode
    itermsPerPage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SettingsUpdateManyMutationInput = {
    setting_id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    websiteURL?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    taxRate?: IntFieldUpdateOperationsInput | number
    mode?: EnummodeFieldUpdateOperationsInput | $Enums.mode
    itermsPerPage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SettingsUncheckedUpdateManyInput = {
    setting_id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    websiteURL?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    logoUrl?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    taxRate?: IntFieldUpdateOperationsInput | number
    mode?: EnummodeFieldUpdateOperationsInput | $Enums.mode
    itermsPerPage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WarehousesCreateInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesCreateManyInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type WarehousesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WarehousesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleCreateInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemCreateNestedManyWithoutSaleInput
    selectedCustomer?: CustomerCreateNestedOneWithoutSaleInput
    warehouses?: WarehousesCreateNestedOneWithoutSaleInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemUncheckedCreateNestedManyWithoutSaleInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUpdateManyWithoutSaleNestedInput
    selectedCustomer?: CustomerUpdateOneWithoutSaleNestedInput
    warehouses?: WarehousesUpdateOneWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUncheckedUpdateManyWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type SaleCreateManyInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SaleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemCreateInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    sale?: SaleCreateNestedOneWithoutSaleItemsInput
    product?: ProductCreateNestedOneWithoutSaleItemInput
    Warehouses?: WarehousesCreateNestedOneWithoutSaleItemInput
    Customer?: CustomerCreateNestedOneWithoutSaleItemInput
  }

  export type SaleItemUncheckedCreateInput = {
    id?: string
    saleId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type SaleItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    sale?: SaleUpdateOneWithoutSaleItemsNestedInput
    product?: ProductUpdateOneWithoutSaleItemNestedInput
    Warehouses?: WarehousesUpdateOneWithoutSaleItemNestedInput
    Customer?: CustomerUpdateOneWithoutSaleItemNestedInput
  }

  export type SaleItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemCreateManyInput = {
    id?: string
    saleId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type SaleItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseCreateInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchaseItem?: PurchaseItemCreateNestedManyWithoutPurchaseInput
    warehouses?: WarehousesCreateNestedOneWithoutPurchaseInput
    Supplier?: SupplierCreateNestedOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    supplierId?: string | null
    isDeleted?: boolean
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchaseItem?: PurchaseItemUpdateManyWithoutPurchaseNestedInput
    warehouses?: WarehousesUpdateOneWithoutPurchaseNestedInput
    Supplier?: SupplierUpdateOneWithoutPurchaseNestedInput
  }

  export type PurchaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutPurchaseNestedInput
  }

  export type PurchaseCreateManyInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    supplierId?: string | null
    isDeleted?: boolean
  }

  export type PurchaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemCreateInput = {
    id?: string
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    product?: ProductCreateNestedOneWithoutPurchaseItemInput
    Warehouses?: WarehousesCreateNestedOneWithoutPurchaseItemInput
    Purchase?: PurchaseCreateNestedOneWithoutPurchaseItemInput
  }

  export type PurchaseItemUncheckedCreateInput = {
    id?: string
    productId?: string | null
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    purchaseId?: string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type PurchaseItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    product?: ProductUpdateOneWithoutPurchaseItemNestedInput
    Warehouses?: WarehousesUpdateOneWithoutPurchaseItemNestedInput
    Purchase?: PurchaseUpdateOneWithoutPurchaseItemNestedInput
  }

  export type PurchaseItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemCreateManyInput = {
    id?: string
    productId?: string | null
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    purchaseId?: string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type PurchaseItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CustomerCreateInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutCustomerInput
    Sale?: SaleCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutCustomerInput
    quotation?: QuotationCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Sale?: SaleUncheckedCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutCustomerInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutCustomerNestedInput
    Sale?: SaleUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Sale?: SaleUncheckedUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SupplierCreateInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutSupplierInput
    purchase?: PurchaseCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchase?: PurchaseUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutSupplierNestedInput
    purchase?: PurchaseUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchase?: PurchaseUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierCreateManyInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SupplierUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SupplierUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    warehouses?: WarehousesCreateNestedOneWithoutProductsInput
    SaleItem?: SaleItemCreateNestedManyWithoutProductInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    SaleItem?: SaleItemUncheckedCreateNestedManyWithoutProductInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    warehouses?: WarehousesUpdateOneWithoutProductsNestedInput
    SaleItem?: SaleItemUpdateManyWithoutProductNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    SaleItem?: SaleItemUncheckedUpdateManyWithoutProductNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentMethodCreateInput = {
    id?: string
    method: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutPaymentMethodInput
    Sale?: SaleCreateNestedOneWithoutPaymentMethodInput
  }

  export type PaymentMethodUncheckedCreateInput = {
    id?: string
    method: string
    amount: number
    warehousesId?: string | null
    saleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type PaymentMethodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutPaymentMethodNestedInput
    Sale?: SaleUpdateOneWithoutPaymentMethodNestedInput
  }

  export type PaymentMethodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentMethodCreateManyInput = {
    id?: string
    method: string
    amount: number
    warehousesId?: string | null
    saleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type PaymentMethodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentMethodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReceiptSettingsCreateInput = {
    id?: string
    companyName: string
    businessName: string
    address: string
    city: string
    state: string
    country: string
    phone: string
    email: string
    website: string
    receiptTitle?: string | null
    headerMessage?: string | null
    footerMessage?: string | null
    showLogo?: boolean | null
    logoUrl?: string | null
    showQrCode?: boolean | null
    qrCodeContent?: string | null
    customQrContent?: string | null
    showCustomerInfo?: boolean | null
    showCashierInfo?: boolean | null
    showItemCodes?: boolean | null
    showItemDescriptions?: boolean | null
    showTaxBreakdown?: boolean | null
    showPaymentMethods?: boolean | null
    showBalance?: boolean | null
    showTimestamp?: boolean | null
    use24HourFormat?: boolean | null
    showItemNumbers?: boolean | null
    showRunningTotal?: boolean | null
    paperSize?: string | null
    fontSize?: string | null
    printDensity?: string | null
    lineSpacing?: string | null
    primaryColor?: string | null
    accentColor?: string | null
    fontFamily?: string | null
    printCopyCount?: number | null
    autoPrint?: boolean | null
    language?: string | null
    currency?: string | null
    currencySymbol?: string | null
    currencyPosition?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutReceiptSettingsInput
  }

  export type ReceiptSettingsUncheckedCreateInput = {
    id?: string
    companyName: string
    businessName: string
    address: string
    city: string
    state: string
    country: string
    phone: string
    email: string
    website: string
    receiptTitle?: string | null
    headerMessage?: string | null
    footerMessage?: string | null
    showLogo?: boolean | null
    logoUrl?: string | null
    showQrCode?: boolean | null
    qrCodeContent?: string | null
    customQrContent?: string | null
    showCustomerInfo?: boolean | null
    showCashierInfo?: boolean | null
    showItemCodes?: boolean | null
    showItemDescriptions?: boolean | null
    showTaxBreakdown?: boolean | null
    showPaymentMethods?: boolean | null
    showBalance?: boolean | null
    showTimestamp?: boolean | null
    use24HourFormat?: boolean | null
    showItemNumbers?: boolean | null
    showRunningTotal?: boolean | null
    paperSize?: string | null
    fontSize?: string | null
    printDensity?: string | null
    lineSpacing?: string | null
    primaryColor?: string | null
    accentColor?: string | null
    fontFamily?: string | null
    printCopyCount?: number | null
    autoPrint?: boolean | null
    language?: string | null
    currency?: string | null
    currencySymbol?: string | null
    currencyPosition?: string | null
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type ReceiptSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    receiptTitle?: NullableStringFieldUpdateOperationsInput | string | null
    headerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    footerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    showQrCode?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qrCodeContent?: NullableStringFieldUpdateOperationsInput | string | null
    customQrContent?: NullableStringFieldUpdateOperationsInput | string | null
    showCustomerInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showCashierInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemCodes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemDescriptions?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTaxBreakdown?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showPaymentMethods?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showBalance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTimestamp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    use24HourFormat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemNumbers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showRunningTotal?: NullableBoolFieldUpdateOperationsInput | boolean | null
    paperSize?: NullableStringFieldUpdateOperationsInput | string | null
    fontSize?: NullableStringFieldUpdateOperationsInput | string | null
    printDensity?: NullableStringFieldUpdateOperationsInput | string | null
    lineSpacing?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    accentColor?: NullableStringFieldUpdateOperationsInput | string | null
    fontFamily?: NullableStringFieldUpdateOperationsInput | string | null
    printCopyCount?: NullableIntFieldUpdateOperationsInput | number | null
    autoPrint?: NullableBoolFieldUpdateOperationsInput | boolean | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    currencySymbol?: NullableStringFieldUpdateOperationsInput | string | null
    currencyPosition?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutReceiptSettingsNestedInput
  }

  export type ReceiptSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    receiptTitle?: NullableStringFieldUpdateOperationsInput | string | null
    headerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    footerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    showQrCode?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qrCodeContent?: NullableStringFieldUpdateOperationsInput | string | null
    customQrContent?: NullableStringFieldUpdateOperationsInput | string | null
    showCustomerInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showCashierInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemCodes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemDescriptions?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTaxBreakdown?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showPaymentMethods?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showBalance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTimestamp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    use24HourFormat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemNumbers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showRunningTotal?: NullableBoolFieldUpdateOperationsInput | boolean | null
    paperSize?: NullableStringFieldUpdateOperationsInput | string | null
    fontSize?: NullableStringFieldUpdateOperationsInput | string | null
    printDensity?: NullableStringFieldUpdateOperationsInput | string | null
    lineSpacing?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    accentColor?: NullableStringFieldUpdateOperationsInput | string | null
    fontFamily?: NullableStringFieldUpdateOperationsInput | string | null
    printCopyCount?: NullableIntFieldUpdateOperationsInput | number | null
    autoPrint?: NullableBoolFieldUpdateOperationsInput | boolean | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    currencySymbol?: NullableStringFieldUpdateOperationsInput | string | null
    currencyPosition?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReceiptSettingsCreateManyInput = {
    id?: string
    companyName: string
    businessName: string
    address: string
    city: string
    state: string
    country: string
    phone: string
    email: string
    website: string
    receiptTitle?: string | null
    headerMessage?: string | null
    footerMessage?: string | null
    showLogo?: boolean | null
    logoUrl?: string | null
    showQrCode?: boolean | null
    qrCodeContent?: string | null
    customQrContent?: string | null
    showCustomerInfo?: boolean | null
    showCashierInfo?: boolean | null
    showItemCodes?: boolean | null
    showItemDescriptions?: boolean | null
    showTaxBreakdown?: boolean | null
    showPaymentMethods?: boolean | null
    showBalance?: boolean | null
    showTimestamp?: boolean | null
    use24HourFormat?: boolean | null
    showItemNumbers?: boolean | null
    showRunningTotal?: boolean | null
    paperSize?: string | null
    fontSize?: string | null
    printDensity?: string | null
    lineSpacing?: string | null
    primaryColor?: string | null
    accentColor?: string | null
    fontFamily?: string | null
    printCopyCount?: number | null
    autoPrint?: boolean | null
    language?: string | null
    currency?: string | null
    currencySymbol?: string | null
    currencyPosition?: string | null
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type ReceiptSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    receiptTitle?: NullableStringFieldUpdateOperationsInput | string | null
    headerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    footerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    showQrCode?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qrCodeContent?: NullableStringFieldUpdateOperationsInput | string | null
    customQrContent?: NullableStringFieldUpdateOperationsInput | string | null
    showCustomerInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showCashierInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemCodes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemDescriptions?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTaxBreakdown?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showPaymentMethods?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showBalance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTimestamp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    use24HourFormat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemNumbers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showRunningTotal?: NullableBoolFieldUpdateOperationsInput | boolean | null
    paperSize?: NullableStringFieldUpdateOperationsInput | string | null
    fontSize?: NullableStringFieldUpdateOperationsInput | string | null
    printDensity?: NullableStringFieldUpdateOperationsInput | string | null
    lineSpacing?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    accentColor?: NullableStringFieldUpdateOperationsInput | string | null
    fontFamily?: NullableStringFieldUpdateOperationsInput | string | null
    printCopyCount?: NullableIntFieldUpdateOperationsInput | number | null
    autoPrint?: NullableBoolFieldUpdateOperationsInput | boolean | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    currencySymbol?: NullableStringFieldUpdateOperationsInput | string | null
    currencyPosition?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReceiptSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    receiptTitle?: NullableStringFieldUpdateOperationsInput | string | null
    headerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    footerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    showQrCode?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qrCodeContent?: NullableStringFieldUpdateOperationsInput | string | null
    customQrContent?: NullableStringFieldUpdateOperationsInput | string | null
    showCustomerInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showCashierInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemCodes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemDescriptions?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTaxBreakdown?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showPaymentMethods?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showBalance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTimestamp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    use24HourFormat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemNumbers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showRunningTotal?: NullableBoolFieldUpdateOperationsInput | boolean | null
    paperSize?: NullableStringFieldUpdateOperationsInput | string | null
    fontSize?: NullableStringFieldUpdateOperationsInput | string | null
    printDensity?: NullableStringFieldUpdateOperationsInput | string | null
    lineSpacing?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    accentColor?: NullableStringFieldUpdateOperationsInput | string | null
    fontFamily?: NullableStringFieldUpdateOperationsInput | string | null
    printCopyCount?: NullableIntFieldUpdateOperationsInput | number | null
    autoPrint?: NullableBoolFieldUpdateOperationsInput | boolean | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    currencySymbol?: NullableStringFieldUpdateOperationsInput | string | null
    currencyPosition?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentCreateInput = {
    id?: string
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    customer: CustomerCreateNestedOneWithoutBalancePaymentInput
    sale?: SaleCreateNestedOneWithoutBalancePaymentInput
    warehouses?: WarehousesCreateNestedOneWithoutBalancePaymentInput
  }

  export type BalancePaymentUncheckedCreateInput = {
    id?: string
    customerId: string
    saleId?: string | null
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    customer?: CustomerUpdateOneRequiredWithoutBalancePaymentNestedInput
    sale?: SaleUpdateOneWithoutBalancePaymentNestedInput
    warehouses?: WarehousesUpdateOneWithoutBalancePaymentNestedInput
  }

  export type BalancePaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentCreateManyInput = {
    id?: string
    customerId: string
    saleId?: string | null
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationCreateInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotationItems?: QuotationItemCreateNestedManyWithoutQuotationInput
    selectedCustomer?: CustomerCreateNestedOneWithoutQuotationInput
    warehouses?: WarehousesCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUncheckedCreateInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotationItems?: QuotationItemUncheckedCreateNestedManyWithoutQuotationInput
  }

  export type QuotationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotationItems?: QuotationItemUpdateManyWithoutQuotationNestedInput
    selectedCustomer?: CustomerUpdateOneWithoutQuotationNestedInput
    warehouses?: WarehousesUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotationItems?: QuotationItemUncheckedUpdateManyWithoutQuotationNestedInput
  }

  export type QuotationCreateManyInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemCreateInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotation?: QuotationCreateNestedOneWithoutQuotationItemsInput
    product?: ProductCreateNestedOneWithoutQuotationItemInput
    Warehouses?: WarehousesCreateNestedOneWithoutQuotationItemInput
  }

  export type QuotationItemUncheckedCreateInput = {
    id?: string
    quotationId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotation?: QuotationUpdateOneWithoutQuotationItemsNestedInput
    product?: ProductUpdateOneWithoutQuotationItemNestedInput
    Warehouses?: WarehousesUpdateOneWithoutQuotationItemNestedInput
  }

  export type QuotationItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemCreateManyInput = {
    id?: string
    quotationId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type superAdminCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type superAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type superAdminMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumroleFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[]
    notIn?: $Enums.role[]
    not?: NestedEnumroleFilter<$PrismaModel> | $Enums.role
  }

  export type WarehousesNullableScalarRelationFilter = {
    is?: WarehousesWhereInput | null
    isNot?: WarehousesWhereInput | null
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    warehousesId?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    warehousesId?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    userName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    warehousesId?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type EnumroleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[]
    notIn?: $Enums.role[]
    not?: NestedEnumroleWithAggregatesFilter<$PrismaModel> | $Enums.role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumroleFilter<$PrismaModel>
    _max?: NestedEnumroleFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnummodeFilter<$PrismaModel = never> = {
    equals?: $Enums.mode | EnummodeFieldRefInput<$PrismaModel>
    in?: $Enums.mode[]
    notIn?: $Enums.mode[]
    not?: NestedEnummodeFilter<$PrismaModel> | $Enums.mode
  }

  export type SettingsCountOrderByAggregateInput = {
    setting_id?: SortOrder
    companyName?: SortOrder
    companyEmail?: SortOrder
    phoneNumber?: SortOrder
    websiteURL?: SortOrder
    address?: SortOrder
    logoUrl?: SortOrder
    defaultCurrency?: SortOrder
    taxRate?: SortOrder
    mode?: SortOrder
    itermsPerPage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SettingsAvgOrderByAggregateInput = {
    setting_id?: SortOrder
    taxRate?: SortOrder
    itermsPerPage?: SortOrder
  }

  export type SettingsMaxOrderByAggregateInput = {
    setting_id?: SortOrder
    companyName?: SortOrder
    companyEmail?: SortOrder
    phoneNumber?: SortOrder
    websiteURL?: SortOrder
    address?: SortOrder
    logoUrl?: SortOrder
    defaultCurrency?: SortOrder
    taxRate?: SortOrder
    mode?: SortOrder
    itermsPerPage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SettingsMinOrderByAggregateInput = {
    setting_id?: SortOrder
    companyName?: SortOrder
    companyEmail?: SortOrder
    phoneNumber?: SortOrder
    websiteURL?: SortOrder
    address?: SortOrder
    logoUrl?: SortOrder
    defaultCurrency?: SortOrder
    taxRate?: SortOrder
    mode?: SortOrder
    itermsPerPage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SettingsSumOrderByAggregateInput = {
    setting_id?: SortOrder
    taxRate?: SortOrder
    itermsPerPage?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnummodeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mode | EnummodeFieldRefInput<$PrismaModel>
    in?: $Enums.mode[]
    notIn?: $Enums.mode[]
    not?: NestedEnummodeWithAggregatesFilter<$PrismaModel> | $Enums.mode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummodeFilter<$PrismaModel>
    _max?: NestedEnummodeFilter<$PrismaModel>
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type SaleItemListRelationFilter = {
    every?: SaleItemWhereInput
    some?: SaleItemWhereInput
    none?: SaleItemWhereInput
  }

  export type SaleListRelationFilter = {
    every?: SaleWhereInput
    some?: SaleWhereInput
    none?: SaleWhereInput
  }

  export type PaymentMethodListRelationFilter = {
    every?: PaymentMethodWhereInput
    some?: PaymentMethodWhereInput
    none?: PaymentMethodWhereInput
  }

  export type PurchaseListRelationFilter = {
    every?: PurchaseWhereInput
    some?: PurchaseWhereInput
    none?: PurchaseWhereInput
  }

  export type PurchaseItemListRelationFilter = {
    every?: PurchaseItemWhereInput
    some?: PurchaseItemWhereInput
    none?: PurchaseItemWhereInput
  }

  export type SupplierListRelationFilter = {
    every?: SupplierWhereInput
    some?: SupplierWhereInput
    none?: SupplierWhereInput
  }

  export type ReceiptSettingsListRelationFilter = {
    every?: ReceiptSettingsWhereInput
    some?: ReceiptSettingsWhereInput
    none?: ReceiptSettingsWhereInput
  }

  export type BalancePaymentListRelationFilter = {
    every?: BalancePaymentWhereInput
    some?: BalancePaymentWhereInput
    none?: BalancePaymentWhereInput
  }

  export type QuotationListRelationFilter = {
    every?: QuotationWhereInput
    some?: QuotationWhereInput
    none?: QuotationWhereInput
  }

  export type QuotationItemListRelationFilter = {
    every?: QuotationItemWhereInput
    some?: QuotationItemWhereInput
    none?: QuotationItemWhereInput
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaleItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentMethodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupplierOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReceiptSettingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BalancePaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuotationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuotationItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WarehousesCountOrderByAggregateInput = {
    id?: SortOrder
    warehouseCode?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    description?: SortOrder
    address?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type WarehousesMaxOrderByAggregateInput = {
    id?: SortOrder
    warehouseCode?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    description?: SortOrder
    address?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type WarehousesMinOrderByAggregateInput = {
    id?: SortOrder
    warehouseCode?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    description?: SortOrder
    address?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type SaleCountOrderByAggregateInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    invoiceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SaleAvgOrderByAggregateInput = {
    taxRate?: SortOrder
    subTotal?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
  }

  export type SaleMaxOrderByAggregateInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    invoiceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SaleMinOrderByAggregateInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    invoiceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SaleSumOrderByAggregateInput = {
    taxRate?: SortOrder
    subTotal?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SaleNullableScalarRelationFilter = {
    is?: SaleWhereInput | null
    isNot?: SaleWhereInput | null
  }

  export type ProductNullableScalarRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type SaleItemCountOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    customerId?: SortOrder
    isDeleted?: SortOrder
  }

  export type SaleItemAvgOrderByAggregateInput = {
    cost?: SortOrder
    selectedPrice?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
  }

  export type SaleItemMaxOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    customerId?: SortOrder
    isDeleted?: SortOrder
  }

  export type SaleItemMinOrderByAggregateInput = {
    id?: SortOrder
    saleId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    customerId?: SortOrder
    isDeleted?: SortOrder
  }

  export type SaleItemSumOrderByAggregateInput = {
    cost?: SortOrder
    selectedPrice?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
  }

  export type SupplierNullableScalarRelationFilter = {
    is?: SupplierWhereInput | null
    isNot?: SupplierWhereInput | null
  }

  export type PurchaseCountOrderByAggregateInput = {
    id?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    referenceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    supplierId?: SortOrder
    isDeleted?: SortOrder
  }

  export type PurchaseAvgOrderByAggregateInput = {
    taxRate?: SortOrder
    subTotal?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
  }

  export type PurchaseMaxOrderByAggregateInput = {
    id?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    referenceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    supplierId?: SortOrder
    isDeleted?: SortOrder
  }

  export type PurchaseMinOrderByAggregateInput = {
    id?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    referenceNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    supplierId?: SortOrder
    isDeleted?: SortOrder
  }

  export type PurchaseSumOrderByAggregateInput = {
    taxRate?: SortOrder
    subTotal?: SortOrder
    amountPaid?: SortOrder
    grandTotal?: SortOrder
    paidAmount?: SortOrder
    balance?: SortOrder
  }

  export type PurchaseNullableScalarRelationFilter = {
    is?: PurchaseWhereInput | null
    isNot?: PurchaseWhereInput | null
  }

  export type PurchaseItemCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    cost?: SortOrder
    productName?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    purchaseId?: SortOrder
    customRetailPrice?: SortOrder
    customWholesalePrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PurchaseItemAvgOrderByAggregateInput = {
    cost?: SortOrder
    selectedPrice?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    customRetailPrice?: SortOrder
    customWholesalePrice?: SortOrder
  }

  export type PurchaseItemMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    cost?: SortOrder
    productName?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    purchaseId?: SortOrder
    customRetailPrice?: SortOrder
    customWholesalePrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PurchaseItemMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    cost?: SortOrder
    productName?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    purchaseId?: SortOrder
    customRetailPrice?: SortOrder
    customWholesalePrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PurchaseItemSumOrderByAggregateInput = {
    cost?: SortOrder
    selectedPrice?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    profit?: SortOrder
    customRetailPrice?: SortOrder
    customWholesalePrice?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SupplierCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type SupplierMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type EnumunitFilter<$PrismaModel = never> = {
    equals?: $Enums.unit | EnumunitFieldRefInput<$PrismaModel>
    in?: $Enums.unit[]
    notIn?: $Enums.unit[]
    not?: NestedEnumunitFilter<$PrismaModel> | $Enums.unit
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    barcode?: SortOrder
    wholeSalePrice?: SortOrder
    retailPrice?: SortOrder
    cost?: SortOrder
    quantity?: SortOrder
    taxRate?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    wholeSalePrice?: SortOrder
    retailPrice?: SortOrder
    cost?: SortOrder
    quantity?: SortOrder
    taxRate?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    barcode?: SortOrder
    wholeSalePrice?: SortOrder
    retailPrice?: SortOrder
    cost?: SortOrder
    quantity?: SortOrder
    taxRate?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    barcode?: SortOrder
    wholeSalePrice?: SortOrder
    retailPrice?: SortOrder
    cost?: SortOrder
    quantity?: SortOrder
    taxRate?: SortOrder
    unit?: SortOrder
    description?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    wholeSalePrice?: SortOrder
    retailPrice?: SortOrder
    cost?: SortOrder
    quantity?: SortOrder
    taxRate?: SortOrder
  }

  export type EnumunitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.unit | EnumunitFieldRefInput<$PrismaModel>
    in?: $Enums.unit[]
    notIn?: $Enums.unit[]
    not?: NestedEnumunitWithAggregatesFilter<$PrismaModel> | $Enums.unit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumunitFilter<$PrismaModel>
    _max?: NestedEnumunitFilter<$PrismaModel>
  }

  export type PaymentMethodCountOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    warehousesId?: SortOrder
    saleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PaymentMethodAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMethodMaxOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    warehousesId?: SortOrder
    saleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PaymentMethodMinOrderByAggregateInput = {
    id?: SortOrder
    method?: SortOrder
    amount?: SortOrder
    warehousesId?: SortOrder
    saleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PaymentMethodSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ReceiptSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    receiptTitle?: SortOrder
    headerMessage?: SortOrder
    footerMessage?: SortOrder
    showLogo?: SortOrder
    logoUrl?: SortOrder
    showQrCode?: SortOrder
    qrCodeContent?: SortOrder
    customQrContent?: SortOrder
    showCustomerInfo?: SortOrder
    showCashierInfo?: SortOrder
    showItemCodes?: SortOrder
    showItemDescriptions?: SortOrder
    showTaxBreakdown?: SortOrder
    showPaymentMethods?: SortOrder
    showBalance?: SortOrder
    showTimestamp?: SortOrder
    use24HourFormat?: SortOrder
    showItemNumbers?: SortOrder
    showRunningTotal?: SortOrder
    paperSize?: SortOrder
    fontSize?: SortOrder
    printDensity?: SortOrder
    lineSpacing?: SortOrder
    primaryColor?: SortOrder
    accentColor?: SortOrder
    fontFamily?: SortOrder
    printCopyCount?: SortOrder
    autoPrint?: SortOrder
    language?: SortOrder
    currency?: SortOrder
    currencySymbol?: SortOrder
    currencyPosition?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ReceiptSettingsAvgOrderByAggregateInput = {
    printCopyCount?: SortOrder
  }

  export type ReceiptSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    receiptTitle?: SortOrder
    headerMessage?: SortOrder
    footerMessage?: SortOrder
    showLogo?: SortOrder
    logoUrl?: SortOrder
    showQrCode?: SortOrder
    qrCodeContent?: SortOrder
    customQrContent?: SortOrder
    showCustomerInfo?: SortOrder
    showCashierInfo?: SortOrder
    showItemCodes?: SortOrder
    showItemDescriptions?: SortOrder
    showTaxBreakdown?: SortOrder
    showPaymentMethods?: SortOrder
    showBalance?: SortOrder
    showTimestamp?: SortOrder
    use24HourFormat?: SortOrder
    showItemNumbers?: SortOrder
    showRunningTotal?: SortOrder
    paperSize?: SortOrder
    fontSize?: SortOrder
    printDensity?: SortOrder
    lineSpacing?: SortOrder
    primaryColor?: SortOrder
    accentColor?: SortOrder
    fontFamily?: SortOrder
    printCopyCount?: SortOrder
    autoPrint?: SortOrder
    language?: SortOrder
    currency?: SortOrder
    currencySymbol?: SortOrder
    currencyPosition?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ReceiptSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    businessName?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    receiptTitle?: SortOrder
    headerMessage?: SortOrder
    footerMessage?: SortOrder
    showLogo?: SortOrder
    logoUrl?: SortOrder
    showQrCode?: SortOrder
    qrCodeContent?: SortOrder
    customQrContent?: SortOrder
    showCustomerInfo?: SortOrder
    showCashierInfo?: SortOrder
    showItemCodes?: SortOrder
    showItemDescriptions?: SortOrder
    showTaxBreakdown?: SortOrder
    showPaymentMethods?: SortOrder
    showBalance?: SortOrder
    showTimestamp?: SortOrder
    use24HourFormat?: SortOrder
    showItemNumbers?: SortOrder
    showRunningTotal?: SortOrder
    paperSize?: SortOrder
    fontSize?: SortOrder
    printDensity?: SortOrder
    lineSpacing?: SortOrder
    primaryColor?: SortOrder
    accentColor?: SortOrder
    fontFamily?: SortOrder
    printCopyCount?: SortOrder
    autoPrint?: SortOrder
    language?: SortOrder
    currency?: SortOrder
    currencySymbol?: SortOrder
    currencyPosition?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ReceiptSettingsSumOrderByAggregateInput = {
    printCopyCount?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type BalancePaymentCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    receiptNo?: SortOrder
    notes?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type BalancePaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BalancePaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    receiptNo?: SortOrder
    notes?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type BalancePaymentMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    saleId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    receiptNo?: SortOrder
    notes?: SortOrder
    warehousesId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type BalancePaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type QuotationCountOrderByAggregateInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    grandTotal?: SortOrder
    validUntil?: SortOrder
    status?: SortOrder
    convertedToSaleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    quotationNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type QuotationAvgOrderByAggregateInput = {
    taxRate?: SortOrder
    subTotal?: SortOrder
    grandTotal?: SortOrder
  }

  export type QuotationMaxOrderByAggregateInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    grandTotal?: SortOrder
    validUntil?: SortOrder
    status?: SortOrder
    convertedToSaleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    quotationNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type QuotationMinOrderByAggregateInput = {
    id?: SortOrder
    selectedCustomerId?: SortOrder
    taxRate?: SortOrder
    subTotal?: SortOrder
    notes?: SortOrder
    grandTotal?: SortOrder
    validUntil?: SortOrder
    status?: SortOrder
    convertedToSaleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehousesId?: SortOrder
    quotationNo?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type QuotationSumOrderByAggregateInput = {
    taxRate?: SortOrder
    subTotal?: SortOrder
    grandTotal?: SortOrder
  }

  export type QuotationNullableScalarRelationFilter = {
    is?: QuotationWhereInput | null
    isNot?: QuotationWhereInput | null
  }

  export type QuotationItemCountOrderByAggregateInput = {
    id?: SortOrder
    quotationId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type QuotationItemAvgOrderByAggregateInput = {
    cost?: SortOrder
    selectedPrice?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
  }

  export type QuotationItemMaxOrderByAggregateInput = {
    id?: SortOrder
    quotationId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type QuotationItemMinOrderByAggregateInput = {
    id?: SortOrder
    quotationId?: SortOrder
    productId?: SortOrder
    productName?: SortOrder
    cost?: SortOrder
    selectedPrice?: SortOrder
    priceType?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
    warehousesId?: SortOrder
    sync?: SortOrder
    syncedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type QuotationItemSumOrderByAggregateInput = {
    cost?: SortOrder
    selectedPrice?: SortOrder
    quantity?: SortOrder
    discount?: SortOrder
    total?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WarehousesCreateNestedOneWithoutUsersInput = {
    create?: XOR<WarehousesCreateWithoutUsersInput, WarehousesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutUsersInput
    connect?: WarehousesWhereUniqueInput
  }

  export type EnumroleFieldUpdateOperationsInput = {
    set?: $Enums.role
  }

  export type WarehousesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<WarehousesCreateWithoutUsersInput, WarehousesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutUsersInput
    upsert?: WarehousesUpsertWithoutUsersInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutUsersInput, WarehousesUpdateWithoutUsersInput>, WarehousesUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnummodeFieldUpdateOperationsInput = {
    set?: $Enums.mode
  }

  export type usersCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<usersCreateWithoutWarehousesInput, usersUncheckedCreateWithoutWarehousesInput> | usersCreateWithoutWarehousesInput[] | usersUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutWarehousesInput | usersCreateOrConnectWithoutWarehousesInput[]
    createMany?: usersCreateManyWarehousesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<ProductCreateWithoutWarehousesInput, ProductUncheckedCreateWithoutWarehousesInput> | ProductCreateWithoutWarehousesInput[] | ProductUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutWarehousesInput | ProductCreateOrConnectWithoutWarehousesInput[]
    createMany?: ProductCreateManyWarehousesInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<CustomerCreateWithoutWarehousesInput, CustomerUncheckedCreateWithoutWarehousesInput> | CustomerCreateWithoutWarehousesInput[] | CustomerUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutWarehousesInput | CustomerCreateOrConnectWithoutWarehousesInput[]
    createMany?: CustomerCreateManyWarehousesInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type SaleItemCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<SaleItemCreateWithoutWarehousesInput, SaleItemUncheckedCreateWithoutWarehousesInput> | SaleItemCreateWithoutWarehousesInput[] | SaleItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutWarehousesInput | SaleItemCreateOrConnectWithoutWarehousesInput[]
    createMany?: SaleItemCreateManyWarehousesInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type SaleCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<SaleCreateWithoutWarehousesInput, SaleUncheckedCreateWithoutWarehousesInput> | SaleCreateWithoutWarehousesInput[] | SaleUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutWarehousesInput | SaleCreateOrConnectWithoutWarehousesInput[]
    createMany?: SaleCreateManyWarehousesInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type PaymentMethodCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<PaymentMethodCreateWithoutWarehousesInput, PaymentMethodUncheckedCreateWithoutWarehousesInput> | PaymentMethodCreateWithoutWarehousesInput[] | PaymentMethodUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutWarehousesInput | PaymentMethodCreateOrConnectWithoutWarehousesInput[]
    createMany?: PaymentMethodCreateManyWarehousesInputEnvelope
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
  }

  export type PurchaseCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<PurchaseCreateWithoutWarehousesInput, PurchaseUncheckedCreateWithoutWarehousesInput> | PurchaseCreateWithoutWarehousesInput[] | PurchaseUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutWarehousesInput | PurchaseCreateOrConnectWithoutWarehousesInput[]
    createMany?: PurchaseCreateManyWarehousesInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type PurchaseItemCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<PurchaseItemCreateWithoutWarehousesInput, PurchaseItemUncheckedCreateWithoutWarehousesInput> | PurchaseItemCreateWithoutWarehousesInput[] | PurchaseItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutWarehousesInput | PurchaseItemCreateOrConnectWithoutWarehousesInput[]
    createMany?: PurchaseItemCreateManyWarehousesInputEnvelope
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
  }

  export type SupplierCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<SupplierCreateWithoutWarehousesInput, SupplierUncheckedCreateWithoutWarehousesInput> | SupplierCreateWithoutWarehousesInput[] | SupplierUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutWarehousesInput | SupplierCreateOrConnectWithoutWarehousesInput[]
    createMany?: SupplierCreateManyWarehousesInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type ReceiptSettingsCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<ReceiptSettingsCreateWithoutWarehousesInput, ReceiptSettingsUncheckedCreateWithoutWarehousesInput> | ReceiptSettingsCreateWithoutWarehousesInput[] | ReceiptSettingsUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ReceiptSettingsCreateOrConnectWithoutWarehousesInput | ReceiptSettingsCreateOrConnectWithoutWarehousesInput[]
    createMany?: ReceiptSettingsCreateManyWarehousesInputEnvelope
    connect?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
  }

  export type BalancePaymentCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<BalancePaymentCreateWithoutWarehousesInput, BalancePaymentUncheckedCreateWithoutWarehousesInput> | BalancePaymentCreateWithoutWarehousesInput[] | BalancePaymentUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutWarehousesInput | BalancePaymentCreateOrConnectWithoutWarehousesInput[]
    createMany?: BalancePaymentCreateManyWarehousesInputEnvelope
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
  }

  export type QuotationCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<QuotationCreateWithoutWarehousesInput, QuotationUncheckedCreateWithoutWarehousesInput> | QuotationCreateWithoutWarehousesInput[] | QuotationUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutWarehousesInput | QuotationCreateOrConnectWithoutWarehousesInput[]
    createMany?: QuotationCreateManyWarehousesInputEnvelope
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
  }

  export type QuotationItemCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<QuotationItemCreateWithoutWarehousesInput, QuotationItemUncheckedCreateWithoutWarehousesInput> | QuotationItemCreateWithoutWarehousesInput[] | QuotationItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutWarehousesInput | QuotationItemCreateOrConnectWithoutWarehousesInput[]
    createMany?: QuotationItemCreateManyWarehousesInputEnvelope
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<usersCreateWithoutWarehousesInput, usersUncheckedCreateWithoutWarehousesInput> | usersCreateWithoutWarehousesInput[] | usersUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutWarehousesInput | usersCreateOrConnectWithoutWarehousesInput[]
    createMany?: usersCreateManyWarehousesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<ProductCreateWithoutWarehousesInput, ProductUncheckedCreateWithoutWarehousesInput> | ProductCreateWithoutWarehousesInput[] | ProductUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutWarehousesInput | ProductCreateOrConnectWithoutWarehousesInput[]
    createMany?: ProductCreateManyWarehousesInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<CustomerCreateWithoutWarehousesInput, CustomerUncheckedCreateWithoutWarehousesInput> | CustomerCreateWithoutWarehousesInput[] | CustomerUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutWarehousesInput | CustomerCreateOrConnectWithoutWarehousesInput[]
    createMany?: CustomerCreateManyWarehousesInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type SaleItemUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<SaleItemCreateWithoutWarehousesInput, SaleItemUncheckedCreateWithoutWarehousesInput> | SaleItemCreateWithoutWarehousesInput[] | SaleItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutWarehousesInput | SaleItemCreateOrConnectWithoutWarehousesInput[]
    createMany?: SaleItemCreateManyWarehousesInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type SaleUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<SaleCreateWithoutWarehousesInput, SaleUncheckedCreateWithoutWarehousesInput> | SaleCreateWithoutWarehousesInput[] | SaleUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutWarehousesInput | SaleCreateOrConnectWithoutWarehousesInput[]
    createMany?: SaleCreateManyWarehousesInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<PaymentMethodCreateWithoutWarehousesInput, PaymentMethodUncheckedCreateWithoutWarehousesInput> | PaymentMethodCreateWithoutWarehousesInput[] | PaymentMethodUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutWarehousesInput | PaymentMethodCreateOrConnectWithoutWarehousesInput[]
    createMany?: PaymentMethodCreateManyWarehousesInputEnvelope
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
  }

  export type PurchaseUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<PurchaseCreateWithoutWarehousesInput, PurchaseUncheckedCreateWithoutWarehousesInput> | PurchaseCreateWithoutWarehousesInput[] | PurchaseUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutWarehousesInput | PurchaseCreateOrConnectWithoutWarehousesInput[]
    createMany?: PurchaseCreateManyWarehousesInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<PurchaseItemCreateWithoutWarehousesInput, PurchaseItemUncheckedCreateWithoutWarehousesInput> | PurchaseItemCreateWithoutWarehousesInput[] | PurchaseItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutWarehousesInput | PurchaseItemCreateOrConnectWithoutWarehousesInput[]
    createMany?: PurchaseItemCreateManyWarehousesInputEnvelope
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
  }

  export type SupplierUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<SupplierCreateWithoutWarehousesInput, SupplierUncheckedCreateWithoutWarehousesInput> | SupplierCreateWithoutWarehousesInput[] | SupplierUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutWarehousesInput | SupplierCreateOrConnectWithoutWarehousesInput[]
    createMany?: SupplierCreateManyWarehousesInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<ReceiptSettingsCreateWithoutWarehousesInput, ReceiptSettingsUncheckedCreateWithoutWarehousesInput> | ReceiptSettingsCreateWithoutWarehousesInput[] | ReceiptSettingsUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ReceiptSettingsCreateOrConnectWithoutWarehousesInput | ReceiptSettingsCreateOrConnectWithoutWarehousesInput[]
    createMany?: ReceiptSettingsCreateManyWarehousesInputEnvelope
    connect?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
  }

  export type BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<BalancePaymentCreateWithoutWarehousesInput, BalancePaymentUncheckedCreateWithoutWarehousesInput> | BalancePaymentCreateWithoutWarehousesInput[] | BalancePaymentUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutWarehousesInput | BalancePaymentCreateOrConnectWithoutWarehousesInput[]
    createMany?: BalancePaymentCreateManyWarehousesInputEnvelope
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
  }

  export type QuotationUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<QuotationCreateWithoutWarehousesInput, QuotationUncheckedCreateWithoutWarehousesInput> | QuotationCreateWithoutWarehousesInput[] | QuotationUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutWarehousesInput | QuotationCreateOrConnectWithoutWarehousesInput[]
    createMany?: QuotationCreateManyWarehousesInputEnvelope
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
  }

  export type QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput = {
    create?: XOR<QuotationItemCreateWithoutWarehousesInput, QuotationItemUncheckedCreateWithoutWarehousesInput> | QuotationItemCreateWithoutWarehousesInput[] | QuotationItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutWarehousesInput | QuotationItemCreateOrConnectWithoutWarehousesInput[]
    createMany?: QuotationItemCreateManyWarehousesInputEnvelope
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
  }

  export type usersUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<usersCreateWithoutWarehousesInput, usersUncheckedCreateWithoutWarehousesInput> | usersCreateWithoutWarehousesInput[] | usersUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutWarehousesInput | usersCreateOrConnectWithoutWarehousesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutWarehousesInput | usersUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: usersCreateManyWarehousesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutWarehousesInput | usersUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutWarehousesInput | usersUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<ProductCreateWithoutWarehousesInput, ProductUncheckedCreateWithoutWarehousesInput> | ProductCreateWithoutWarehousesInput[] | ProductUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutWarehousesInput | ProductCreateOrConnectWithoutWarehousesInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutWarehousesInput | ProductUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: ProductCreateManyWarehousesInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutWarehousesInput | ProductUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutWarehousesInput | ProductUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<CustomerCreateWithoutWarehousesInput, CustomerUncheckedCreateWithoutWarehousesInput> | CustomerCreateWithoutWarehousesInput[] | CustomerUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutWarehousesInput | CustomerCreateOrConnectWithoutWarehousesInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutWarehousesInput | CustomerUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: CustomerCreateManyWarehousesInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutWarehousesInput | CustomerUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutWarehousesInput | CustomerUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type SaleItemUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<SaleItemCreateWithoutWarehousesInput, SaleItemUncheckedCreateWithoutWarehousesInput> | SaleItemCreateWithoutWarehousesInput[] | SaleItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutWarehousesInput | SaleItemCreateOrConnectWithoutWarehousesInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutWarehousesInput | SaleItemUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: SaleItemCreateManyWarehousesInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutWarehousesInput | SaleItemUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutWarehousesInput | SaleItemUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type SaleUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<SaleCreateWithoutWarehousesInput, SaleUncheckedCreateWithoutWarehousesInput> | SaleCreateWithoutWarehousesInput[] | SaleUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutWarehousesInput | SaleCreateOrConnectWithoutWarehousesInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutWarehousesInput | SaleUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: SaleCreateManyWarehousesInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutWarehousesInput | SaleUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutWarehousesInput | SaleUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type PaymentMethodUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutWarehousesInput, PaymentMethodUncheckedCreateWithoutWarehousesInput> | PaymentMethodCreateWithoutWarehousesInput[] | PaymentMethodUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutWarehousesInput | PaymentMethodCreateOrConnectWithoutWarehousesInput[]
    upsert?: PaymentMethodUpsertWithWhereUniqueWithoutWarehousesInput | PaymentMethodUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: PaymentMethodCreateManyWarehousesInputEnvelope
    set?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    disconnect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    delete?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    update?: PaymentMethodUpdateWithWhereUniqueWithoutWarehousesInput | PaymentMethodUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: PaymentMethodUpdateManyWithWhereWithoutWarehousesInput | PaymentMethodUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[]
  }

  export type PurchaseUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<PurchaseCreateWithoutWarehousesInput, PurchaseUncheckedCreateWithoutWarehousesInput> | PurchaseCreateWithoutWarehousesInput[] | PurchaseUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutWarehousesInput | PurchaseCreateOrConnectWithoutWarehousesInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutWarehousesInput | PurchaseUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: PurchaseCreateManyWarehousesInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutWarehousesInput | PurchaseUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutWarehousesInput | PurchaseUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type PurchaseItemUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<PurchaseItemCreateWithoutWarehousesInput, PurchaseItemUncheckedCreateWithoutWarehousesInput> | PurchaseItemCreateWithoutWarehousesInput[] | PurchaseItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutWarehousesInput | PurchaseItemCreateOrConnectWithoutWarehousesInput[]
    upsert?: PurchaseItemUpsertWithWhereUniqueWithoutWarehousesInput | PurchaseItemUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: PurchaseItemCreateManyWarehousesInputEnvelope
    set?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    disconnect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    delete?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    update?: PurchaseItemUpdateWithWhereUniqueWithoutWarehousesInput | PurchaseItemUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: PurchaseItemUpdateManyWithWhereWithoutWarehousesInput | PurchaseItemUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
  }

  export type SupplierUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<SupplierCreateWithoutWarehousesInput, SupplierUncheckedCreateWithoutWarehousesInput> | SupplierCreateWithoutWarehousesInput[] | SupplierUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutWarehousesInput | SupplierCreateOrConnectWithoutWarehousesInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutWarehousesInput | SupplierUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: SupplierCreateManyWarehousesInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutWarehousesInput | SupplierUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutWarehousesInput | SupplierUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type ReceiptSettingsUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<ReceiptSettingsCreateWithoutWarehousesInput, ReceiptSettingsUncheckedCreateWithoutWarehousesInput> | ReceiptSettingsCreateWithoutWarehousesInput[] | ReceiptSettingsUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ReceiptSettingsCreateOrConnectWithoutWarehousesInput | ReceiptSettingsCreateOrConnectWithoutWarehousesInput[]
    upsert?: ReceiptSettingsUpsertWithWhereUniqueWithoutWarehousesInput | ReceiptSettingsUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: ReceiptSettingsCreateManyWarehousesInputEnvelope
    set?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    disconnect?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    delete?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    connect?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    update?: ReceiptSettingsUpdateWithWhereUniqueWithoutWarehousesInput | ReceiptSettingsUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: ReceiptSettingsUpdateManyWithWhereWithoutWarehousesInput | ReceiptSettingsUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: ReceiptSettingsScalarWhereInput | ReceiptSettingsScalarWhereInput[]
  }

  export type BalancePaymentUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<BalancePaymentCreateWithoutWarehousesInput, BalancePaymentUncheckedCreateWithoutWarehousesInput> | BalancePaymentCreateWithoutWarehousesInput[] | BalancePaymentUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutWarehousesInput | BalancePaymentCreateOrConnectWithoutWarehousesInput[]
    upsert?: BalancePaymentUpsertWithWhereUniqueWithoutWarehousesInput | BalancePaymentUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: BalancePaymentCreateManyWarehousesInputEnvelope
    set?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    disconnect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    delete?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    update?: BalancePaymentUpdateWithWhereUniqueWithoutWarehousesInput | BalancePaymentUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: BalancePaymentUpdateManyWithWhereWithoutWarehousesInput | BalancePaymentUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
  }

  export type QuotationUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<QuotationCreateWithoutWarehousesInput, QuotationUncheckedCreateWithoutWarehousesInput> | QuotationCreateWithoutWarehousesInput[] | QuotationUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutWarehousesInput | QuotationCreateOrConnectWithoutWarehousesInput[]
    upsert?: QuotationUpsertWithWhereUniqueWithoutWarehousesInput | QuotationUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: QuotationCreateManyWarehousesInputEnvelope
    set?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    disconnect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    delete?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    update?: QuotationUpdateWithWhereUniqueWithoutWarehousesInput | QuotationUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: QuotationUpdateManyWithWhereWithoutWarehousesInput | QuotationUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
  }

  export type QuotationItemUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<QuotationItemCreateWithoutWarehousesInput, QuotationItemUncheckedCreateWithoutWarehousesInput> | QuotationItemCreateWithoutWarehousesInput[] | QuotationItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutWarehousesInput | QuotationItemCreateOrConnectWithoutWarehousesInput[]
    upsert?: QuotationItemUpsertWithWhereUniqueWithoutWarehousesInput | QuotationItemUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: QuotationItemCreateManyWarehousesInputEnvelope
    set?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    disconnect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    delete?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    update?: QuotationItemUpdateWithWhereUniqueWithoutWarehousesInput | QuotationItemUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: QuotationItemUpdateManyWithWhereWithoutWarehousesInput | QuotationItemUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<usersCreateWithoutWarehousesInput, usersUncheckedCreateWithoutWarehousesInput> | usersCreateWithoutWarehousesInput[] | usersUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutWarehousesInput | usersCreateOrConnectWithoutWarehousesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutWarehousesInput | usersUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: usersCreateManyWarehousesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutWarehousesInput | usersUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutWarehousesInput | usersUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<ProductCreateWithoutWarehousesInput, ProductUncheckedCreateWithoutWarehousesInput> | ProductCreateWithoutWarehousesInput[] | ProductUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutWarehousesInput | ProductCreateOrConnectWithoutWarehousesInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutWarehousesInput | ProductUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: ProductCreateManyWarehousesInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutWarehousesInput | ProductUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutWarehousesInput | ProductUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<CustomerCreateWithoutWarehousesInput, CustomerUncheckedCreateWithoutWarehousesInput> | CustomerCreateWithoutWarehousesInput[] | CustomerUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutWarehousesInput | CustomerCreateOrConnectWithoutWarehousesInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutWarehousesInput | CustomerUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: CustomerCreateManyWarehousesInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutWarehousesInput | CustomerUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutWarehousesInput | CustomerUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<SaleItemCreateWithoutWarehousesInput, SaleItemUncheckedCreateWithoutWarehousesInput> | SaleItemCreateWithoutWarehousesInput[] | SaleItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutWarehousesInput | SaleItemCreateOrConnectWithoutWarehousesInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutWarehousesInput | SaleItemUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: SaleItemCreateManyWarehousesInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutWarehousesInput | SaleItemUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutWarehousesInput | SaleItemUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type SaleUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<SaleCreateWithoutWarehousesInput, SaleUncheckedCreateWithoutWarehousesInput> | SaleCreateWithoutWarehousesInput[] | SaleUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutWarehousesInput | SaleCreateOrConnectWithoutWarehousesInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutWarehousesInput | SaleUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: SaleCreateManyWarehousesInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutWarehousesInput | SaleUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutWarehousesInput | SaleUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutWarehousesInput, PaymentMethodUncheckedCreateWithoutWarehousesInput> | PaymentMethodCreateWithoutWarehousesInput[] | PaymentMethodUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutWarehousesInput | PaymentMethodCreateOrConnectWithoutWarehousesInput[]
    upsert?: PaymentMethodUpsertWithWhereUniqueWithoutWarehousesInput | PaymentMethodUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: PaymentMethodCreateManyWarehousesInputEnvelope
    set?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    disconnect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    delete?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    update?: PaymentMethodUpdateWithWhereUniqueWithoutWarehousesInput | PaymentMethodUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: PaymentMethodUpdateManyWithWhereWithoutWarehousesInput | PaymentMethodUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[]
  }

  export type PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<PurchaseCreateWithoutWarehousesInput, PurchaseUncheckedCreateWithoutWarehousesInput> | PurchaseCreateWithoutWarehousesInput[] | PurchaseUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutWarehousesInput | PurchaseCreateOrConnectWithoutWarehousesInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutWarehousesInput | PurchaseUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: PurchaseCreateManyWarehousesInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutWarehousesInput | PurchaseUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutWarehousesInput | PurchaseUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<PurchaseItemCreateWithoutWarehousesInput, PurchaseItemUncheckedCreateWithoutWarehousesInput> | PurchaseItemCreateWithoutWarehousesInput[] | PurchaseItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutWarehousesInput | PurchaseItemCreateOrConnectWithoutWarehousesInput[]
    upsert?: PurchaseItemUpsertWithWhereUniqueWithoutWarehousesInput | PurchaseItemUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: PurchaseItemCreateManyWarehousesInputEnvelope
    set?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    disconnect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    delete?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    update?: PurchaseItemUpdateWithWhereUniqueWithoutWarehousesInput | PurchaseItemUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: PurchaseItemUpdateManyWithWhereWithoutWarehousesInput | PurchaseItemUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
  }

  export type SupplierUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<SupplierCreateWithoutWarehousesInput, SupplierUncheckedCreateWithoutWarehousesInput> | SupplierCreateWithoutWarehousesInput[] | SupplierUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutWarehousesInput | SupplierCreateOrConnectWithoutWarehousesInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutWarehousesInput | SupplierUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: SupplierCreateManyWarehousesInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutWarehousesInput | SupplierUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutWarehousesInput | SupplierUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<ReceiptSettingsCreateWithoutWarehousesInput, ReceiptSettingsUncheckedCreateWithoutWarehousesInput> | ReceiptSettingsCreateWithoutWarehousesInput[] | ReceiptSettingsUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: ReceiptSettingsCreateOrConnectWithoutWarehousesInput | ReceiptSettingsCreateOrConnectWithoutWarehousesInput[]
    upsert?: ReceiptSettingsUpsertWithWhereUniqueWithoutWarehousesInput | ReceiptSettingsUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: ReceiptSettingsCreateManyWarehousesInputEnvelope
    set?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    disconnect?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    delete?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    connect?: ReceiptSettingsWhereUniqueInput | ReceiptSettingsWhereUniqueInput[]
    update?: ReceiptSettingsUpdateWithWhereUniqueWithoutWarehousesInput | ReceiptSettingsUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: ReceiptSettingsUpdateManyWithWhereWithoutWarehousesInput | ReceiptSettingsUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: ReceiptSettingsScalarWhereInput | ReceiptSettingsScalarWhereInput[]
  }

  export type BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<BalancePaymentCreateWithoutWarehousesInput, BalancePaymentUncheckedCreateWithoutWarehousesInput> | BalancePaymentCreateWithoutWarehousesInput[] | BalancePaymentUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutWarehousesInput | BalancePaymentCreateOrConnectWithoutWarehousesInput[]
    upsert?: BalancePaymentUpsertWithWhereUniqueWithoutWarehousesInput | BalancePaymentUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: BalancePaymentCreateManyWarehousesInputEnvelope
    set?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    disconnect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    delete?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    update?: BalancePaymentUpdateWithWhereUniqueWithoutWarehousesInput | BalancePaymentUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: BalancePaymentUpdateManyWithWhereWithoutWarehousesInput | BalancePaymentUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
  }

  export type QuotationUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<QuotationCreateWithoutWarehousesInput, QuotationUncheckedCreateWithoutWarehousesInput> | QuotationCreateWithoutWarehousesInput[] | QuotationUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutWarehousesInput | QuotationCreateOrConnectWithoutWarehousesInput[]
    upsert?: QuotationUpsertWithWhereUniqueWithoutWarehousesInput | QuotationUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: QuotationCreateManyWarehousesInputEnvelope
    set?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    disconnect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    delete?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    update?: QuotationUpdateWithWhereUniqueWithoutWarehousesInput | QuotationUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: QuotationUpdateManyWithWhereWithoutWarehousesInput | QuotationUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
  }

  export type QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput = {
    create?: XOR<QuotationItemCreateWithoutWarehousesInput, QuotationItemUncheckedCreateWithoutWarehousesInput> | QuotationItemCreateWithoutWarehousesInput[] | QuotationItemUncheckedCreateWithoutWarehousesInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutWarehousesInput | QuotationItemCreateOrConnectWithoutWarehousesInput[]
    upsert?: QuotationItemUpsertWithWhereUniqueWithoutWarehousesInput | QuotationItemUpsertWithWhereUniqueWithoutWarehousesInput[]
    createMany?: QuotationItemCreateManyWarehousesInputEnvelope
    set?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    disconnect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    delete?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    update?: QuotationItemUpdateWithWhereUniqueWithoutWarehousesInput | QuotationItemUpdateWithWhereUniqueWithoutWarehousesInput[]
    updateMany?: QuotationItemUpdateManyWithWhereWithoutWarehousesInput | QuotationItemUpdateManyWithWhereWithoutWarehousesInput[]
    deleteMany?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
  }

  export type SaleItemCreateNestedManyWithoutSaleInput = {
    create?: XOR<SaleItemCreateWithoutSaleInput, SaleItemUncheckedCreateWithoutSaleInput> | SaleItemCreateWithoutSaleInput[] | SaleItemUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutSaleInput | SaleItemCreateOrConnectWithoutSaleInput[]
    createMany?: SaleItemCreateManySaleInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type CustomerCreateNestedOneWithoutSaleInput = {
    create?: XOR<CustomerCreateWithoutSaleInput, CustomerUncheckedCreateWithoutSaleInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSaleInput
    connect?: CustomerWhereUniqueInput
  }

  export type WarehousesCreateNestedOneWithoutSaleInput = {
    create?: XOR<WarehousesCreateWithoutSaleInput, WarehousesUncheckedCreateWithoutSaleInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutSaleInput
    connect?: WarehousesWhereUniqueInput
  }

  export type PaymentMethodCreateNestedManyWithoutSaleInput = {
    create?: XOR<PaymentMethodCreateWithoutSaleInput, PaymentMethodUncheckedCreateWithoutSaleInput> | PaymentMethodCreateWithoutSaleInput[] | PaymentMethodUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutSaleInput | PaymentMethodCreateOrConnectWithoutSaleInput[]
    createMany?: PaymentMethodCreateManySaleInputEnvelope
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
  }

  export type BalancePaymentCreateNestedManyWithoutSaleInput = {
    create?: XOR<BalancePaymentCreateWithoutSaleInput, BalancePaymentUncheckedCreateWithoutSaleInput> | BalancePaymentCreateWithoutSaleInput[] | BalancePaymentUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutSaleInput | BalancePaymentCreateOrConnectWithoutSaleInput[]
    createMany?: BalancePaymentCreateManySaleInputEnvelope
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
  }

  export type SaleItemUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<SaleItemCreateWithoutSaleInput, SaleItemUncheckedCreateWithoutSaleInput> | SaleItemCreateWithoutSaleInput[] | SaleItemUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutSaleInput | SaleItemCreateOrConnectWithoutSaleInput[]
    createMany?: SaleItemCreateManySaleInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type PaymentMethodUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<PaymentMethodCreateWithoutSaleInput, PaymentMethodUncheckedCreateWithoutSaleInput> | PaymentMethodCreateWithoutSaleInput[] | PaymentMethodUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutSaleInput | PaymentMethodCreateOrConnectWithoutSaleInput[]
    createMany?: PaymentMethodCreateManySaleInputEnvelope
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
  }

  export type BalancePaymentUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<BalancePaymentCreateWithoutSaleInput, BalancePaymentUncheckedCreateWithoutSaleInput> | BalancePaymentCreateWithoutSaleInput[] | BalancePaymentUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutSaleInput | BalancePaymentCreateOrConnectWithoutSaleInput[]
    createMany?: BalancePaymentCreateManySaleInputEnvelope
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SaleItemUpdateManyWithoutSaleNestedInput = {
    create?: XOR<SaleItemCreateWithoutSaleInput, SaleItemUncheckedCreateWithoutSaleInput> | SaleItemCreateWithoutSaleInput[] | SaleItemUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutSaleInput | SaleItemCreateOrConnectWithoutSaleInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutSaleInput | SaleItemUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: SaleItemCreateManySaleInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutSaleInput | SaleItemUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutSaleInput | SaleItemUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type CustomerUpdateOneWithoutSaleNestedInput = {
    create?: XOR<CustomerCreateWithoutSaleInput, CustomerUncheckedCreateWithoutSaleInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSaleInput
    upsert?: CustomerUpsertWithoutSaleInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutSaleInput, CustomerUpdateWithoutSaleInput>, CustomerUncheckedUpdateWithoutSaleInput>
  }

  export type WarehousesUpdateOneWithoutSaleNestedInput = {
    create?: XOR<WarehousesCreateWithoutSaleInput, WarehousesUncheckedCreateWithoutSaleInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutSaleInput
    upsert?: WarehousesUpsertWithoutSaleInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutSaleInput, WarehousesUpdateWithoutSaleInput>, WarehousesUncheckedUpdateWithoutSaleInput>
  }

  export type PaymentMethodUpdateManyWithoutSaleNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutSaleInput, PaymentMethodUncheckedCreateWithoutSaleInput> | PaymentMethodCreateWithoutSaleInput[] | PaymentMethodUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutSaleInput | PaymentMethodCreateOrConnectWithoutSaleInput[]
    upsert?: PaymentMethodUpsertWithWhereUniqueWithoutSaleInput | PaymentMethodUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: PaymentMethodCreateManySaleInputEnvelope
    set?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    disconnect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    delete?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    update?: PaymentMethodUpdateWithWhereUniqueWithoutSaleInput | PaymentMethodUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: PaymentMethodUpdateManyWithWhereWithoutSaleInput | PaymentMethodUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[]
  }

  export type BalancePaymentUpdateManyWithoutSaleNestedInput = {
    create?: XOR<BalancePaymentCreateWithoutSaleInput, BalancePaymentUncheckedCreateWithoutSaleInput> | BalancePaymentCreateWithoutSaleInput[] | BalancePaymentUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutSaleInput | BalancePaymentCreateOrConnectWithoutSaleInput[]
    upsert?: BalancePaymentUpsertWithWhereUniqueWithoutSaleInput | BalancePaymentUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: BalancePaymentCreateManySaleInputEnvelope
    set?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    disconnect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    delete?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    update?: BalancePaymentUpdateWithWhereUniqueWithoutSaleInput | BalancePaymentUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: BalancePaymentUpdateManyWithWhereWithoutSaleInput | BalancePaymentUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
  }

  export type SaleItemUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<SaleItemCreateWithoutSaleInput, SaleItemUncheckedCreateWithoutSaleInput> | SaleItemCreateWithoutSaleInput[] | SaleItemUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutSaleInput | SaleItemCreateOrConnectWithoutSaleInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutSaleInput | SaleItemUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: SaleItemCreateManySaleInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutSaleInput | SaleItemUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutSaleInput | SaleItemUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type PaymentMethodUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutSaleInput, PaymentMethodUncheckedCreateWithoutSaleInput> | PaymentMethodCreateWithoutSaleInput[] | PaymentMethodUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutSaleInput | PaymentMethodCreateOrConnectWithoutSaleInput[]
    upsert?: PaymentMethodUpsertWithWhereUniqueWithoutSaleInput | PaymentMethodUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: PaymentMethodCreateManySaleInputEnvelope
    set?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    disconnect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    delete?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    connect?: PaymentMethodWhereUniqueInput | PaymentMethodWhereUniqueInput[]
    update?: PaymentMethodUpdateWithWhereUniqueWithoutSaleInput | PaymentMethodUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: PaymentMethodUpdateManyWithWhereWithoutSaleInput | PaymentMethodUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[]
  }

  export type BalancePaymentUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<BalancePaymentCreateWithoutSaleInput, BalancePaymentUncheckedCreateWithoutSaleInput> | BalancePaymentCreateWithoutSaleInput[] | BalancePaymentUncheckedCreateWithoutSaleInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutSaleInput | BalancePaymentCreateOrConnectWithoutSaleInput[]
    upsert?: BalancePaymentUpsertWithWhereUniqueWithoutSaleInput | BalancePaymentUpsertWithWhereUniqueWithoutSaleInput[]
    createMany?: BalancePaymentCreateManySaleInputEnvelope
    set?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    disconnect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    delete?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    update?: BalancePaymentUpdateWithWhereUniqueWithoutSaleInput | BalancePaymentUpdateWithWhereUniqueWithoutSaleInput[]
    updateMany?: BalancePaymentUpdateManyWithWhereWithoutSaleInput | BalancePaymentUpdateManyWithWhereWithoutSaleInput[]
    deleteMany?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
  }

  export type SaleCreateNestedOneWithoutSaleItemsInput = {
    create?: XOR<SaleCreateWithoutSaleItemsInput, SaleUncheckedCreateWithoutSaleItemsInput>
    connectOrCreate?: SaleCreateOrConnectWithoutSaleItemsInput
    connect?: SaleWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutSaleItemInput = {
    create?: XOR<ProductCreateWithoutSaleItemInput, ProductUncheckedCreateWithoutSaleItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSaleItemInput
    connect?: ProductWhereUniqueInput
  }

  export type WarehousesCreateNestedOneWithoutSaleItemInput = {
    create?: XOR<WarehousesCreateWithoutSaleItemInput, WarehousesUncheckedCreateWithoutSaleItemInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutSaleItemInput
    connect?: WarehousesWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutSaleItemInput = {
    create?: XOR<CustomerCreateWithoutSaleItemInput, CustomerUncheckedCreateWithoutSaleItemInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSaleItemInput
    connect?: CustomerWhereUniqueInput
  }

  export type SaleUpdateOneWithoutSaleItemsNestedInput = {
    create?: XOR<SaleCreateWithoutSaleItemsInput, SaleUncheckedCreateWithoutSaleItemsInput>
    connectOrCreate?: SaleCreateOrConnectWithoutSaleItemsInput
    upsert?: SaleUpsertWithoutSaleItemsInput
    disconnect?: SaleWhereInput | boolean
    delete?: SaleWhereInput | boolean
    connect?: SaleWhereUniqueInput
    update?: XOR<XOR<SaleUpdateToOneWithWhereWithoutSaleItemsInput, SaleUpdateWithoutSaleItemsInput>, SaleUncheckedUpdateWithoutSaleItemsInput>
  }

  export type ProductUpdateOneWithoutSaleItemNestedInput = {
    create?: XOR<ProductCreateWithoutSaleItemInput, ProductUncheckedCreateWithoutSaleItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSaleItemInput
    upsert?: ProductUpsertWithoutSaleItemInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSaleItemInput, ProductUpdateWithoutSaleItemInput>, ProductUncheckedUpdateWithoutSaleItemInput>
  }

  export type WarehousesUpdateOneWithoutSaleItemNestedInput = {
    create?: XOR<WarehousesCreateWithoutSaleItemInput, WarehousesUncheckedCreateWithoutSaleItemInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutSaleItemInput
    upsert?: WarehousesUpsertWithoutSaleItemInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutSaleItemInput, WarehousesUpdateWithoutSaleItemInput>, WarehousesUncheckedUpdateWithoutSaleItemInput>
  }

  export type CustomerUpdateOneWithoutSaleItemNestedInput = {
    create?: XOR<CustomerCreateWithoutSaleItemInput, CustomerUncheckedCreateWithoutSaleItemInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSaleItemInput
    upsert?: CustomerUpsertWithoutSaleItemInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutSaleItemInput, CustomerUpdateWithoutSaleItemInput>, CustomerUncheckedUpdateWithoutSaleItemInput>
  }

  export type PurchaseItemCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<PurchaseItemCreateWithoutPurchaseInput, PurchaseItemUncheckedCreateWithoutPurchaseInput> | PurchaseItemCreateWithoutPurchaseInput[] | PurchaseItemUncheckedCreateWithoutPurchaseInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutPurchaseInput | PurchaseItemCreateOrConnectWithoutPurchaseInput[]
    createMany?: PurchaseItemCreateManyPurchaseInputEnvelope
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
  }

  export type WarehousesCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<WarehousesCreateWithoutPurchaseInput, WarehousesUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutPurchaseInput
    connect?: WarehousesWhereUniqueInput
  }

  export type SupplierCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<SupplierCreateWithoutPurchaseInput, SupplierUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutPurchaseInput
    connect?: SupplierWhereUniqueInput
  }

  export type PurchaseItemUncheckedCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<PurchaseItemCreateWithoutPurchaseInput, PurchaseItemUncheckedCreateWithoutPurchaseInput> | PurchaseItemCreateWithoutPurchaseInput[] | PurchaseItemUncheckedCreateWithoutPurchaseInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutPurchaseInput | PurchaseItemCreateOrConnectWithoutPurchaseInput[]
    createMany?: PurchaseItemCreateManyPurchaseInputEnvelope
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
  }

  export type PurchaseItemUpdateManyWithoutPurchaseNestedInput = {
    create?: XOR<PurchaseItemCreateWithoutPurchaseInput, PurchaseItemUncheckedCreateWithoutPurchaseInput> | PurchaseItemCreateWithoutPurchaseInput[] | PurchaseItemUncheckedCreateWithoutPurchaseInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutPurchaseInput | PurchaseItemCreateOrConnectWithoutPurchaseInput[]
    upsert?: PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput | PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput[]
    createMany?: PurchaseItemCreateManyPurchaseInputEnvelope
    set?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    disconnect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    delete?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    update?: PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput | PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput[]
    updateMany?: PurchaseItemUpdateManyWithWhereWithoutPurchaseInput | PurchaseItemUpdateManyWithWhereWithoutPurchaseInput[]
    deleteMany?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
  }

  export type WarehousesUpdateOneWithoutPurchaseNestedInput = {
    create?: XOR<WarehousesCreateWithoutPurchaseInput, WarehousesUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutPurchaseInput
    upsert?: WarehousesUpsertWithoutPurchaseInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutPurchaseInput, WarehousesUpdateWithoutPurchaseInput>, WarehousesUncheckedUpdateWithoutPurchaseInput>
  }

  export type SupplierUpdateOneWithoutPurchaseNestedInput = {
    create?: XOR<SupplierCreateWithoutPurchaseInput, SupplierUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutPurchaseInput
    upsert?: SupplierUpsertWithoutPurchaseInput
    disconnect?: SupplierWhereInput | boolean
    delete?: SupplierWhereInput | boolean
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutPurchaseInput, SupplierUpdateWithoutPurchaseInput>, SupplierUncheckedUpdateWithoutPurchaseInput>
  }

  export type PurchaseItemUncheckedUpdateManyWithoutPurchaseNestedInput = {
    create?: XOR<PurchaseItemCreateWithoutPurchaseInput, PurchaseItemUncheckedCreateWithoutPurchaseInput> | PurchaseItemCreateWithoutPurchaseInput[] | PurchaseItemUncheckedCreateWithoutPurchaseInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutPurchaseInput | PurchaseItemCreateOrConnectWithoutPurchaseInput[]
    upsert?: PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput | PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput[]
    createMany?: PurchaseItemCreateManyPurchaseInputEnvelope
    set?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    disconnect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    delete?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    update?: PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput | PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput[]
    updateMany?: PurchaseItemUpdateManyWithWhereWithoutPurchaseInput | PurchaseItemUpdateManyWithWhereWithoutPurchaseInput[]
    deleteMany?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutPurchaseItemInput = {
    create?: XOR<ProductCreateWithoutPurchaseItemInput, ProductUncheckedCreateWithoutPurchaseItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPurchaseItemInput
    connect?: ProductWhereUniqueInput
  }

  export type WarehousesCreateNestedOneWithoutPurchaseItemInput = {
    create?: XOR<WarehousesCreateWithoutPurchaseItemInput, WarehousesUncheckedCreateWithoutPurchaseItemInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutPurchaseItemInput
    connect?: WarehousesWhereUniqueInput
  }

  export type PurchaseCreateNestedOneWithoutPurchaseItemInput = {
    create?: XOR<PurchaseCreateWithoutPurchaseItemInput, PurchaseUncheckedCreateWithoutPurchaseItemInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutPurchaseItemInput
    connect?: PurchaseWhereUniqueInput
  }

  export type ProductUpdateOneWithoutPurchaseItemNestedInput = {
    create?: XOR<ProductCreateWithoutPurchaseItemInput, ProductUncheckedCreateWithoutPurchaseItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPurchaseItemInput
    upsert?: ProductUpsertWithoutPurchaseItemInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutPurchaseItemInput, ProductUpdateWithoutPurchaseItemInput>, ProductUncheckedUpdateWithoutPurchaseItemInput>
  }

  export type WarehousesUpdateOneWithoutPurchaseItemNestedInput = {
    create?: XOR<WarehousesCreateWithoutPurchaseItemInput, WarehousesUncheckedCreateWithoutPurchaseItemInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutPurchaseItemInput
    upsert?: WarehousesUpsertWithoutPurchaseItemInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutPurchaseItemInput, WarehousesUpdateWithoutPurchaseItemInput>, WarehousesUncheckedUpdateWithoutPurchaseItemInput>
  }

  export type PurchaseUpdateOneWithoutPurchaseItemNestedInput = {
    create?: XOR<PurchaseCreateWithoutPurchaseItemInput, PurchaseUncheckedCreateWithoutPurchaseItemInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutPurchaseItemInput
    upsert?: PurchaseUpsertWithoutPurchaseItemInput
    disconnect?: PurchaseWhereInput | boolean
    delete?: PurchaseWhereInput | boolean
    connect?: PurchaseWhereUniqueInput
    update?: XOR<XOR<PurchaseUpdateToOneWithWhereWithoutPurchaseItemInput, PurchaseUpdateWithoutPurchaseItemInput>, PurchaseUncheckedUpdateWithoutPurchaseItemInput>
  }

  export type WarehousesCreateNestedOneWithoutCustomerInput = {
    create?: XOR<WarehousesCreateWithoutCustomerInput, WarehousesUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutCustomerInput
    connect?: WarehousesWhereUniqueInput
  }

  export type SaleCreateNestedManyWithoutSelectedCustomerInput = {
    create?: XOR<SaleCreateWithoutSelectedCustomerInput, SaleUncheckedCreateWithoutSelectedCustomerInput> | SaleCreateWithoutSelectedCustomerInput[] | SaleUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutSelectedCustomerInput | SaleCreateOrConnectWithoutSelectedCustomerInput[]
    createMany?: SaleCreateManySelectedCustomerInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type SaleItemCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SaleItemCreateWithoutCustomerInput, SaleItemUncheckedCreateWithoutCustomerInput> | SaleItemCreateWithoutCustomerInput[] | SaleItemUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutCustomerInput | SaleItemCreateOrConnectWithoutCustomerInput[]
    createMany?: SaleItemCreateManyCustomerInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type BalancePaymentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<BalancePaymentCreateWithoutCustomerInput, BalancePaymentUncheckedCreateWithoutCustomerInput> | BalancePaymentCreateWithoutCustomerInput[] | BalancePaymentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutCustomerInput | BalancePaymentCreateOrConnectWithoutCustomerInput[]
    createMany?: BalancePaymentCreateManyCustomerInputEnvelope
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
  }

  export type QuotationCreateNestedManyWithoutSelectedCustomerInput = {
    create?: XOR<QuotationCreateWithoutSelectedCustomerInput, QuotationUncheckedCreateWithoutSelectedCustomerInput> | QuotationCreateWithoutSelectedCustomerInput[] | QuotationUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutSelectedCustomerInput | QuotationCreateOrConnectWithoutSelectedCustomerInput[]
    createMany?: QuotationCreateManySelectedCustomerInputEnvelope
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
  }

  export type SaleUncheckedCreateNestedManyWithoutSelectedCustomerInput = {
    create?: XOR<SaleCreateWithoutSelectedCustomerInput, SaleUncheckedCreateWithoutSelectedCustomerInput> | SaleCreateWithoutSelectedCustomerInput[] | SaleUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutSelectedCustomerInput | SaleCreateOrConnectWithoutSelectedCustomerInput[]
    createMany?: SaleCreateManySelectedCustomerInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type SaleItemUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SaleItemCreateWithoutCustomerInput, SaleItemUncheckedCreateWithoutCustomerInput> | SaleItemCreateWithoutCustomerInput[] | SaleItemUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutCustomerInput | SaleItemCreateOrConnectWithoutCustomerInput[]
    createMany?: SaleItemCreateManyCustomerInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type BalancePaymentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<BalancePaymentCreateWithoutCustomerInput, BalancePaymentUncheckedCreateWithoutCustomerInput> | BalancePaymentCreateWithoutCustomerInput[] | BalancePaymentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutCustomerInput | BalancePaymentCreateOrConnectWithoutCustomerInput[]
    createMany?: BalancePaymentCreateManyCustomerInputEnvelope
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
  }

  export type QuotationUncheckedCreateNestedManyWithoutSelectedCustomerInput = {
    create?: XOR<QuotationCreateWithoutSelectedCustomerInput, QuotationUncheckedCreateWithoutSelectedCustomerInput> | QuotationCreateWithoutSelectedCustomerInput[] | QuotationUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutSelectedCustomerInput | QuotationCreateOrConnectWithoutSelectedCustomerInput[]
    createMany?: QuotationCreateManySelectedCustomerInputEnvelope
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
  }

  export type WarehousesUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<WarehousesCreateWithoutCustomerInput, WarehousesUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutCustomerInput
    upsert?: WarehousesUpsertWithoutCustomerInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutCustomerInput, WarehousesUpdateWithoutCustomerInput>, WarehousesUncheckedUpdateWithoutCustomerInput>
  }

  export type SaleUpdateManyWithoutSelectedCustomerNestedInput = {
    create?: XOR<SaleCreateWithoutSelectedCustomerInput, SaleUncheckedCreateWithoutSelectedCustomerInput> | SaleCreateWithoutSelectedCustomerInput[] | SaleUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutSelectedCustomerInput | SaleCreateOrConnectWithoutSelectedCustomerInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutSelectedCustomerInput | SaleUpsertWithWhereUniqueWithoutSelectedCustomerInput[]
    createMany?: SaleCreateManySelectedCustomerInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutSelectedCustomerInput | SaleUpdateWithWhereUniqueWithoutSelectedCustomerInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutSelectedCustomerInput | SaleUpdateManyWithWhereWithoutSelectedCustomerInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type SaleItemUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SaleItemCreateWithoutCustomerInput, SaleItemUncheckedCreateWithoutCustomerInput> | SaleItemCreateWithoutCustomerInput[] | SaleItemUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutCustomerInput | SaleItemCreateOrConnectWithoutCustomerInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutCustomerInput | SaleItemUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SaleItemCreateManyCustomerInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutCustomerInput | SaleItemUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutCustomerInput | SaleItemUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type BalancePaymentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<BalancePaymentCreateWithoutCustomerInput, BalancePaymentUncheckedCreateWithoutCustomerInput> | BalancePaymentCreateWithoutCustomerInput[] | BalancePaymentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutCustomerInput | BalancePaymentCreateOrConnectWithoutCustomerInput[]
    upsert?: BalancePaymentUpsertWithWhereUniqueWithoutCustomerInput | BalancePaymentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: BalancePaymentCreateManyCustomerInputEnvelope
    set?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    disconnect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    delete?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    update?: BalancePaymentUpdateWithWhereUniqueWithoutCustomerInput | BalancePaymentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: BalancePaymentUpdateManyWithWhereWithoutCustomerInput | BalancePaymentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
  }

  export type QuotationUpdateManyWithoutSelectedCustomerNestedInput = {
    create?: XOR<QuotationCreateWithoutSelectedCustomerInput, QuotationUncheckedCreateWithoutSelectedCustomerInput> | QuotationCreateWithoutSelectedCustomerInput[] | QuotationUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutSelectedCustomerInput | QuotationCreateOrConnectWithoutSelectedCustomerInput[]
    upsert?: QuotationUpsertWithWhereUniqueWithoutSelectedCustomerInput | QuotationUpsertWithWhereUniqueWithoutSelectedCustomerInput[]
    createMany?: QuotationCreateManySelectedCustomerInputEnvelope
    set?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    disconnect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    delete?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    update?: QuotationUpdateWithWhereUniqueWithoutSelectedCustomerInput | QuotationUpdateWithWhereUniqueWithoutSelectedCustomerInput[]
    updateMany?: QuotationUpdateManyWithWhereWithoutSelectedCustomerInput | QuotationUpdateManyWithWhereWithoutSelectedCustomerInput[]
    deleteMany?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
  }

  export type SaleUncheckedUpdateManyWithoutSelectedCustomerNestedInput = {
    create?: XOR<SaleCreateWithoutSelectedCustomerInput, SaleUncheckedCreateWithoutSelectedCustomerInput> | SaleCreateWithoutSelectedCustomerInput[] | SaleUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutSelectedCustomerInput | SaleCreateOrConnectWithoutSelectedCustomerInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutSelectedCustomerInput | SaleUpsertWithWhereUniqueWithoutSelectedCustomerInput[]
    createMany?: SaleCreateManySelectedCustomerInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutSelectedCustomerInput | SaleUpdateWithWhereUniqueWithoutSelectedCustomerInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutSelectedCustomerInput | SaleUpdateManyWithWhereWithoutSelectedCustomerInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type SaleItemUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SaleItemCreateWithoutCustomerInput, SaleItemUncheckedCreateWithoutCustomerInput> | SaleItemCreateWithoutCustomerInput[] | SaleItemUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutCustomerInput | SaleItemCreateOrConnectWithoutCustomerInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutCustomerInput | SaleItemUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SaleItemCreateManyCustomerInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutCustomerInput | SaleItemUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutCustomerInput | SaleItemUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type BalancePaymentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<BalancePaymentCreateWithoutCustomerInput, BalancePaymentUncheckedCreateWithoutCustomerInput> | BalancePaymentCreateWithoutCustomerInput[] | BalancePaymentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: BalancePaymentCreateOrConnectWithoutCustomerInput | BalancePaymentCreateOrConnectWithoutCustomerInput[]
    upsert?: BalancePaymentUpsertWithWhereUniqueWithoutCustomerInput | BalancePaymentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: BalancePaymentCreateManyCustomerInputEnvelope
    set?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    disconnect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    delete?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    connect?: BalancePaymentWhereUniqueInput | BalancePaymentWhereUniqueInput[]
    update?: BalancePaymentUpdateWithWhereUniqueWithoutCustomerInput | BalancePaymentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: BalancePaymentUpdateManyWithWhereWithoutCustomerInput | BalancePaymentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
  }

  export type QuotationUncheckedUpdateManyWithoutSelectedCustomerNestedInput = {
    create?: XOR<QuotationCreateWithoutSelectedCustomerInput, QuotationUncheckedCreateWithoutSelectedCustomerInput> | QuotationCreateWithoutSelectedCustomerInput[] | QuotationUncheckedCreateWithoutSelectedCustomerInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutSelectedCustomerInput | QuotationCreateOrConnectWithoutSelectedCustomerInput[]
    upsert?: QuotationUpsertWithWhereUniqueWithoutSelectedCustomerInput | QuotationUpsertWithWhereUniqueWithoutSelectedCustomerInput[]
    createMany?: QuotationCreateManySelectedCustomerInputEnvelope
    set?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    disconnect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    delete?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    update?: QuotationUpdateWithWhereUniqueWithoutSelectedCustomerInput | QuotationUpdateWithWhereUniqueWithoutSelectedCustomerInput[]
    updateMany?: QuotationUpdateManyWithWhereWithoutSelectedCustomerInput | QuotationUpdateManyWithWhereWithoutSelectedCustomerInput[]
    deleteMany?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
  }

  export type WarehousesCreateNestedOneWithoutSupplierInput = {
    create?: XOR<WarehousesCreateWithoutSupplierInput, WarehousesUncheckedCreateWithoutSupplierInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutSupplierInput
    connect?: WarehousesWhereUniqueInput
  }

  export type PurchaseCreateNestedManyWithoutSupplierInput = {
    create?: XOR<PurchaseCreateWithoutSupplierInput, PurchaseUncheckedCreateWithoutSupplierInput> | PurchaseCreateWithoutSupplierInput[] | PurchaseUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSupplierInput | PurchaseCreateOrConnectWithoutSupplierInput[]
    createMany?: PurchaseCreateManySupplierInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type PurchaseUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<PurchaseCreateWithoutSupplierInput, PurchaseUncheckedCreateWithoutSupplierInput> | PurchaseCreateWithoutSupplierInput[] | PurchaseUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSupplierInput | PurchaseCreateOrConnectWithoutSupplierInput[]
    createMany?: PurchaseCreateManySupplierInputEnvelope
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
  }

  export type WarehousesUpdateOneWithoutSupplierNestedInput = {
    create?: XOR<WarehousesCreateWithoutSupplierInput, WarehousesUncheckedCreateWithoutSupplierInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutSupplierInput
    upsert?: WarehousesUpsertWithoutSupplierInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutSupplierInput, WarehousesUpdateWithoutSupplierInput>, WarehousesUncheckedUpdateWithoutSupplierInput>
  }

  export type PurchaseUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<PurchaseCreateWithoutSupplierInput, PurchaseUncheckedCreateWithoutSupplierInput> | PurchaseCreateWithoutSupplierInput[] | PurchaseUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSupplierInput | PurchaseCreateOrConnectWithoutSupplierInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutSupplierInput | PurchaseUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: PurchaseCreateManySupplierInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutSupplierInput | PurchaseUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutSupplierInput | PurchaseUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type PurchaseUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<PurchaseCreateWithoutSupplierInput, PurchaseUncheckedCreateWithoutSupplierInput> | PurchaseCreateWithoutSupplierInput[] | PurchaseUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseCreateOrConnectWithoutSupplierInput | PurchaseCreateOrConnectWithoutSupplierInput[]
    upsert?: PurchaseUpsertWithWhereUniqueWithoutSupplierInput | PurchaseUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: PurchaseCreateManySupplierInputEnvelope
    set?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    disconnect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    delete?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    connect?: PurchaseWhereUniqueInput | PurchaseWhereUniqueInput[]
    update?: PurchaseUpdateWithWhereUniqueWithoutSupplierInput | PurchaseUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: PurchaseUpdateManyWithWhereWithoutSupplierInput | PurchaseUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
  }

  export type WarehousesCreateNestedOneWithoutProductsInput = {
    create?: XOR<WarehousesCreateWithoutProductsInput, WarehousesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutProductsInput
    connect?: WarehousesWhereUniqueInput
  }

  export type SaleItemCreateNestedManyWithoutProductInput = {
    create?: XOR<SaleItemCreateWithoutProductInput, SaleItemUncheckedCreateWithoutProductInput> | SaleItemCreateWithoutProductInput[] | SaleItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutProductInput | SaleItemCreateOrConnectWithoutProductInput[]
    createMany?: SaleItemCreateManyProductInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type PurchaseItemCreateNestedManyWithoutProductInput = {
    create?: XOR<PurchaseItemCreateWithoutProductInput, PurchaseItemUncheckedCreateWithoutProductInput> | PurchaseItemCreateWithoutProductInput[] | PurchaseItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutProductInput | PurchaseItemCreateOrConnectWithoutProductInput[]
    createMany?: PurchaseItemCreateManyProductInputEnvelope
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
  }

  export type QuotationItemCreateNestedManyWithoutProductInput = {
    create?: XOR<QuotationItemCreateWithoutProductInput, QuotationItemUncheckedCreateWithoutProductInput> | QuotationItemCreateWithoutProductInput[] | QuotationItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutProductInput | QuotationItemCreateOrConnectWithoutProductInput[]
    createMany?: QuotationItemCreateManyProductInputEnvelope
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
  }

  export type SaleItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SaleItemCreateWithoutProductInput, SaleItemUncheckedCreateWithoutProductInput> | SaleItemCreateWithoutProductInput[] | SaleItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutProductInput | SaleItemCreateOrConnectWithoutProductInput[]
    createMany?: SaleItemCreateManyProductInputEnvelope
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
  }

  export type PurchaseItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<PurchaseItemCreateWithoutProductInput, PurchaseItemUncheckedCreateWithoutProductInput> | PurchaseItemCreateWithoutProductInput[] | PurchaseItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutProductInput | PurchaseItemCreateOrConnectWithoutProductInput[]
    createMany?: PurchaseItemCreateManyProductInputEnvelope
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
  }

  export type QuotationItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<QuotationItemCreateWithoutProductInput, QuotationItemUncheckedCreateWithoutProductInput> | QuotationItemCreateWithoutProductInput[] | QuotationItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutProductInput | QuotationItemCreateOrConnectWithoutProductInput[]
    createMany?: QuotationItemCreateManyProductInputEnvelope
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
  }

  export type EnumunitFieldUpdateOperationsInput = {
    set?: $Enums.unit
  }

  export type WarehousesUpdateOneWithoutProductsNestedInput = {
    create?: XOR<WarehousesCreateWithoutProductsInput, WarehousesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutProductsInput
    upsert?: WarehousesUpsertWithoutProductsInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutProductsInput, WarehousesUpdateWithoutProductsInput>, WarehousesUncheckedUpdateWithoutProductsInput>
  }

  export type SaleItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<SaleItemCreateWithoutProductInput, SaleItemUncheckedCreateWithoutProductInput> | SaleItemCreateWithoutProductInput[] | SaleItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutProductInput | SaleItemCreateOrConnectWithoutProductInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutProductInput | SaleItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SaleItemCreateManyProductInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutProductInput | SaleItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutProductInput | SaleItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type PurchaseItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<PurchaseItemCreateWithoutProductInput, PurchaseItemUncheckedCreateWithoutProductInput> | PurchaseItemCreateWithoutProductInput[] | PurchaseItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutProductInput | PurchaseItemCreateOrConnectWithoutProductInput[]
    upsert?: PurchaseItemUpsertWithWhereUniqueWithoutProductInput | PurchaseItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PurchaseItemCreateManyProductInputEnvelope
    set?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    disconnect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    delete?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    update?: PurchaseItemUpdateWithWhereUniqueWithoutProductInput | PurchaseItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PurchaseItemUpdateManyWithWhereWithoutProductInput | PurchaseItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
  }

  export type QuotationItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<QuotationItemCreateWithoutProductInput, QuotationItemUncheckedCreateWithoutProductInput> | QuotationItemCreateWithoutProductInput[] | QuotationItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutProductInput | QuotationItemCreateOrConnectWithoutProductInput[]
    upsert?: QuotationItemUpsertWithWhereUniqueWithoutProductInput | QuotationItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: QuotationItemCreateManyProductInputEnvelope
    set?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    disconnect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    delete?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    update?: QuotationItemUpdateWithWhereUniqueWithoutProductInput | QuotationItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: QuotationItemUpdateManyWithWhereWithoutProductInput | QuotationItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
  }

  export type SaleItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SaleItemCreateWithoutProductInput, SaleItemUncheckedCreateWithoutProductInput> | SaleItemCreateWithoutProductInput[] | SaleItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaleItemCreateOrConnectWithoutProductInput | SaleItemCreateOrConnectWithoutProductInput[]
    upsert?: SaleItemUpsertWithWhereUniqueWithoutProductInput | SaleItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SaleItemCreateManyProductInputEnvelope
    set?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    disconnect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    delete?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    connect?: SaleItemWhereUniqueInput | SaleItemWhereUniqueInput[]
    update?: SaleItemUpdateWithWhereUniqueWithoutProductInput | SaleItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SaleItemUpdateManyWithWhereWithoutProductInput | SaleItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
  }

  export type PurchaseItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<PurchaseItemCreateWithoutProductInput, PurchaseItemUncheckedCreateWithoutProductInput> | PurchaseItemCreateWithoutProductInput[] | PurchaseItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: PurchaseItemCreateOrConnectWithoutProductInput | PurchaseItemCreateOrConnectWithoutProductInput[]
    upsert?: PurchaseItemUpsertWithWhereUniqueWithoutProductInput | PurchaseItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: PurchaseItemCreateManyProductInputEnvelope
    set?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    disconnect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    delete?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    connect?: PurchaseItemWhereUniqueInput | PurchaseItemWhereUniqueInput[]
    update?: PurchaseItemUpdateWithWhereUniqueWithoutProductInput | PurchaseItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: PurchaseItemUpdateManyWithWhereWithoutProductInput | PurchaseItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
  }

  export type QuotationItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<QuotationItemCreateWithoutProductInput, QuotationItemUncheckedCreateWithoutProductInput> | QuotationItemCreateWithoutProductInput[] | QuotationItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutProductInput | QuotationItemCreateOrConnectWithoutProductInput[]
    upsert?: QuotationItemUpsertWithWhereUniqueWithoutProductInput | QuotationItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: QuotationItemCreateManyProductInputEnvelope
    set?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    disconnect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    delete?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    update?: QuotationItemUpdateWithWhereUniqueWithoutProductInput | QuotationItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: QuotationItemUpdateManyWithWhereWithoutProductInput | QuotationItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
  }

  export type WarehousesCreateNestedOneWithoutPaymentMethodInput = {
    create?: XOR<WarehousesCreateWithoutPaymentMethodInput, WarehousesUncheckedCreateWithoutPaymentMethodInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutPaymentMethodInput
    connect?: WarehousesWhereUniqueInput
  }

  export type SaleCreateNestedOneWithoutPaymentMethodInput = {
    create?: XOR<SaleCreateWithoutPaymentMethodInput, SaleUncheckedCreateWithoutPaymentMethodInput>
    connectOrCreate?: SaleCreateOrConnectWithoutPaymentMethodInput
    connect?: SaleWhereUniqueInput
  }

  export type WarehousesUpdateOneWithoutPaymentMethodNestedInput = {
    create?: XOR<WarehousesCreateWithoutPaymentMethodInput, WarehousesUncheckedCreateWithoutPaymentMethodInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutPaymentMethodInput
    upsert?: WarehousesUpsertWithoutPaymentMethodInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutPaymentMethodInput, WarehousesUpdateWithoutPaymentMethodInput>, WarehousesUncheckedUpdateWithoutPaymentMethodInput>
  }

  export type SaleUpdateOneWithoutPaymentMethodNestedInput = {
    create?: XOR<SaleCreateWithoutPaymentMethodInput, SaleUncheckedCreateWithoutPaymentMethodInput>
    connectOrCreate?: SaleCreateOrConnectWithoutPaymentMethodInput
    upsert?: SaleUpsertWithoutPaymentMethodInput
    disconnect?: SaleWhereInput | boolean
    delete?: SaleWhereInput | boolean
    connect?: SaleWhereUniqueInput
    update?: XOR<XOR<SaleUpdateToOneWithWhereWithoutPaymentMethodInput, SaleUpdateWithoutPaymentMethodInput>, SaleUncheckedUpdateWithoutPaymentMethodInput>
  }

  export type WarehousesCreateNestedOneWithoutReceiptSettingsInput = {
    create?: XOR<WarehousesCreateWithoutReceiptSettingsInput, WarehousesUncheckedCreateWithoutReceiptSettingsInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutReceiptSettingsInput
    connect?: WarehousesWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WarehousesUpdateOneWithoutReceiptSettingsNestedInput = {
    create?: XOR<WarehousesCreateWithoutReceiptSettingsInput, WarehousesUncheckedCreateWithoutReceiptSettingsInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutReceiptSettingsInput
    upsert?: WarehousesUpsertWithoutReceiptSettingsInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutReceiptSettingsInput, WarehousesUpdateWithoutReceiptSettingsInput>, WarehousesUncheckedUpdateWithoutReceiptSettingsInput>
  }

  export type CustomerCreateNestedOneWithoutBalancePaymentInput = {
    create?: XOR<CustomerCreateWithoutBalancePaymentInput, CustomerUncheckedCreateWithoutBalancePaymentInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBalancePaymentInput
    connect?: CustomerWhereUniqueInput
  }

  export type SaleCreateNestedOneWithoutBalancePaymentInput = {
    create?: XOR<SaleCreateWithoutBalancePaymentInput, SaleUncheckedCreateWithoutBalancePaymentInput>
    connectOrCreate?: SaleCreateOrConnectWithoutBalancePaymentInput
    connect?: SaleWhereUniqueInput
  }

  export type WarehousesCreateNestedOneWithoutBalancePaymentInput = {
    create?: XOR<WarehousesCreateWithoutBalancePaymentInput, WarehousesUncheckedCreateWithoutBalancePaymentInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutBalancePaymentInput
    connect?: WarehousesWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutBalancePaymentNestedInput = {
    create?: XOR<CustomerCreateWithoutBalancePaymentInput, CustomerUncheckedCreateWithoutBalancePaymentInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBalancePaymentInput
    upsert?: CustomerUpsertWithoutBalancePaymentInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutBalancePaymentInput, CustomerUpdateWithoutBalancePaymentInput>, CustomerUncheckedUpdateWithoutBalancePaymentInput>
  }

  export type SaleUpdateOneWithoutBalancePaymentNestedInput = {
    create?: XOR<SaleCreateWithoutBalancePaymentInput, SaleUncheckedCreateWithoutBalancePaymentInput>
    connectOrCreate?: SaleCreateOrConnectWithoutBalancePaymentInput
    upsert?: SaleUpsertWithoutBalancePaymentInput
    disconnect?: SaleWhereInput | boolean
    delete?: SaleWhereInput | boolean
    connect?: SaleWhereUniqueInput
    update?: XOR<XOR<SaleUpdateToOneWithWhereWithoutBalancePaymentInput, SaleUpdateWithoutBalancePaymentInput>, SaleUncheckedUpdateWithoutBalancePaymentInput>
  }

  export type WarehousesUpdateOneWithoutBalancePaymentNestedInput = {
    create?: XOR<WarehousesCreateWithoutBalancePaymentInput, WarehousesUncheckedCreateWithoutBalancePaymentInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutBalancePaymentInput
    upsert?: WarehousesUpsertWithoutBalancePaymentInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutBalancePaymentInput, WarehousesUpdateWithoutBalancePaymentInput>, WarehousesUncheckedUpdateWithoutBalancePaymentInput>
  }

  export type QuotationItemCreateNestedManyWithoutQuotationInput = {
    create?: XOR<QuotationItemCreateWithoutQuotationInput, QuotationItemUncheckedCreateWithoutQuotationInput> | QuotationItemCreateWithoutQuotationInput[] | QuotationItemUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutQuotationInput | QuotationItemCreateOrConnectWithoutQuotationInput[]
    createMany?: QuotationItemCreateManyQuotationInputEnvelope
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
  }

  export type CustomerCreateNestedOneWithoutQuotationInput = {
    create?: XOR<CustomerCreateWithoutQuotationInput, CustomerUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutQuotationInput
    connect?: CustomerWhereUniqueInput
  }

  export type WarehousesCreateNestedOneWithoutQuotationInput = {
    create?: XOR<WarehousesCreateWithoutQuotationInput, WarehousesUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutQuotationInput
    connect?: WarehousesWhereUniqueInput
  }

  export type QuotationItemUncheckedCreateNestedManyWithoutQuotationInput = {
    create?: XOR<QuotationItemCreateWithoutQuotationInput, QuotationItemUncheckedCreateWithoutQuotationInput> | QuotationItemCreateWithoutQuotationInput[] | QuotationItemUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutQuotationInput | QuotationItemCreateOrConnectWithoutQuotationInput[]
    createMany?: QuotationItemCreateManyQuotationInputEnvelope
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
  }

  export type QuotationItemUpdateManyWithoutQuotationNestedInput = {
    create?: XOR<QuotationItemCreateWithoutQuotationInput, QuotationItemUncheckedCreateWithoutQuotationInput> | QuotationItemCreateWithoutQuotationInput[] | QuotationItemUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutQuotationInput | QuotationItemCreateOrConnectWithoutQuotationInput[]
    upsert?: QuotationItemUpsertWithWhereUniqueWithoutQuotationInput | QuotationItemUpsertWithWhereUniqueWithoutQuotationInput[]
    createMany?: QuotationItemCreateManyQuotationInputEnvelope
    set?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    disconnect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    delete?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    update?: QuotationItemUpdateWithWhereUniqueWithoutQuotationInput | QuotationItemUpdateWithWhereUniqueWithoutQuotationInput[]
    updateMany?: QuotationItemUpdateManyWithWhereWithoutQuotationInput | QuotationItemUpdateManyWithWhereWithoutQuotationInput[]
    deleteMany?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
  }

  export type CustomerUpdateOneWithoutQuotationNestedInput = {
    create?: XOR<CustomerCreateWithoutQuotationInput, CustomerUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutQuotationInput
    upsert?: CustomerUpsertWithoutQuotationInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutQuotationInput, CustomerUpdateWithoutQuotationInput>, CustomerUncheckedUpdateWithoutQuotationInput>
  }

  export type WarehousesUpdateOneWithoutQuotationNestedInput = {
    create?: XOR<WarehousesCreateWithoutQuotationInput, WarehousesUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutQuotationInput
    upsert?: WarehousesUpsertWithoutQuotationInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutQuotationInput, WarehousesUpdateWithoutQuotationInput>, WarehousesUncheckedUpdateWithoutQuotationInput>
  }

  export type QuotationItemUncheckedUpdateManyWithoutQuotationNestedInput = {
    create?: XOR<QuotationItemCreateWithoutQuotationInput, QuotationItemUncheckedCreateWithoutQuotationInput> | QuotationItemCreateWithoutQuotationInput[] | QuotationItemUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationItemCreateOrConnectWithoutQuotationInput | QuotationItemCreateOrConnectWithoutQuotationInput[]
    upsert?: QuotationItemUpsertWithWhereUniqueWithoutQuotationInput | QuotationItemUpsertWithWhereUniqueWithoutQuotationInput[]
    createMany?: QuotationItemCreateManyQuotationInputEnvelope
    set?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    disconnect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    delete?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    connect?: QuotationItemWhereUniqueInput | QuotationItemWhereUniqueInput[]
    update?: QuotationItemUpdateWithWhereUniqueWithoutQuotationInput | QuotationItemUpdateWithWhereUniqueWithoutQuotationInput[]
    updateMany?: QuotationItemUpdateManyWithWhereWithoutQuotationInput | QuotationItemUpdateManyWithWhereWithoutQuotationInput[]
    deleteMany?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
  }

  export type QuotationCreateNestedOneWithoutQuotationItemsInput = {
    create?: XOR<QuotationCreateWithoutQuotationItemsInput, QuotationUncheckedCreateWithoutQuotationItemsInput>
    connectOrCreate?: QuotationCreateOrConnectWithoutQuotationItemsInput
    connect?: QuotationWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutQuotationItemInput = {
    create?: XOR<ProductCreateWithoutQuotationItemInput, ProductUncheckedCreateWithoutQuotationItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutQuotationItemInput
    connect?: ProductWhereUniqueInput
  }

  export type WarehousesCreateNestedOneWithoutQuotationItemInput = {
    create?: XOR<WarehousesCreateWithoutQuotationItemInput, WarehousesUncheckedCreateWithoutQuotationItemInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutQuotationItemInput
    connect?: WarehousesWhereUniqueInput
  }

  export type QuotationUpdateOneWithoutQuotationItemsNestedInput = {
    create?: XOR<QuotationCreateWithoutQuotationItemsInput, QuotationUncheckedCreateWithoutQuotationItemsInput>
    connectOrCreate?: QuotationCreateOrConnectWithoutQuotationItemsInput
    upsert?: QuotationUpsertWithoutQuotationItemsInput
    disconnect?: QuotationWhereInput | boolean
    delete?: QuotationWhereInput | boolean
    connect?: QuotationWhereUniqueInput
    update?: XOR<XOR<QuotationUpdateToOneWithWhereWithoutQuotationItemsInput, QuotationUpdateWithoutQuotationItemsInput>, QuotationUncheckedUpdateWithoutQuotationItemsInput>
  }

  export type ProductUpdateOneWithoutQuotationItemNestedInput = {
    create?: XOR<ProductCreateWithoutQuotationItemInput, ProductUncheckedCreateWithoutQuotationItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutQuotationItemInput
    upsert?: ProductUpsertWithoutQuotationItemInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutQuotationItemInput, ProductUpdateWithoutQuotationItemInput>, ProductUncheckedUpdateWithoutQuotationItemInput>
  }

  export type WarehousesUpdateOneWithoutQuotationItemNestedInput = {
    create?: XOR<WarehousesCreateWithoutQuotationItemInput, WarehousesUncheckedCreateWithoutQuotationItemInput>
    connectOrCreate?: WarehousesCreateOrConnectWithoutQuotationItemInput
    upsert?: WarehousesUpsertWithoutQuotationItemInput
    disconnect?: WarehousesWhereInput | boolean
    delete?: WarehousesWhereInput | boolean
    connect?: WarehousesWhereUniqueInput
    update?: XOR<XOR<WarehousesUpdateToOneWithWhereWithoutQuotationItemInput, WarehousesUpdateWithoutQuotationItemInput>, WarehousesUncheckedUpdateWithoutQuotationItemInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumroleFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[]
    notIn?: $Enums.role[]
    not?: NestedEnumroleFilter<$PrismaModel> | $Enums.role
  }

  export type NestedEnumroleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.role | EnumroleFieldRefInput<$PrismaModel>
    in?: $Enums.role[]
    notIn?: $Enums.role[]
    not?: NestedEnumroleWithAggregatesFilter<$PrismaModel> | $Enums.role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumroleFilter<$PrismaModel>
    _max?: NestedEnumroleFilter<$PrismaModel>
  }

  export type NestedEnummodeFilter<$PrismaModel = never> = {
    equals?: $Enums.mode | EnummodeFieldRefInput<$PrismaModel>
    in?: $Enums.mode[]
    notIn?: $Enums.mode[]
    not?: NestedEnummodeFilter<$PrismaModel> | $Enums.mode
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnummodeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mode | EnummodeFieldRefInput<$PrismaModel>
    in?: $Enums.mode[]
    notIn?: $Enums.mode[]
    not?: NestedEnummodeWithAggregatesFilter<$PrismaModel> | $Enums.mode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummodeFilter<$PrismaModel>
    _max?: NestedEnummodeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumunitFilter<$PrismaModel = never> = {
    equals?: $Enums.unit | EnumunitFieldRefInput<$PrismaModel>
    in?: $Enums.unit[]
    notIn?: $Enums.unit[]
    not?: NestedEnumunitFilter<$PrismaModel> | $Enums.unit
  }

  export type NestedEnumunitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.unit | EnumunitFieldRefInput<$PrismaModel>
    in?: $Enums.unit[]
    notIn?: $Enums.unit[]
    not?: NestedEnumunitWithAggregatesFilter<$PrismaModel> | $Enums.unit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumunitFilter<$PrismaModel>
    _max?: NestedEnumunitFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type WarehousesCreateWithoutUsersInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutUsersInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutUsersInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutUsersInput, WarehousesUncheckedCreateWithoutUsersInput>
  }

  export type WarehousesUpsertWithoutUsersInput = {
    update: XOR<WarehousesUpdateWithoutUsersInput, WarehousesUncheckedUpdateWithoutUsersInput>
    create: XOR<WarehousesCreateWithoutUsersInput, WarehousesUncheckedCreateWithoutUsersInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutUsersInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutUsersInput, WarehousesUncheckedUpdateWithoutUsersInput>
  }

  export type WarehousesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type usersCreateWithoutWarehousesInput = {
    id?: string
    email: string
    userName: string
    phoneNumber: string
    password: string
    role: $Enums.role
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type usersUncheckedCreateWithoutWarehousesInput = {
    id?: string
    email: string
    userName: string
    phoneNumber: string
    password: string
    role: $Enums.role
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type usersCreateOrConnectWithoutWarehousesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutWarehousesInput, usersUncheckedCreateWithoutWarehousesInput>
  }

  export type usersCreateManyWarehousesInputEnvelope = {
    data: usersCreateManyWarehousesInput | usersCreateManyWarehousesInput[]
  }

  export type ProductCreateWithoutWarehousesInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    SaleItem?: SaleItemCreateNestedManyWithoutProductInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutWarehousesInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    SaleItem?: SaleItemUncheckedCreateNestedManyWithoutProductInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutWarehousesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutWarehousesInput, ProductUncheckedCreateWithoutWarehousesInput>
  }

  export type ProductCreateManyWarehousesInputEnvelope = {
    data: ProductCreateManyWarehousesInput | ProductCreateManyWarehousesInput[]
  }

  export type CustomerCreateWithoutWarehousesInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Sale?: SaleCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutCustomerInput
    quotation?: QuotationCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerUncheckedCreateWithoutWarehousesInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Sale?: SaleUncheckedCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutCustomerInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerCreateOrConnectWithoutWarehousesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutWarehousesInput, CustomerUncheckedCreateWithoutWarehousesInput>
  }

  export type CustomerCreateManyWarehousesInputEnvelope = {
    data: CustomerCreateManyWarehousesInput | CustomerCreateManyWarehousesInput[]
  }

  export type SaleItemCreateWithoutWarehousesInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    sale?: SaleCreateNestedOneWithoutSaleItemsInput
    product?: ProductCreateNestedOneWithoutSaleItemInput
    Customer?: CustomerCreateNestedOneWithoutSaleItemInput
  }

  export type SaleItemUncheckedCreateWithoutWarehousesInput = {
    id?: string
    saleId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type SaleItemCreateOrConnectWithoutWarehousesInput = {
    where: SaleItemWhereUniqueInput
    create: XOR<SaleItemCreateWithoutWarehousesInput, SaleItemUncheckedCreateWithoutWarehousesInput>
  }

  export type SaleItemCreateManyWarehousesInputEnvelope = {
    data: SaleItemCreateManyWarehousesInput | SaleItemCreateManyWarehousesInput[]
  }

  export type SaleCreateWithoutWarehousesInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemCreateNestedManyWithoutSaleInput
    selectedCustomer?: CustomerCreateNestedOneWithoutSaleInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutWarehousesInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemUncheckedCreateNestedManyWithoutSaleInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutWarehousesInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutWarehousesInput, SaleUncheckedCreateWithoutWarehousesInput>
  }

  export type SaleCreateManyWarehousesInputEnvelope = {
    data: SaleCreateManyWarehousesInput | SaleCreateManyWarehousesInput[]
  }

  export type PaymentMethodCreateWithoutWarehousesInput = {
    id?: string
    method: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Sale?: SaleCreateNestedOneWithoutPaymentMethodInput
  }

  export type PaymentMethodUncheckedCreateWithoutWarehousesInput = {
    id?: string
    method: string
    amount: number
    saleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type PaymentMethodCreateOrConnectWithoutWarehousesInput = {
    where: PaymentMethodWhereUniqueInput
    create: XOR<PaymentMethodCreateWithoutWarehousesInput, PaymentMethodUncheckedCreateWithoutWarehousesInput>
  }

  export type PaymentMethodCreateManyWarehousesInputEnvelope = {
    data: PaymentMethodCreateManyWarehousesInput | PaymentMethodCreateManyWarehousesInput[]
  }

  export type PurchaseCreateWithoutWarehousesInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchaseItem?: PurchaseItemCreateNestedManyWithoutPurchaseInput
    Supplier?: SupplierCreateNestedOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutWarehousesInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    supplierId?: string | null
    isDeleted?: boolean
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutWarehousesInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutWarehousesInput, PurchaseUncheckedCreateWithoutWarehousesInput>
  }

  export type PurchaseCreateManyWarehousesInputEnvelope = {
    data: PurchaseCreateManyWarehousesInput | PurchaseCreateManyWarehousesInput[]
  }

  export type PurchaseItemCreateWithoutWarehousesInput = {
    id?: string
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    product?: ProductCreateNestedOneWithoutPurchaseItemInput
    Purchase?: PurchaseCreateNestedOneWithoutPurchaseItemInput
  }

  export type PurchaseItemUncheckedCreateWithoutWarehousesInput = {
    id?: string
    productId?: string | null
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    purchaseId?: string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type PurchaseItemCreateOrConnectWithoutWarehousesInput = {
    where: PurchaseItemWhereUniqueInput
    create: XOR<PurchaseItemCreateWithoutWarehousesInput, PurchaseItemUncheckedCreateWithoutWarehousesInput>
  }

  export type PurchaseItemCreateManyWarehousesInputEnvelope = {
    data: PurchaseItemCreateManyWarehousesInput | PurchaseItemCreateManyWarehousesInput[]
  }

  export type SupplierCreateWithoutWarehousesInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchase?: PurchaseCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutWarehousesInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchase?: PurchaseUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutWarehousesInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutWarehousesInput, SupplierUncheckedCreateWithoutWarehousesInput>
  }

  export type SupplierCreateManyWarehousesInputEnvelope = {
    data: SupplierCreateManyWarehousesInput | SupplierCreateManyWarehousesInput[]
  }

  export type ReceiptSettingsCreateWithoutWarehousesInput = {
    id?: string
    companyName: string
    businessName: string
    address: string
    city: string
    state: string
    country: string
    phone: string
    email: string
    website: string
    receiptTitle?: string | null
    headerMessage?: string | null
    footerMessage?: string | null
    showLogo?: boolean | null
    logoUrl?: string | null
    showQrCode?: boolean | null
    qrCodeContent?: string | null
    customQrContent?: string | null
    showCustomerInfo?: boolean | null
    showCashierInfo?: boolean | null
    showItemCodes?: boolean | null
    showItemDescriptions?: boolean | null
    showTaxBreakdown?: boolean | null
    showPaymentMethods?: boolean | null
    showBalance?: boolean | null
    showTimestamp?: boolean | null
    use24HourFormat?: boolean | null
    showItemNumbers?: boolean | null
    showRunningTotal?: boolean | null
    paperSize?: string | null
    fontSize?: string | null
    printDensity?: string | null
    lineSpacing?: string | null
    primaryColor?: string | null
    accentColor?: string | null
    fontFamily?: string | null
    printCopyCount?: number | null
    autoPrint?: boolean | null
    language?: string | null
    currency?: string | null
    currencySymbol?: string | null
    currencyPosition?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type ReceiptSettingsUncheckedCreateWithoutWarehousesInput = {
    id?: string
    companyName: string
    businessName: string
    address: string
    city: string
    state: string
    country: string
    phone: string
    email: string
    website: string
    receiptTitle?: string | null
    headerMessage?: string | null
    footerMessage?: string | null
    showLogo?: boolean | null
    logoUrl?: string | null
    showQrCode?: boolean | null
    qrCodeContent?: string | null
    customQrContent?: string | null
    showCustomerInfo?: boolean | null
    showCashierInfo?: boolean | null
    showItemCodes?: boolean | null
    showItemDescriptions?: boolean | null
    showTaxBreakdown?: boolean | null
    showPaymentMethods?: boolean | null
    showBalance?: boolean | null
    showTimestamp?: boolean | null
    use24HourFormat?: boolean | null
    showItemNumbers?: boolean | null
    showRunningTotal?: boolean | null
    paperSize?: string | null
    fontSize?: string | null
    printDensity?: string | null
    lineSpacing?: string | null
    primaryColor?: string | null
    accentColor?: string | null
    fontFamily?: string | null
    printCopyCount?: number | null
    autoPrint?: boolean | null
    language?: string | null
    currency?: string | null
    currencySymbol?: string | null
    currencyPosition?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type ReceiptSettingsCreateOrConnectWithoutWarehousesInput = {
    where: ReceiptSettingsWhereUniqueInput
    create: XOR<ReceiptSettingsCreateWithoutWarehousesInput, ReceiptSettingsUncheckedCreateWithoutWarehousesInput>
  }

  export type ReceiptSettingsCreateManyWarehousesInputEnvelope = {
    data: ReceiptSettingsCreateManyWarehousesInput | ReceiptSettingsCreateManyWarehousesInput[]
  }

  export type BalancePaymentCreateWithoutWarehousesInput = {
    id?: string
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    customer: CustomerCreateNestedOneWithoutBalancePaymentInput
    sale?: SaleCreateNestedOneWithoutBalancePaymentInput
  }

  export type BalancePaymentUncheckedCreateWithoutWarehousesInput = {
    id?: string
    customerId: string
    saleId?: string | null
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentCreateOrConnectWithoutWarehousesInput = {
    where: BalancePaymentWhereUniqueInput
    create: XOR<BalancePaymentCreateWithoutWarehousesInput, BalancePaymentUncheckedCreateWithoutWarehousesInput>
  }

  export type BalancePaymentCreateManyWarehousesInputEnvelope = {
    data: BalancePaymentCreateManyWarehousesInput | BalancePaymentCreateManyWarehousesInput[]
  }

  export type QuotationCreateWithoutWarehousesInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotationItems?: QuotationItemCreateNestedManyWithoutQuotationInput
    selectedCustomer?: CustomerCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUncheckedCreateWithoutWarehousesInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotationItems?: QuotationItemUncheckedCreateNestedManyWithoutQuotationInput
  }

  export type QuotationCreateOrConnectWithoutWarehousesInput = {
    where: QuotationWhereUniqueInput
    create: XOR<QuotationCreateWithoutWarehousesInput, QuotationUncheckedCreateWithoutWarehousesInput>
  }

  export type QuotationCreateManyWarehousesInputEnvelope = {
    data: QuotationCreateManyWarehousesInput | QuotationCreateManyWarehousesInput[]
  }

  export type QuotationItemCreateWithoutWarehousesInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotation?: QuotationCreateNestedOneWithoutQuotationItemsInput
    product?: ProductCreateNestedOneWithoutQuotationItemInput
  }

  export type QuotationItemUncheckedCreateWithoutWarehousesInput = {
    id?: string
    quotationId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationItemCreateOrConnectWithoutWarehousesInput = {
    where: QuotationItemWhereUniqueInput
    create: XOR<QuotationItemCreateWithoutWarehousesInput, QuotationItemUncheckedCreateWithoutWarehousesInput>
  }

  export type QuotationItemCreateManyWarehousesInputEnvelope = {
    data: QuotationItemCreateManyWarehousesInput | QuotationItemCreateManyWarehousesInput[]
  }

  export type usersUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutWarehousesInput, usersUncheckedUpdateWithoutWarehousesInput>
    create: XOR<usersCreateWithoutWarehousesInput, usersUncheckedCreateWithoutWarehousesInput>
  }

  export type usersUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutWarehousesInput, usersUncheckedUpdateWithoutWarehousesInput>
  }

  export type usersUpdateManyWithWhereWithoutWarehousesInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    id?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    userName?: StringFilter<"users"> | string
    phoneNumber?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: EnumroleFilter<"users"> | $Enums.role
    warehousesId?: StringNullableFilter<"users"> | string | null
    lastLogin?: DateTimeNullableFilter<"users"> | Date | string | null
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    sync?: BoolFilter<"users"> | boolean
    syncedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    isDeleted?: BoolFilter<"users"> | boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutWarehousesInput, ProductUncheckedUpdateWithoutWarehousesInput>
    create: XOR<ProductCreateWithoutWarehousesInput, ProductUncheckedCreateWithoutWarehousesInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutWarehousesInput, ProductUncheckedUpdateWithoutWarehousesInput>
  }

  export type ProductUpdateManyWithWhereWithoutWarehousesInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    barcode?: StringFilter<"Product"> | string
    wholeSalePrice?: FloatFilter<"Product"> | number
    retailPrice?: FloatFilter<"Product"> | number
    cost?: FloatFilter<"Product"> | number
    quantity?: IntFilter<"Product"> | number
    taxRate?: IntFilter<"Product"> | number
    unit?: EnumunitFilter<"Product"> | $Enums.unit
    description?: StringFilter<"Product"> | string
    warehousesId?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    sync?: BoolFilter<"Product"> | boolean
    syncedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    isDeleted?: BoolFilter<"Product"> | boolean
  }

  export type CustomerUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutWarehousesInput, CustomerUncheckedUpdateWithoutWarehousesInput>
    create: XOR<CustomerCreateWithoutWarehousesInput, CustomerUncheckedCreateWithoutWarehousesInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutWarehousesInput, CustomerUncheckedUpdateWithoutWarehousesInput>
  }

  export type CustomerUpdateManyWithWhereWithoutWarehousesInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    id?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    type?: StringFilter<"Customer"> | string
    companyName?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    phone?: StringFilter<"Customer"> | string
    warehousesId?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    sync?: BoolFilter<"Customer"> | boolean
    syncedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    isDeleted?: BoolFilter<"Customer"> | boolean
  }

  export type SaleItemUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: SaleItemWhereUniqueInput
    update: XOR<SaleItemUpdateWithoutWarehousesInput, SaleItemUncheckedUpdateWithoutWarehousesInput>
    create: XOR<SaleItemCreateWithoutWarehousesInput, SaleItemUncheckedCreateWithoutWarehousesInput>
  }

  export type SaleItemUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: SaleItemWhereUniqueInput
    data: XOR<SaleItemUpdateWithoutWarehousesInput, SaleItemUncheckedUpdateWithoutWarehousesInput>
  }

  export type SaleItemUpdateManyWithWhereWithoutWarehousesInput = {
    where: SaleItemScalarWhereInput
    data: XOR<SaleItemUpdateManyMutationInput, SaleItemUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type SaleItemScalarWhereInput = {
    AND?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
    OR?: SaleItemScalarWhereInput[]
    NOT?: SaleItemScalarWhereInput | SaleItemScalarWhereInput[]
    id?: StringFilter<"SaleItem"> | string
    saleId?: StringNullableFilter<"SaleItem"> | string | null
    productId?: StringNullableFilter<"SaleItem"> | string | null
    productName?: StringFilter<"SaleItem"> | string
    cost?: FloatFilter<"SaleItem"> | number
    selectedPrice?: FloatFilter<"SaleItem"> | number
    priceType?: StringFilter<"SaleItem"> | string
    quantity?: IntFilter<"SaleItem"> | number
    discount?: FloatFilter<"SaleItem"> | number
    total?: FloatFilter<"SaleItem"> | number
    profit?: FloatFilter<"SaleItem"> | number
    warehousesId?: StringNullableFilter<"SaleItem"> | string | null
    sync?: BoolFilter<"SaleItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"SaleItem"> | Date | string | null
    customerId?: StringNullableFilter<"SaleItem"> | string | null
    isDeleted?: BoolFilter<"SaleItem"> | boolean
  }

  export type SaleUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: SaleWhereUniqueInput
    update: XOR<SaleUpdateWithoutWarehousesInput, SaleUncheckedUpdateWithoutWarehousesInput>
    create: XOR<SaleCreateWithoutWarehousesInput, SaleUncheckedCreateWithoutWarehousesInput>
  }

  export type SaleUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: SaleWhereUniqueInput
    data: XOR<SaleUpdateWithoutWarehousesInput, SaleUncheckedUpdateWithoutWarehousesInput>
  }

  export type SaleUpdateManyWithWhereWithoutWarehousesInput = {
    where: SaleScalarWhereInput
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type SaleScalarWhereInput = {
    AND?: SaleScalarWhereInput | SaleScalarWhereInput[]
    OR?: SaleScalarWhereInput[]
    NOT?: SaleScalarWhereInput | SaleScalarWhereInput[]
    id?: StringFilter<"Sale"> | string
    selectedCustomerId?: StringNullableFilter<"Sale"> | string | null
    taxRate?: FloatFilter<"Sale"> | number
    subTotal?: FloatFilter<"Sale"> | number
    notes?: StringNullableFilter<"Sale"> | string | null
    amountPaid?: FloatNullableFilter<"Sale"> | number | null
    grandTotal?: FloatFilter<"Sale"> | number
    paidAmount?: FloatFilter<"Sale"> | number
    balance?: FloatFilter<"Sale"> | number
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    updatedAt?: DateTimeFilter<"Sale"> | Date | string
    warehousesId?: StringNullableFilter<"Sale"> | string | null
    invoiceNo?: StringFilter<"Sale"> | string
    sync?: BoolFilter<"Sale"> | boolean
    syncedAt?: DateTimeNullableFilter<"Sale"> | Date | string | null
    isDeleted?: BoolFilter<"Sale"> | boolean
  }

  export type PaymentMethodUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: PaymentMethodWhereUniqueInput
    update: XOR<PaymentMethodUpdateWithoutWarehousesInput, PaymentMethodUncheckedUpdateWithoutWarehousesInput>
    create: XOR<PaymentMethodCreateWithoutWarehousesInput, PaymentMethodUncheckedCreateWithoutWarehousesInput>
  }

  export type PaymentMethodUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: PaymentMethodWhereUniqueInput
    data: XOR<PaymentMethodUpdateWithoutWarehousesInput, PaymentMethodUncheckedUpdateWithoutWarehousesInput>
  }

  export type PaymentMethodUpdateManyWithWhereWithoutWarehousesInput = {
    where: PaymentMethodScalarWhereInput
    data: XOR<PaymentMethodUpdateManyMutationInput, PaymentMethodUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type PaymentMethodScalarWhereInput = {
    AND?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[]
    OR?: PaymentMethodScalarWhereInput[]
    NOT?: PaymentMethodScalarWhereInput | PaymentMethodScalarWhereInput[]
    id?: StringFilter<"PaymentMethod"> | string
    method?: StringFilter<"PaymentMethod"> | string
    amount?: IntFilter<"PaymentMethod"> | number
    warehousesId?: StringNullableFilter<"PaymentMethod"> | string | null
    saleId?: StringNullableFilter<"PaymentMethod"> | string | null
    createdAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    sync?: BoolFilter<"PaymentMethod"> | boolean
    syncedAt?: DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
    isDeleted?: BoolFilter<"PaymentMethod"> | boolean
  }

  export type PurchaseUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutWarehousesInput, PurchaseUncheckedUpdateWithoutWarehousesInput>
    create: XOR<PurchaseCreateWithoutWarehousesInput, PurchaseUncheckedCreateWithoutWarehousesInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutWarehousesInput, PurchaseUncheckedUpdateWithoutWarehousesInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutWarehousesInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type PurchaseScalarWhereInput = {
    AND?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
    OR?: PurchaseScalarWhereInput[]
    NOT?: PurchaseScalarWhereInput | PurchaseScalarWhereInput[]
    id?: StringFilter<"Purchase"> | string
    taxRate?: FloatFilter<"Purchase"> | number
    subTotal?: FloatFilter<"Purchase"> | number
    notes?: StringNullableFilter<"Purchase"> | string | null
    amountPaid?: FloatNullableFilter<"Purchase"> | number | null
    grandTotal?: FloatFilter<"Purchase"> | number
    paidAmount?: FloatFilter<"Purchase"> | number
    balance?: FloatFilter<"Purchase"> | number
    createdAt?: DateTimeFilter<"Purchase"> | Date | string
    updatedAt?: DateTimeFilter<"Purchase"> | Date | string
    warehousesId?: StringNullableFilter<"Purchase"> | string | null
    referenceNo?: StringFilter<"Purchase"> | string
    sync?: BoolFilter<"Purchase"> | boolean
    syncedAt?: DateTimeNullableFilter<"Purchase"> | Date | string | null
    supplierId?: StringNullableFilter<"Purchase"> | string | null
    isDeleted?: BoolFilter<"Purchase"> | boolean
  }

  export type PurchaseItemUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: PurchaseItemWhereUniqueInput
    update: XOR<PurchaseItemUpdateWithoutWarehousesInput, PurchaseItemUncheckedUpdateWithoutWarehousesInput>
    create: XOR<PurchaseItemCreateWithoutWarehousesInput, PurchaseItemUncheckedCreateWithoutWarehousesInput>
  }

  export type PurchaseItemUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: PurchaseItemWhereUniqueInput
    data: XOR<PurchaseItemUpdateWithoutWarehousesInput, PurchaseItemUncheckedUpdateWithoutWarehousesInput>
  }

  export type PurchaseItemUpdateManyWithWhereWithoutWarehousesInput = {
    where: PurchaseItemScalarWhereInput
    data: XOR<PurchaseItemUpdateManyMutationInput, PurchaseItemUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type PurchaseItemScalarWhereInput = {
    AND?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
    OR?: PurchaseItemScalarWhereInput[]
    NOT?: PurchaseItemScalarWhereInput | PurchaseItemScalarWhereInput[]
    id?: StringFilter<"PurchaseItem"> | string
    productId?: StringNullableFilter<"PurchaseItem"> | string | null
    cost?: FloatFilter<"PurchaseItem"> | number
    productName?: StringNullableFilter<"PurchaseItem"> | string | null
    selectedPrice?: FloatFilter<"PurchaseItem"> | number
    priceType?: StringFilter<"PurchaseItem"> | string
    quantity?: IntFilter<"PurchaseItem"> | number
    discount?: FloatFilter<"PurchaseItem"> | number
    total?: FloatFilter<"PurchaseItem"> | number
    profit?: FloatFilter<"PurchaseItem"> | number
    warehousesId?: StringNullableFilter<"PurchaseItem"> | string | null
    sync?: BoolFilter<"PurchaseItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"PurchaseItem"> | Date | string | null
    purchaseId?: StringNullableFilter<"PurchaseItem"> | string | null
    customRetailPrice?: FloatNullableFilter<"PurchaseItem"> | number | null
    customWholesalePrice?: FloatNullableFilter<"PurchaseItem"> | number | null
    createdAt?: DateTimeFilter<"PurchaseItem"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseItem"> | Date | string
    isDeleted?: BoolFilter<"PurchaseItem"> | boolean
  }

  export type SupplierUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: SupplierWhereUniqueInput
    update: XOR<SupplierUpdateWithoutWarehousesInput, SupplierUncheckedUpdateWithoutWarehousesInput>
    create: XOR<SupplierCreateWithoutWarehousesInput, SupplierUncheckedCreateWithoutWarehousesInput>
  }

  export type SupplierUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: SupplierWhereUniqueInput
    data: XOR<SupplierUpdateWithoutWarehousesInput, SupplierUncheckedUpdateWithoutWarehousesInput>
  }

  export type SupplierUpdateManyWithWhereWithoutWarehousesInput = {
    where: SupplierScalarWhereInput
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type SupplierScalarWhereInput = {
    AND?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
    OR?: SupplierScalarWhereInput[]
    NOT?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
    id?: StringFilter<"Supplier"> | string
    name?: StringFilter<"Supplier"> | string
    type?: StringFilter<"Supplier"> | string
    companyName?: StringNullableFilter<"Supplier"> | string | null
    email?: StringFilter<"Supplier"> | string
    address?: StringFilter<"Supplier"> | string
    phone?: StringFilter<"Supplier"> | string
    warehousesId?: StringFilter<"Supplier"> | string
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    sync?: BoolFilter<"Supplier"> | boolean
    syncedAt?: DateTimeNullableFilter<"Supplier"> | Date | string | null
    isDeleted?: BoolFilter<"Supplier"> | boolean
  }

  export type ReceiptSettingsUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: ReceiptSettingsWhereUniqueInput
    update: XOR<ReceiptSettingsUpdateWithoutWarehousesInput, ReceiptSettingsUncheckedUpdateWithoutWarehousesInput>
    create: XOR<ReceiptSettingsCreateWithoutWarehousesInput, ReceiptSettingsUncheckedCreateWithoutWarehousesInput>
  }

  export type ReceiptSettingsUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: ReceiptSettingsWhereUniqueInput
    data: XOR<ReceiptSettingsUpdateWithoutWarehousesInput, ReceiptSettingsUncheckedUpdateWithoutWarehousesInput>
  }

  export type ReceiptSettingsUpdateManyWithWhereWithoutWarehousesInput = {
    where: ReceiptSettingsScalarWhereInput
    data: XOR<ReceiptSettingsUpdateManyMutationInput, ReceiptSettingsUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type ReceiptSettingsScalarWhereInput = {
    AND?: ReceiptSettingsScalarWhereInput | ReceiptSettingsScalarWhereInput[]
    OR?: ReceiptSettingsScalarWhereInput[]
    NOT?: ReceiptSettingsScalarWhereInput | ReceiptSettingsScalarWhereInput[]
    id?: StringFilter<"ReceiptSettings"> | string
    companyName?: StringFilter<"ReceiptSettings"> | string
    businessName?: StringFilter<"ReceiptSettings"> | string
    address?: StringFilter<"ReceiptSettings"> | string
    city?: StringFilter<"ReceiptSettings"> | string
    state?: StringFilter<"ReceiptSettings"> | string
    country?: StringFilter<"ReceiptSettings"> | string
    phone?: StringFilter<"ReceiptSettings"> | string
    email?: StringFilter<"ReceiptSettings"> | string
    website?: StringFilter<"ReceiptSettings"> | string
    receiptTitle?: StringNullableFilter<"ReceiptSettings"> | string | null
    headerMessage?: StringNullableFilter<"ReceiptSettings"> | string | null
    footerMessage?: StringNullableFilter<"ReceiptSettings"> | string | null
    showLogo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    logoUrl?: StringNullableFilter<"ReceiptSettings"> | string | null
    showQrCode?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    qrCodeContent?: StringNullableFilter<"ReceiptSettings"> | string | null
    customQrContent?: StringNullableFilter<"ReceiptSettings"> | string | null
    showCustomerInfo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showCashierInfo?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemCodes?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemDescriptions?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showTaxBreakdown?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showPaymentMethods?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showBalance?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showTimestamp?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    use24HourFormat?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showItemNumbers?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    showRunningTotal?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    paperSize?: StringNullableFilter<"ReceiptSettings"> | string | null
    fontSize?: StringNullableFilter<"ReceiptSettings"> | string | null
    printDensity?: StringNullableFilter<"ReceiptSettings"> | string | null
    lineSpacing?: StringNullableFilter<"ReceiptSettings"> | string | null
    primaryColor?: StringNullableFilter<"ReceiptSettings"> | string | null
    accentColor?: StringNullableFilter<"ReceiptSettings"> | string | null
    fontFamily?: StringNullableFilter<"ReceiptSettings"> | string | null
    printCopyCount?: IntNullableFilter<"ReceiptSettings"> | number | null
    autoPrint?: BoolNullableFilter<"ReceiptSettings"> | boolean | null
    language?: StringNullableFilter<"ReceiptSettings"> | string | null
    currency?: StringNullableFilter<"ReceiptSettings"> | string | null
    currencySymbol?: StringNullableFilter<"ReceiptSettings"> | string | null
    currencyPosition?: StringNullableFilter<"ReceiptSettings"> | string | null
    warehousesId?: StringFilter<"ReceiptSettings"> | string
    createdAt?: DateTimeFilter<"ReceiptSettings"> | Date | string
    updatedAt?: DateTimeFilter<"ReceiptSettings"> | Date | string
    sync?: BoolFilter<"ReceiptSettings"> | boolean
    syncedAt?: DateTimeNullableFilter<"ReceiptSettings"> | Date | string | null
    isDeleted?: BoolFilter<"ReceiptSettings"> | boolean
  }

  export type BalancePaymentUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: BalancePaymentWhereUniqueInput
    update: XOR<BalancePaymentUpdateWithoutWarehousesInput, BalancePaymentUncheckedUpdateWithoutWarehousesInput>
    create: XOR<BalancePaymentCreateWithoutWarehousesInput, BalancePaymentUncheckedCreateWithoutWarehousesInput>
  }

  export type BalancePaymentUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: BalancePaymentWhereUniqueInput
    data: XOR<BalancePaymentUpdateWithoutWarehousesInput, BalancePaymentUncheckedUpdateWithoutWarehousesInput>
  }

  export type BalancePaymentUpdateManyWithWhereWithoutWarehousesInput = {
    where: BalancePaymentScalarWhereInput
    data: XOR<BalancePaymentUpdateManyMutationInput, BalancePaymentUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type BalancePaymentScalarWhereInput = {
    AND?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
    OR?: BalancePaymentScalarWhereInput[]
    NOT?: BalancePaymentScalarWhereInput | BalancePaymentScalarWhereInput[]
    id?: StringFilter<"BalancePayment"> | string
    customerId?: StringFilter<"BalancePayment"> | string
    saleId?: StringNullableFilter<"BalancePayment"> | string | null
    amount?: FloatFilter<"BalancePayment"> | number
    paymentMethod?: StringFilter<"BalancePayment"> | string
    receiptNo?: StringFilter<"BalancePayment"> | string
    notes?: StringNullableFilter<"BalancePayment"> | string | null
    warehousesId?: StringNullableFilter<"BalancePayment"> | string | null
    createdAt?: DateTimeFilter<"BalancePayment"> | Date | string
    updatedAt?: DateTimeFilter<"BalancePayment"> | Date | string
    sync?: BoolFilter<"BalancePayment"> | boolean
    syncedAt?: DateTimeNullableFilter<"BalancePayment"> | Date | string | null
    isDeleted?: BoolFilter<"BalancePayment"> | boolean
  }

  export type QuotationUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: QuotationWhereUniqueInput
    update: XOR<QuotationUpdateWithoutWarehousesInput, QuotationUncheckedUpdateWithoutWarehousesInput>
    create: XOR<QuotationCreateWithoutWarehousesInput, QuotationUncheckedCreateWithoutWarehousesInput>
  }

  export type QuotationUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: QuotationWhereUniqueInput
    data: XOR<QuotationUpdateWithoutWarehousesInput, QuotationUncheckedUpdateWithoutWarehousesInput>
  }

  export type QuotationUpdateManyWithWhereWithoutWarehousesInput = {
    where: QuotationScalarWhereInput
    data: XOR<QuotationUpdateManyMutationInput, QuotationUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type QuotationScalarWhereInput = {
    AND?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
    OR?: QuotationScalarWhereInput[]
    NOT?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
    id?: StringFilter<"Quotation"> | string
    selectedCustomerId?: StringNullableFilter<"Quotation"> | string | null
    taxRate?: FloatFilter<"Quotation"> | number
    subTotal?: FloatFilter<"Quotation"> | number
    notes?: StringNullableFilter<"Quotation"> | string | null
    grandTotal?: FloatFilter<"Quotation"> | number
    validUntil?: DateTimeNullableFilter<"Quotation"> | Date | string | null
    status?: StringFilter<"Quotation"> | string
    convertedToSaleId?: StringNullableFilter<"Quotation"> | string | null
    createdAt?: DateTimeFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeFilter<"Quotation"> | Date | string
    warehousesId?: StringNullableFilter<"Quotation"> | string | null
    quotationNo?: StringFilter<"Quotation"> | string
    sync?: BoolFilter<"Quotation"> | boolean
    syncedAt?: DateTimeNullableFilter<"Quotation"> | Date | string | null
    isDeleted?: BoolFilter<"Quotation"> | boolean
  }

  export type QuotationItemUpsertWithWhereUniqueWithoutWarehousesInput = {
    where: QuotationItemWhereUniqueInput
    update: XOR<QuotationItemUpdateWithoutWarehousesInput, QuotationItemUncheckedUpdateWithoutWarehousesInput>
    create: XOR<QuotationItemCreateWithoutWarehousesInput, QuotationItemUncheckedCreateWithoutWarehousesInput>
  }

  export type QuotationItemUpdateWithWhereUniqueWithoutWarehousesInput = {
    where: QuotationItemWhereUniqueInput
    data: XOR<QuotationItemUpdateWithoutWarehousesInput, QuotationItemUncheckedUpdateWithoutWarehousesInput>
  }

  export type QuotationItemUpdateManyWithWhereWithoutWarehousesInput = {
    where: QuotationItemScalarWhereInput
    data: XOR<QuotationItemUpdateManyMutationInput, QuotationItemUncheckedUpdateManyWithoutWarehousesInput>
  }

  export type QuotationItemScalarWhereInput = {
    AND?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
    OR?: QuotationItemScalarWhereInput[]
    NOT?: QuotationItemScalarWhereInput | QuotationItemScalarWhereInput[]
    id?: StringFilter<"QuotationItem"> | string
    quotationId?: StringNullableFilter<"QuotationItem"> | string | null
    productId?: StringNullableFilter<"QuotationItem"> | string | null
    productName?: StringFilter<"QuotationItem"> | string
    cost?: FloatFilter<"QuotationItem"> | number
    selectedPrice?: FloatFilter<"QuotationItem"> | number
    priceType?: StringFilter<"QuotationItem"> | string
    quantity?: IntFilter<"QuotationItem"> | number
    discount?: FloatFilter<"QuotationItem"> | number
    total?: FloatFilter<"QuotationItem"> | number
    warehousesId?: StringNullableFilter<"QuotationItem"> | string | null
    sync?: BoolFilter<"QuotationItem"> | boolean
    syncedAt?: DateTimeNullableFilter<"QuotationItem"> | Date | string | null
    isDeleted?: BoolFilter<"QuotationItem"> | boolean
  }

  export type SaleItemCreateWithoutSaleInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    product?: ProductCreateNestedOneWithoutSaleItemInput
    Warehouses?: WarehousesCreateNestedOneWithoutSaleItemInput
    Customer?: CustomerCreateNestedOneWithoutSaleItemInput
  }

  export type SaleItemUncheckedCreateWithoutSaleInput = {
    id?: string
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type SaleItemCreateOrConnectWithoutSaleInput = {
    where: SaleItemWhereUniqueInput
    create: XOR<SaleItemCreateWithoutSaleInput, SaleItemUncheckedCreateWithoutSaleInput>
  }

  export type SaleItemCreateManySaleInputEnvelope = {
    data: SaleItemCreateManySaleInput | SaleItemCreateManySaleInput[]
  }

  export type CustomerCreateWithoutSaleInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutCustomerInput
    saleItem?: SaleItemCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutCustomerInput
    quotation?: QuotationCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerUncheckedCreateWithoutSaleInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutCustomerInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerCreateOrConnectWithoutSaleInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSaleInput, CustomerUncheckedCreateWithoutSaleInput>
  }

  export type WarehousesCreateWithoutSaleInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutSaleInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutSaleInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutSaleInput, WarehousesUncheckedCreateWithoutSaleInput>
  }

  export type PaymentMethodCreateWithoutSaleInput = {
    id?: string
    method: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutPaymentMethodInput
  }

  export type PaymentMethodUncheckedCreateWithoutSaleInput = {
    id?: string
    method: string
    amount: number
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type PaymentMethodCreateOrConnectWithoutSaleInput = {
    where: PaymentMethodWhereUniqueInput
    create: XOR<PaymentMethodCreateWithoutSaleInput, PaymentMethodUncheckedCreateWithoutSaleInput>
  }

  export type PaymentMethodCreateManySaleInputEnvelope = {
    data: PaymentMethodCreateManySaleInput | PaymentMethodCreateManySaleInput[]
  }

  export type BalancePaymentCreateWithoutSaleInput = {
    id?: string
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    customer: CustomerCreateNestedOneWithoutBalancePaymentInput
    warehouses?: WarehousesCreateNestedOneWithoutBalancePaymentInput
  }

  export type BalancePaymentUncheckedCreateWithoutSaleInput = {
    id?: string
    customerId: string
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentCreateOrConnectWithoutSaleInput = {
    where: BalancePaymentWhereUniqueInput
    create: XOR<BalancePaymentCreateWithoutSaleInput, BalancePaymentUncheckedCreateWithoutSaleInput>
  }

  export type BalancePaymentCreateManySaleInputEnvelope = {
    data: BalancePaymentCreateManySaleInput | BalancePaymentCreateManySaleInput[]
  }

  export type SaleItemUpsertWithWhereUniqueWithoutSaleInput = {
    where: SaleItemWhereUniqueInput
    update: XOR<SaleItemUpdateWithoutSaleInput, SaleItemUncheckedUpdateWithoutSaleInput>
    create: XOR<SaleItemCreateWithoutSaleInput, SaleItemUncheckedCreateWithoutSaleInput>
  }

  export type SaleItemUpdateWithWhereUniqueWithoutSaleInput = {
    where: SaleItemWhereUniqueInput
    data: XOR<SaleItemUpdateWithoutSaleInput, SaleItemUncheckedUpdateWithoutSaleInput>
  }

  export type SaleItemUpdateManyWithWhereWithoutSaleInput = {
    where: SaleItemScalarWhereInput
    data: XOR<SaleItemUpdateManyMutationInput, SaleItemUncheckedUpdateManyWithoutSaleInput>
  }

  export type CustomerUpsertWithoutSaleInput = {
    update: XOR<CustomerUpdateWithoutSaleInput, CustomerUncheckedUpdateWithoutSaleInput>
    create: XOR<CustomerCreateWithoutSaleInput, CustomerUncheckedCreateWithoutSaleInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutSaleInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutSaleInput, CustomerUncheckedUpdateWithoutSaleInput>
  }

  export type CustomerUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutCustomerNestedInput
    saleItem?: SaleItemUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItem?: SaleItemUncheckedUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type WarehousesUpsertWithoutSaleInput = {
    update: XOR<WarehousesUpdateWithoutSaleInput, WarehousesUncheckedUpdateWithoutSaleInput>
    create: XOR<WarehousesCreateWithoutSaleInput, WarehousesUncheckedCreateWithoutSaleInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutSaleInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutSaleInput, WarehousesUncheckedUpdateWithoutSaleInput>
  }

  export type WarehousesUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type PaymentMethodUpsertWithWhereUniqueWithoutSaleInput = {
    where: PaymentMethodWhereUniqueInput
    update: XOR<PaymentMethodUpdateWithoutSaleInput, PaymentMethodUncheckedUpdateWithoutSaleInput>
    create: XOR<PaymentMethodCreateWithoutSaleInput, PaymentMethodUncheckedCreateWithoutSaleInput>
  }

  export type PaymentMethodUpdateWithWhereUniqueWithoutSaleInput = {
    where: PaymentMethodWhereUniqueInput
    data: XOR<PaymentMethodUpdateWithoutSaleInput, PaymentMethodUncheckedUpdateWithoutSaleInput>
  }

  export type PaymentMethodUpdateManyWithWhereWithoutSaleInput = {
    where: PaymentMethodScalarWhereInput
    data: XOR<PaymentMethodUpdateManyMutationInput, PaymentMethodUncheckedUpdateManyWithoutSaleInput>
  }

  export type BalancePaymentUpsertWithWhereUniqueWithoutSaleInput = {
    where: BalancePaymentWhereUniqueInput
    update: XOR<BalancePaymentUpdateWithoutSaleInput, BalancePaymentUncheckedUpdateWithoutSaleInput>
    create: XOR<BalancePaymentCreateWithoutSaleInput, BalancePaymentUncheckedCreateWithoutSaleInput>
  }

  export type BalancePaymentUpdateWithWhereUniqueWithoutSaleInput = {
    where: BalancePaymentWhereUniqueInput
    data: XOR<BalancePaymentUpdateWithoutSaleInput, BalancePaymentUncheckedUpdateWithoutSaleInput>
  }

  export type BalancePaymentUpdateManyWithWhereWithoutSaleInput = {
    where: BalancePaymentScalarWhereInput
    data: XOR<BalancePaymentUpdateManyMutationInput, BalancePaymentUncheckedUpdateManyWithoutSaleInput>
  }

  export type SaleCreateWithoutSaleItemsInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    selectedCustomer?: CustomerCreateNestedOneWithoutSaleInput
    warehouses?: WarehousesCreateNestedOneWithoutSaleInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutSaleItemsInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutSaleItemsInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutSaleItemsInput, SaleUncheckedCreateWithoutSaleItemsInput>
  }

  export type ProductCreateWithoutSaleItemInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    warehouses?: WarehousesCreateNestedOneWithoutProductsInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSaleItemInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSaleItemInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSaleItemInput, ProductUncheckedCreateWithoutSaleItemInput>
  }

  export type WarehousesCreateWithoutSaleItemInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutSaleItemInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutSaleItemInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutSaleItemInput, WarehousesUncheckedCreateWithoutSaleItemInput>
  }

  export type CustomerCreateWithoutSaleItemInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutCustomerInput
    Sale?: SaleCreateNestedManyWithoutSelectedCustomerInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutCustomerInput
    quotation?: QuotationCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerUncheckedCreateWithoutSaleItemInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Sale?: SaleUncheckedCreateNestedManyWithoutSelectedCustomerInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutCustomerInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerCreateOrConnectWithoutSaleItemInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSaleItemInput, CustomerUncheckedCreateWithoutSaleItemInput>
  }

  export type SaleUpsertWithoutSaleItemsInput = {
    update: XOR<SaleUpdateWithoutSaleItemsInput, SaleUncheckedUpdateWithoutSaleItemsInput>
    create: XOR<SaleCreateWithoutSaleItemsInput, SaleUncheckedCreateWithoutSaleItemsInput>
    where?: SaleWhereInput
  }

  export type SaleUpdateToOneWithWhereWithoutSaleItemsInput = {
    where?: SaleWhereInput
    data: XOR<SaleUpdateWithoutSaleItemsInput, SaleUncheckedUpdateWithoutSaleItemsInput>
  }

  export type SaleUpdateWithoutSaleItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    selectedCustomer?: CustomerUpdateOneWithoutSaleNestedInput
    warehouses?: WarehousesUpdateOneWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutSaleItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type ProductUpsertWithoutSaleItemInput = {
    update: XOR<ProductUpdateWithoutSaleItemInput, ProductUncheckedUpdateWithoutSaleItemInput>
    create: XOR<ProductCreateWithoutSaleItemInput, ProductUncheckedCreateWithoutSaleItemInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSaleItemInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSaleItemInput, ProductUncheckedUpdateWithoutSaleItemInput>
  }

  export type ProductUpdateWithoutSaleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    warehouses?: WarehousesUpdateOneWithoutProductsNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSaleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type WarehousesUpsertWithoutSaleItemInput = {
    update: XOR<WarehousesUpdateWithoutSaleItemInput, WarehousesUncheckedUpdateWithoutSaleItemInput>
    create: XOR<WarehousesCreateWithoutSaleItemInput, WarehousesUncheckedCreateWithoutSaleItemInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutSaleItemInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutSaleItemInput, WarehousesUncheckedUpdateWithoutSaleItemInput>
  }

  export type WarehousesUpdateWithoutSaleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutSaleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type CustomerUpsertWithoutSaleItemInput = {
    update: XOR<CustomerUpdateWithoutSaleItemInput, CustomerUncheckedUpdateWithoutSaleItemInput>
    create: XOR<CustomerCreateWithoutSaleItemInput, CustomerUncheckedCreateWithoutSaleItemInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutSaleItemInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutSaleItemInput, CustomerUncheckedUpdateWithoutSaleItemInput>
  }

  export type CustomerUpdateWithoutSaleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutCustomerNestedInput
    Sale?: SaleUpdateManyWithoutSelectedCustomerNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutSaleItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Sale?: SaleUncheckedUpdateManyWithoutSelectedCustomerNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type PurchaseItemCreateWithoutPurchaseInput = {
    id?: string
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    product?: ProductCreateNestedOneWithoutPurchaseItemInput
    Warehouses?: WarehousesCreateNestedOneWithoutPurchaseItemInput
  }

  export type PurchaseItemUncheckedCreateWithoutPurchaseInput = {
    id?: string
    productId?: string | null
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type PurchaseItemCreateOrConnectWithoutPurchaseInput = {
    where: PurchaseItemWhereUniqueInput
    create: XOR<PurchaseItemCreateWithoutPurchaseInput, PurchaseItemUncheckedCreateWithoutPurchaseInput>
  }

  export type PurchaseItemCreateManyPurchaseInputEnvelope = {
    data: PurchaseItemCreateManyPurchaseInput | PurchaseItemCreateManyPurchaseInput[]
  }

  export type WarehousesCreateWithoutPurchaseInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutPurchaseInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutPurchaseInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutPurchaseInput, WarehousesUncheckedCreateWithoutPurchaseInput>
  }

  export type SupplierCreateWithoutPurchaseInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutSupplierInput
  }

  export type SupplierUncheckedCreateWithoutPurchaseInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SupplierCreateOrConnectWithoutPurchaseInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutPurchaseInput, SupplierUncheckedCreateWithoutPurchaseInput>
  }

  export type PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput = {
    where: PurchaseItemWhereUniqueInput
    update: XOR<PurchaseItemUpdateWithoutPurchaseInput, PurchaseItemUncheckedUpdateWithoutPurchaseInput>
    create: XOR<PurchaseItemCreateWithoutPurchaseInput, PurchaseItemUncheckedCreateWithoutPurchaseInput>
  }

  export type PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput = {
    where: PurchaseItemWhereUniqueInput
    data: XOR<PurchaseItemUpdateWithoutPurchaseInput, PurchaseItemUncheckedUpdateWithoutPurchaseInput>
  }

  export type PurchaseItemUpdateManyWithWhereWithoutPurchaseInput = {
    where: PurchaseItemScalarWhereInput
    data: XOR<PurchaseItemUpdateManyMutationInput, PurchaseItemUncheckedUpdateManyWithoutPurchaseInput>
  }

  export type WarehousesUpsertWithoutPurchaseInput = {
    update: XOR<WarehousesUpdateWithoutPurchaseInput, WarehousesUncheckedUpdateWithoutPurchaseInput>
    create: XOR<WarehousesCreateWithoutPurchaseInput, WarehousesUncheckedCreateWithoutPurchaseInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutPurchaseInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutPurchaseInput, WarehousesUncheckedUpdateWithoutPurchaseInput>
  }

  export type WarehousesUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type SupplierUpsertWithoutPurchaseInput = {
    update: XOR<SupplierUpdateWithoutPurchaseInput, SupplierUncheckedUpdateWithoutPurchaseInput>
    create: XOR<SupplierCreateWithoutPurchaseInput, SupplierUncheckedCreateWithoutPurchaseInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutPurchaseInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutPurchaseInput, SupplierUncheckedUpdateWithoutPurchaseInput>
  }

  export type SupplierUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductCreateWithoutPurchaseItemInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    warehouses?: WarehousesCreateNestedOneWithoutProductsInput
    SaleItem?: SaleItemCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutPurchaseItemInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    SaleItem?: SaleItemUncheckedCreateNestedManyWithoutProductInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutPurchaseItemInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutPurchaseItemInput, ProductUncheckedCreateWithoutPurchaseItemInput>
  }

  export type WarehousesCreateWithoutPurchaseItemInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutPurchaseItemInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutPurchaseItemInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutPurchaseItemInput, WarehousesUncheckedCreateWithoutPurchaseItemInput>
  }

  export type PurchaseCreateWithoutPurchaseItemInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    warehouses?: WarehousesCreateNestedOneWithoutPurchaseInput
    Supplier?: SupplierCreateNestedOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutPurchaseItemInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    supplierId?: string | null
    isDeleted?: boolean
  }

  export type PurchaseCreateOrConnectWithoutPurchaseItemInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutPurchaseItemInput, PurchaseUncheckedCreateWithoutPurchaseItemInput>
  }

  export type ProductUpsertWithoutPurchaseItemInput = {
    update: XOR<ProductUpdateWithoutPurchaseItemInput, ProductUncheckedUpdateWithoutPurchaseItemInput>
    create: XOR<ProductCreateWithoutPurchaseItemInput, ProductUncheckedCreateWithoutPurchaseItemInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutPurchaseItemInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutPurchaseItemInput, ProductUncheckedUpdateWithoutPurchaseItemInput>
  }

  export type ProductUpdateWithoutPurchaseItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    warehouses?: WarehousesUpdateOneWithoutProductsNestedInput
    SaleItem?: SaleItemUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutPurchaseItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    SaleItem?: SaleItemUncheckedUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type WarehousesUpsertWithoutPurchaseItemInput = {
    update: XOR<WarehousesUpdateWithoutPurchaseItemInput, WarehousesUncheckedUpdateWithoutPurchaseItemInput>
    create: XOR<WarehousesCreateWithoutPurchaseItemInput, WarehousesUncheckedCreateWithoutPurchaseItemInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutPurchaseItemInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutPurchaseItemInput, WarehousesUncheckedUpdateWithoutPurchaseItemInput>
  }

  export type WarehousesUpdateWithoutPurchaseItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutPurchaseItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type PurchaseUpsertWithoutPurchaseItemInput = {
    update: XOR<PurchaseUpdateWithoutPurchaseItemInput, PurchaseUncheckedUpdateWithoutPurchaseItemInput>
    create: XOR<PurchaseCreateWithoutPurchaseItemInput, PurchaseUncheckedCreateWithoutPurchaseItemInput>
    where?: PurchaseWhereInput
  }

  export type PurchaseUpdateToOneWithWhereWithoutPurchaseItemInput = {
    where?: PurchaseWhereInput
    data: XOR<PurchaseUpdateWithoutPurchaseItemInput, PurchaseUncheckedUpdateWithoutPurchaseItemInput>
  }

  export type PurchaseUpdateWithoutPurchaseItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    warehouses?: WarehousesUpdateOneWithoutPurchaseNestedInput
    Supplier?: SupplierUpdateOneWithoutPurchaseNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutPurchaseItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WarehousesCreateWithoutCustomerInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutCustomerInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutCustomerInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutCustomerInput, WarehousesUncheckedCreateWithoutCustomerInput>
  }

  export type SaleCreateWithoutSelectedCustomerInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemCreateNestedManyWithoutSaleInput
    warehouses?: WarehousesCreateNestedOneWithoutSaleInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutSelectedCustomerInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemUncheckedCreateNestedManyWithoutSaleInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutSelectedCustomerInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutSelectedCustomerInput, SaleUncheckedCreateWithoutSelectedCustomerInput>
  }

  export type SaleCreateManySelectedCustomerInputEnvelope = {
    data: SaleCreateManySelectedCustomerInput | SaleCreateManySelectedCustomerInput[]
  }

  export type SaleItemCreateWithoutCustomerInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    sale?: SaleCreateNestedOneWithoutSaleItemsInput
    product?: ProductCreateNestedOneWithoutSaleItemInput
    Warehouses?: WarehousesCreateNestedOneWithoutSaleItemInput
  }

  export type SaleItemUncheckedCreateWithoutCustomerInput = {
    id?: string
    saleId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SaleItemCreateOrConnectWithoutCustomerInput = {
    where: SaleItemWhereUniqueInput
    create: XOR<SaleItemCreateWithoutCustomerInput, SaleItemUncheckedCreateWithoutCustomerInput>
  }

  export type SaleItemCreateManyCustomerInputEnvelope = {
    data: SaleItemCreateManyCustomerInput | SaleItemCreateManyCustomerInput[]
  }

  export type BalancePaymentCreateWithoutCustomerInput = {
    id?: string
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    sale?: SaleCreateNestedOneWithoutBalancePaymentInput
    warehouses?: WarehousesCreateNestedOneWithoutBalancePaymentInput
  }

  export type BalancePaymentUncheckedCreateWithoutCustomerInput = {
    id?: string
    saleId?: string | null
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentCreateOrConnectWithoutCustomerInput = {
    where: BalancePaymentWhereUniqueInput
    create: XOR<BalancePaymentCreateWithoutCustomerInput, BalancePaymentUncheckedCreateWithoutCustomerInput>
  }

  export type BalancePaymentCreateManyCustomerInputEnvelope = {
    data: BalancePaymentCreateManyCustomerInput | BalancePaymentCreateManyCustomerInput[]
  }

  export type QuotationCreateWithoutSelectedCustomerInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotationItems?: QuotationItemCreateNestedManyWithoutQuotationInput
    warehouses?: WarehousesCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUncheckedCreateWithoutSelectedCustomerInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotationItems?: QuotationItemUncheckedCreateNestedManyWithoutQuotationInput
  }

  export type QuotationCreateOrConnectWithoutSelectedCustomerInput = {
    where: QuotationWhereUniqueInput
    create: XOR<QuotationCreateWithoutSelectedCustomerInput, QuotationUncheckedCreateWithoutSelectedCustomerInput>
  }

  export type QuotationCreateManySelectedCustomerInputEnvelope = {
    data: QuotationCreateManySelectedCustomerInput | QuotationCreateManySelectedCustomerInput[]
  }

  export type WarehousesUpsertWithoutCustomerInput = {
    update: XOR<WarehousesUpdateWithoutCustomerInput, WarehousesUncheckedUpdateWithoutCustomerInput>
    create: XOR<WarehousesCreateWithoutCustomerInput, WarehousesUncheckedCreateWithoutCustomerInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutCustomerInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutCustomerInput, WarehousesUncheckedUpdateWithoutCustomerInput>
  }

  export type WarehousesUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type SaleUpsertWithWhereUniqueWithoutSelectedCustomerInput = {
    where: SaleWhereUniqueInput
    update: XOR<SaleUpdateWithoutSelectedCustomerInput, SaleUncheckedUpdateWithoutSelectedCustomerInput>
    create: XOR<SaleCreateWithoutSelectedCustomerInput, SaleUncheckedCreateWithoutSelectedCustomerInput>
  }

  export type SaleUpdateWithWhereUniqueWithoutSelectedCustomerInput = {
    where: SaleWhereUniqueInput
    data: XOR<SaleUpdateWithoutSelectedCustomerInput, SaleUncheckedUpdateWithoutSelectedCustomerInput>
  }

  export type SaleUpdateManyWithWhereWithoutSelectedCustomerInput = {
    where: SaleScalarWhereInput
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyWithoutSelectedCustomerInput>
  }

  export type SaleItemUpsertWithWhereUniqueWithoutCustomerInput = {
    where: SaleItemWhereUniqueInput
    update: XOR<SaleItemUpdateWithoutCustomerInput, SaleItemUncheckedUpdateWithoutCustomerInput>
    create: XOR<SaleItemCreateWithoutCustomerInput, SaleItemUncheckedCreateWithoutCustomerInput>
  }

  export type SaleItemUpdateWithWhereUniqueWithoutCustomerInput = {
    where: SaleItemWhereUniqueInput
    data: XOR<SaleItemUpdateWithoutCustomerInput, SaleItemUncheckedUpdateWithoutCustomerInput>
  }

  export type SaleItemUpdateManyWithWhereWithoutCustomerInput = {
    where: SaleItemScalarWhereInput
    data: XOR<SaleItemUpdateManyMutationInput, SaleItemUncheckedUpdateManyWithoutCustomerInput>
  }

  export type BalancePaymentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: BalancePaymentWhereUniqueInput
    update: XOR<BalancePaymentUpdateWithoutCustomerInput, BalancePaymentUncheckedUpdateWithoutCustomerInput>
    create: XOR<BalancePaymentCreateWithoutCustomerInput, BalancePaymentUncheckedCreateWithoutCustomerInput>
  }

  export type BalancePaymentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: BalancePaymentWhereUniqueInput
    data: XOR<BalancePaymentUpdateWithoutCustomerInput, BalancePaymentUncheckedUpdateWithoutCustomerInput>
  }

  export type BalancePaymentUpdateManyWithWhereWithoutCustomerInput = {
    where: BalancePaymentScalarWhereInput
    data: XOR<BalancePaymentUpdateManyMutationInput, BalancePaymentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type QuotationUpsertWithWhereUniqueWithoutSelectedCustomerInput = {
    where: QuotationWhereUniqueInput
    update: XOR<QuotationUpdateWithoutSelectedCustomerInput, QuotationUncheckedUpdateWithoutSelectedCustomerInput>
    create: XOR<QuotationCreateWithoutSelectedCustomerInput, QuotationUncheckedCreateWithoutSelectedCustomerInput>
  }

  export type QuotationUpdateWithWhereUniqueWithoutSelectedCustomerInput = {
    where: QuotationWhereUniqueInput
    data: XOR<QuotationUpdateWithoutSelectedCustomerInput, QuotationUncheckedUpdateWithoutSelectedCustomerInput>
  }

  export type QuotationUpdateManyWithWhereWithoutSelectedCustomerInput = {
    where: QuotationScalarWhereInput
    data: XOR<QuotationUpdateManyMutationInput, QuotationUncheckedUpdateManyWithoutSelectedCustomerInput>
  }

  export type WarehousesCreateWithoutSupplierInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutSupplierInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutSupplierInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutSupplierInput, WarehousesUncheckedCreateWithoutSupplierInput>
  }

  export type PurchaseCreateWithoutSupplierInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchaseItem?: PurchaseItemCreateNestedManyWithoutPurchaseInput
    warehouses?: WarehousesCreateNestedOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutSupplierInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutSupplierInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutSupplierInput, PurchaseUncheckedCreateWithoutSupplierInput>
  }

  export type PurchaseCreateManySupplierInputEnvelope = {
    data: PurchaseCreateManySupplierInput | PurchaseCreateManySupplierInput[]
  }

  export type WarehousesUpsertWithoutSupplierInput = {
    update: XOR<WarehousesUpdateWithoutSupplierInput, WarehousesUncheckedUpdateWithoutSupplierInput>
    create: XOR<WarehousesCreateWithoutSupplierInput, WarehousesUncheckedCreateWithoutSupplierInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutSupplierInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutSupplierInput, WarehousesUncheckedUpdateWithoutSupplierInput>
  }

  export type WarehousesUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type PurchaseUpsertWithWhereUniqueWithoutSupplierInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutSupplierInput, PurchaseUncheckedUpdateWithoutSupplierInput>
    create: XOR<PurchaseCreateWithoutSupplierInput, PurchaseUncheckedCreateWithoutSupplierInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutSupplierInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutSupplierInput, PurchaseUncheckedUpdateWithoutSupplierInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutSupplierInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutSupplierInput>
  }

  export type WarehousesCreateWithoutProductsInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutProductsInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutProductsInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutProductsInput, WarehousesUncheckedCreateWithoutProductsInput>
  }

  export type SaleItemCreateWithoutProductInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    sale?: SaleCreateNestedOneWithoutSaleItemsInput
    Warehouses?: WarehousesCreateNestedOneWithoutSaleItemInput
    Customer?: CustomerCreateNestedOneWithoutSaleItemInput
  }

  export type SaleItemUncheckedCreateWithoutProductInput = {
    id?: string
    saleId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type SaleItemCreateOrConnectWithoutProductInput = {
    where: SaleItemWhereUniqueInput
    create: XOR<SaleItemCreateWithoutProductInput, SaleItemUncheckedCreateWithoutProductInput>
  }

  export type SaleItemCreateManyProductInputEnvelope = {
    data: SaleItemCreateManyProductInput | SaleItemCreateManyProductInput[]
  }

  export type PurchaseItemCreateWithoutProductInput = {
    id?: string
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutPurchaseItemInput
    Purchase?: PurchaseCreateNestedOneWithoutPurchaseItemInput
  }

  export type PurchaseItemUncheckedCreateWithoutProductInput = {
    id?: string
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    purchaseId?: string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type PurchaseItemCreateOrConnectWithoutProductInput = {
    where: PurchaseItemWhereUniqueInput
    create: XOR<PurchaseItemCreateWithoutProductInput, PurchaseItemUncheckedCreateWithoutProductInput>
  }

  export type PurchaseItemCreateManyProductInputEnvelope = {
    data: PurchaseItemCreateManyProductInput | PurchaseItemCreateManyProductInput[]
  }

  export type QuotationItemCreateWithoutProductInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    quotation?: QuotationCreateNestedOneWithoutQuotationItemsInput
    Warehouses?: WarehousesCreateNestedOneWithoutQuotationItemInput
  }

  export type QuotationItemUncheckedCreateWithoutProductInput = {
    id?: string
    quotationId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationItemCreateOrConnectWithoutProductInput = {
    where: QuotationItemWhereUniqueInput
    create: XOR<QuotationItemCreateWithoutProductInput, QuotationItemUncheckedCreateWithoutProductInput>
  }

  export type QuotationItemCreateManyProductInputEnvelope = {
    data: QuotationItemCreateManyProductInput | QuotationItemCreateManyProductInput[]
  }

  export type WarehousesUpsertWithoutProductsInput = {
    update: XOR<WarehousesUpdateWithoutProductsInput, WarehousesUncheckedUpdateWithoutProductsInput>
    create: XOR<WarehousesCreateWithoutProductsInput, WarehousesUncheckedCreateWithoutProductsInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutProductsInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutProductsInput, WarehousesUncheckedUpdateWithoutProductsInput>
  }

  export type WarehousesUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type SaleItemUpsertWithWhereUniqueWithoutProductInput = {
    where: SaleItemWhereUniqueInput
    update: XOR<SaleItemUpdateWithoutProductInput, SaleItemUncheckedUpdateWithoutProductInput>
    create: XOR<SaleItemCreateWithoutProductInput, SaleItemUncheckedCreateWithoutProductInput>
  }

  export type SaleItemUpdateWithWhereUniqueWithoutProductInput = {
    where: SaleItemWhereUniqueInput
    data: XOR<SaleItemUpdateWithoutProductInput, SaleItemUncheckedUpdateWithoutProductInput>
  }

  export type SaleItemUpdateManyWithWhereWithoutProductInput = {
    where: SaleItemScalarWhereInput
    data: XOR<SaleItemUpdateManyMutationInput, SaleItemUncheckedUpdateManyWithoutProductInput>
  }

  export type PurchaseItemUpsertWithWhereUniqueWithoutProductInput = {
    where: PurchaseItemWhereUniqueInput
    update: XOR<PurchaseItemUpdateWithoutProductInput, PurchaseItemUncheckedUpdateWithoutProductInput>
    create: XOR<PurchaseItemCreateWithoutProductInput, PurchaseItemUncheckedCreateWithoutProductInput>
  }

  export type PurchaseItemUpdateWithWhereUniqueWithoutProductInput = {
    where: PurchaseItemWhereUniqueInput
    data: XOR<PurchaseItemUpdateWithoutProductInput, PurchaseItemUncheckedUpdateWithoutProductInput>
  }

  export type PurchaseItemUpdateManyWithWhereWithoutProductInput = {
    where: PurchaseItemScalarWhereInput
    data: XOR<PurchaseItemUpdateManyMutationInput, PurchaseItemUncheckedUpdateManyWithoutProductInput>
  }

  export type QuotationItemUpsertWithWhereUniqueWithoutProductInput = {
    where: QuotationItemWhereUniqueInput
    update: XOR<QuotationItemUpdateWithoutProductInput, QuotationItemUncheckedUpdateWithoutProductInput>
    create: XOR<QuotationItemCreateWithoutProductInput, QuotationItemUncheckedCreateWithoutProductInput>
  }

  export type QuotationItemUpdateWithWhereUniqueWithoutProductInput = {
    where: QuotationItemWhereUniqueInput
    data: XOR<QuotationItemUpdateWithoutProductInput, QuotationItemUncheckedUpdateWithoutProductInput>
  }

  export type QuotationItemUpdateManyWithWhereWithoutProductInput = {
    where: QuotationItemScalarWhereInput
    data: XOR<QuotationItemUpdateManyMutationInput, QuotationItemUncheckedUpdateManyWithoutProductInput>
  }

  export type WarehousesCreateWithoutPaymentMethodInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutPaymentMethodInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutPaymentMethodInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutPaymentMethodInput, WarehousesUncheckedCreateWithoutPaymentMethodInput>
  }

  export type SaleCreateWithoutPaymentMethodInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemCreateNestedManyWithoutSaleInput
    selectedCustomer?: CustomerCreateNestedOneWithoutSaleInput
    warehouses?: WarehousesCreateNestedOneWithoutSaleInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutPaymentMethodInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemUncheckedCreateNestedManyWithoutSaleInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutPaymentMethodInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutPaymentMethodInput, SaleUncheckedCreateWithoutPaymentMethodInput>
  }

  export type WarehousesUpsertWithoutPaymentMethodInput = {
    update: XOR<WarehousesUpdateWithoutPaymentMethodInput, WarehousesUncheckedUpdateWithoutPaymentMethodInput>
    create: XOR<WarehousesCreateWithoutPaymentMethodInput, WarehousesUncheckedCreateWithoutPaymentMethodInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutPaymentMethodInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutPaymentMethodInput, WarehousesUncheckedUpdateWithoutPaymentMethodInput>
  }

  export type WarehousesUpdateWithoutPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type SaleUpsertWithoutPaymentMethodInput = {
    update: XOR<SaleUpdateWithoutPaymentMethodInput, SaleUncheckedUpdateWithoutPaymentMethodInput>
    create: XOR<SaleCreateWithoutPaymentMethodInput, SaleUncheckedCreateWithoutPaymentMethodInput>
    where?: SaleWhereInput
  }

  export type SaleUpdateToOneWithWhereWithoutPaymentMethodInput = {
    where?: SaleWhereInput
    data: XOR<SaleUpdateWithoutPaymentMethodInput, SaleUncheckedUpdateWithoutPaymentMethodInput>
  }

  export type SaleUpdateWithoutPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUpdateManyWithoutSaleNestedInput
    selectedCustomer?: CustomerUpdateOneWithoutSaleNestedInput
    warehouses?: WarehousesUpdateOneWithoutSaleNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUncheckedUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type WarehousesCreateWithoutReceiptSettingsInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutReceiptSettingsInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutReceiptSettingsInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutReceiptSettingsInput, WarehousesUncheckedCreateWithoutReceiptSettingsInput>
  }

  export type WarehousesUpsertWithoutReceiptSettingsInput = {
    update: XOR<WarehousesUpdateWithoutReceiptSettingsInput, WarehousesUncheckedUpdateWithoutReceiptSettingsInput>
    create: XOR<WarehousesCreateWithoutReceiptSettingsInput, WarehousesUncheckedCreateWithoutReceiptSettingsInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutReceiptSettingsInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutReceiptSettingsInput, WarehousesUncheckedUpdateWithoutReceiptSettingsInput>
  }

  export type WarehousesUpdateWithoutReceiptSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutReceiptSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type CustomerCreateWithoutBalancePaymentInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutCustomerInput
    Sale?: SaleCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemCreateNestedManyWithoutCustomerInput
    quotation?: QuotationCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBalancePaymentInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Sale?: SaleUncheckedCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutCustomerInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutSelectedCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBalancePaymentInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBalancePaymentInput, CustomerUncheckedCreateWithoutBalancePaymentInput>
  }

  export type SaleCreateWithoutBalancePaymentInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemCreateNestedManyWithoutSaleInput
    selectedCustomer?: CustomerCreateNestedOneWithoutSaleInput
    warehouses?: WarehousesCreateNestedOneWithoutSaleInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutSaleInput
  }

  export type SaleUncheckedCreateWithoutBalancePaymentInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    saleItems?: SaleItemUncheckedCreateNestedManyWithoutSaleInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutSaleInput
  }

  export type SaleCreateOrConnectWithoutBalancePaymentInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutBalancePaymentInput, SaleUncheckedCreateWithoutBalancePaymentInput>
  }

  export type WarehousesCreateWithoutBalancePaymentInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutBalancePaymentInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutBalancePaymentInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutBalancePaymentInput, WarehousesUncheckedCreateWithoutBalancePaymentInput>
  }

  export type CustomerUpsertWithoutBalancePaymentInput = {
    update: XOR<CustomerUpdateWithoutBalancePaymentInput, CustomerUncheckedUpdateWithoutBalancePaymentInput>
    create: XOR<CustomerCreateWithoutBalancePaymentInput, CustomerUncheckedCreateWithoutBalancePaymentInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutBalancePaymentInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutBalancePaymentInput, CustomerUncheckedUpdateWithoutBalancePaymentInput>
  }

  export type CustomerUpdateWithoutBalancePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutCustomerNestedInput
    Sale?: SaleUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBalancePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Sale?: SaleUncheckedUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type SaleUpsertWithoutBalancePaymentInput = {
    update: XOR<SaleUpdateWithoutBalancePaymentInput, SaleUncheckedUpdateWithoutBalancePaymentInput>
    create: XOR<SaleCreateWithoutBalancePaymentInput, SaleUncheckedCreateWithoutBalancePaymentInput>
    where?: SaleWhereInput
  }

  export type SaleUpdateToOneWithWhereWithoutBalancePaymentInput = {
    where?: SaleWhereInput
    data: XOR<SaleUpdateWithoutBalancePaymentInput, SaleUncheckedUpdateWithoutBalancePaymentInput>
  }

  export type SaleUpdateWithoutBalancePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUpdateManyWithoutSaleNestedInput
    selectedCustomer?: CustomerUpdateOneWithoutSaleNestedInput
    warehouses?: WarehousesUpdateOneWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutBalancePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUncheckedUpdateManyWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type WarehousesUpsertWithoutBalancePaymentInput = {
    update: XOR<WarehousesUpdateWithoutBalancePaymentInput, WarehousesUncheckedUpdateWithoutBalancePaymentInput>
    create: XOR<WarehousesCreateWithoutBalancePaymentInput, WarehousesUncheckedCreateWithoutBalancePaymentInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutBalancePaymentInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutBalancePaymentInput, WarehousesUncheckedUpdateWithoutBalancePaymentInput>
  }

  export type WarehousesUpdateWithoutBalancePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutBalancePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type QuotationItemCreateWithoutQuotationInput = {
    id?: string
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    product?: ProductCreateNestedOneWithoutQuotationItemInput
    Warehouses?: WarehousesCreateNestedOneWithoutQuotationItemInput
  }

  export type QuotationItemUncheckedCreateWithoutQuotationInput = {
    id?: string
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationItemCreateOrConnectWithoutQuotationInput = {
    where: QuotationItemWhereUniqueInput
    create: XOR<QuotationItemCreateWithoutQuotationInput, QuotationItemUncheckedCreateWithoutQuotationInput>
  }

  export type QuotationItemCreateManyQuotationInputEnvelope = {
    data: QuotationItemCreateManyQuotationInput | QuotationItemCreateManyQuotationInput[]
  }

  export type CustomerCreateWithoutQuotationInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Warehouses?: WarehousesCreateNestedOneWithoutCustomerInput
    Sale?: SaleCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutQuotationInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    warehousesId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    Sale?: SaleUncheckedCreateNestedManyWithoutSelectedCustomerInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutCustomerInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutQuotationInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutQuotationInput, CustomerUncheckedCreateWithoutQuotationInput>
  }

  export type WarehousesCreateWithoutQuotationInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutQuotationInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotationItem?: QuotationItemUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutQuotationInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutQuotationInput, WarehousesUncheckedCreateWithoutQuotationInput>
  }

  export type QuotationItemUpsertWithWhereUniqueWithoutQuotationInput = {
    where: QuotationItemWhereUniqueInput
    update: XOR<QuotationItemUpdateWithoutQuotationInput, QuotationItemUncheckedUpdateWithoutQuotationInput>
    create: XOR<QuotationItemCreateWithoutQuotationInput, QuotationItemUncheckedCreateWithoutQuotationInput>
  }

  export type QuotationItemUpdateWithWhereUniqueWithoutQuotationInput = {
    where: QuotationItemWhereUniqueInput
    data: XOR<QuotationItemUpdateWithoutQuotationInput, QuotationItemUncheckedUpdateWithoutQuotationInput>
  }

  export type QuotationItemUpdateManyWithWhereWithoutQuotationInput = {
    where: QuotationItemScalarWhereInput
    data: XOR<QuotationItemUpdateManyMutationInput, QuotationItemUncheckedUpdateManyWithoutQuotationInput>
  }

  export type CustomerUpsertWithoutQuotationInput = {
    update: XOR<CustomerUpdateWithoutQuotationInput, CustomerUncheckedUpdateWithoutQuotationInput>
    create: XOR<CustomerCreateWithoutQuotationInput, CustomerUncheckedCreateWithoutQuotationInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutQuotationInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutQuotationInput, CustomerUncheckedUpdateWithoutQuotationInput>
  }

  export type CustomerUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutCustomerNestedInput
    Sale?: SaleUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    warehousesId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Sale?: SaleUncheckedUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type WarehousesUpsertWithoutQuotationInput = {
    update: XOR<WarehousesUpdateWithoutQuotationInput, WarehousesUncheckedUpdateWithoutQuotationInput>
    create: XOR<WarehousesCreateWithoutQuotationInput, WarehousesUncheckedCreateWithoutQuotationInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutQuotationInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutQuotationInput, WarehousesUncheckedUpdateWithoutQuotationInput>
  }

  export type WarehousesUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type QuotationCreateWithoutQuotationItemsInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    selectedCustomer?: CustomerCreateNestedOneWithoutQuotationInput
    warehouses?: WarehousesCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUncheckedCreateWithoutQuotationItemsInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationCreateOrConnectWithoutQuotationItemsInput = {
    where: QuotationWhereUniqueInput
    create: XOR<QuotationCreateWithoutQuotationItemsInput, QuotationUncheckedCreateWithoutQuotationItemsInput>
  }

  export type ProductCreateWithoutQuotationItemInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    warehouses?: WarehousesCreateNestedOneWithoutProductsInput
    SaleItem?: SaleItemCreateNestedManyWithoutProductInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutQuotationItemInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    SaleItem?: SaleItemUncheckedCreateNestedManyWithoutProductInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutQuotationItemInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutQuotationItemInput, ProductUncheckedCreateWithoutQuotationItemInput>
  }

  export type WarehousesCreateWithoutQuotationItemInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersCreateNestedManyWithoutWarehousesInput
    products?: ProductCreateNestedManyWithoutWarehousesInput
    customer?: CustomerCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemCreateNestedManyWithoutWarehousesInput
    sale?: SaleCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesUncheckedCreateWithoutQuotationItemInput = {
    id?: string
    warehouseCode: string
    name: string
    phoneNumber: string
    email: string
    description?: string | null
    address: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
    users?: usersUncheckedCreateNestedManyWithoutWarehousesInput
    products?: ProductUncheckedCreateNestedManyWithoutWarehousesInput
    customer?: CustomerUncheckedCreateNestedManyWithoutWarehousesInput
    saleItem?: SaleItemUncheckedCreateNestedManyWithoutWarehousesInput
    sale?: SaleUncheckedCreateNestedManyWithoutWarehousesInput
    paymentMethod?: PaymentMethodUncheckedCreateNestedManyWithoutWarehousesInput
    purchase?: PurchaseUncheckedCreateNestedManyWithoutWarehousesInput
    purchaseItem?: PurchaseItemUncheckedCreateNestedManyWithoutWarehousesInput
    supplier?: SupplierUncheckedCreateNestedManyWithoutWarehousesInput
    receiptSettings?: ReceiptSettingsUncheckedCreateNestedManyWithoutWarehousesInput
    balancePayment?: BalancePaymentUncheckedCreateNestedManyWithoutWarehousesInput
    quotation?: QuotationUncheckedCreateNestedManyWithoutWarehousesInput
  }

  export type WarehousesCreateOrConnectWithoutQuotationItemInput = {
    where: WarehousesWhereUniqueInput
    create: XOR<WarehousesCreateWithoutQuotationItemInput, WarehousesUncheckedCreateWithoutQuotationItemInput>
  }

  export type QuotationUpsertWithoutQuotationItemsInput = {
    update: XOR<QuotationUpdateWithoutQuotationItemsInput, QuotationUncheckedUpdateWithoutQuotationItemsInput>
    create: XOR<QuotationCreateWithoutQuotationItemsInput, QuotationUncheckedCreateWithoutQuotationItemsInput>
    where?: QuotationWhereInput
  }

  export type QuotationUpdateToOneWithWhereWithoutQuotationItemsInput = {
    where?: QuotationWhereInput
    data: XOR<QuotationUpdateWithoutQuotationItemsInput, QuotationUncheckedUpdateWithoutQuotationItemsInput>
  }

  export type QuotationUpdateWithoutQuotationItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    selectedCustomer?: CustomerUpdateOneWithoutQuotationNestedInput
    warehouses?: WarehousesUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateWithoutQuotationItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUpsertWithoutQuotationItemInput = {
    update: XOR<ProductUpdateWithoutQuotationItemInput, ProductUncheckedUpdateWithoutQuotationItemInput>
    create: XOR<ProductCreateWithoutQuotationItemInput, ProductUncheckedCreateWithoutQuotationItemInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutQuotationItemInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutQuotationItemInput, ProductUncheckedUpdateWithoutQuotationItemInput>
  }

  export type ProductUpdateWithoutQuotationItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    warehouses?: WarehousesUpdateOneWithoutProductsNestedInput
    SaleItem?: SaleItemUpdateManyWithoutProductNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutQuotationItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    SaleItem?: SaleItemUncheckedUpdateManyWithoutProductNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type WarehousesUpsertWithoutQuotationItemInput = {
    update: XOR<WarehousesUpdateWithoutQuotationItemInput, WarehousesUncheckedUpdateWithoutQuotationItemInput>
    create: XOR<WarehousesCreateWithoutQuotationItemInput, WarehousesUncheckedCreateWithoutQuotationItemInput>
    where?: WarehousesWhereInput
  }

  export type WarehousesUpdateToOneWithWhereWithoutQuotationItemInput = {
    where?: WarehousesWhereInput
    data: XOR<WarehousesUpdateWithoutQuotationItemInput, WarehousesUncheckedUpdateWithoutQuotationItemInput>
  }

  export type WarehousesUpdateWithoutQuotationItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUpdateManyWithoutWarehousesNestedInput
    products?: ProductUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUpdateManyWithoutWarehousesNestedInput
  }

  export type WarehousesUncheckedUpdateWithoutQuotationItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: usersUncheckedUpdateManyWithoutWarehousesNestedInput
    products?: ProductUncheckedUpdateManyWithoutWarehousesNestedInput
    customer?: CustomerUncheckedUpdateManyWithoutWarehousesNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutWarehousesNestedInput
    sale?: SaleUncheckedUpdateManyWithoutWarehousesNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutWarehousesNestedInput
    purchase?: PurchaseUncheckedUpdateManyWithoutWarehousesNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutWarehousesNestedInput
    supplier?: SupplierUncheckedUpdateManyWithoutWarehousesNestedInput
    receiptSettings?: ReceiptSettingsUncheckedUpdateManyWithoutWarehousesNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutWarehousesNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutWarehousesNestedInput
  }

  export type usersCreateManyWarehousesInput = {
    id?: string
    email: string
    userName: string
    phoneNumber: string
    password: string
    role: $Enums.role
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type ProductCreateManyWarehousesInput = {
    id?: string
    name: string
    barcode: string
    wholeSalePrice: number
    retailPrice: number
    cost: number
    quantity: number
    taxRate: number
    unit: $Enums.unit
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type CustomerCreateManyWarehousesInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email?: string | null
    address?: string | null
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SaleItemCreateManyWarehousesInput = {
    id?: string
    saleId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type SaleCreateManyWarehousesInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type PaymentMethodCreateManyWarehousesInput = {
    id?: string
    method: string
    amount: number
    saleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type PurchaseCreateManyWarehousesInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    supplierId?: string | null
    isDeleted?: boolean
  }

  export type PurchaseItemCreateManyWarehousesInput = {
    id?: string
    productId?: string | null
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    sync?: boolean
    syncedAt?: Date | string | null
    purchaseId?: string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type SupplierCreateManyWarehousesInput = {
    id?: string
    name: string
    type: string
    companyName?: string | null
    email: string
    address: string
    phone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type ReceiptSettingsCreateManyWarehousesInput = {
    id?: string
    companyName: string
    businessName: string
    address: string
    city: string
    state: string
    country: string
    phone: string
    email: string
    website: string
    receiptTitle?: string | null
    headerMessage?: string | null
    footerMessage?: string | null
    showLogo?: boolean | null
    logoUrl?: string | null
    showQrCode?: boolean | null
    qrCodeContent?: string | null
    customQrContent?: string | null
    showCustomerInfo?: boolean | null
    showCashierInfo?: boolean | null
    showItemCodes?: boolean | null
    showItemDescriptions?: boolean | null
    showTaxBreakdown?: boolean | null
    showPaymentMethods?: boolean | null
    showBalance?: boolean | null
    showTimestamp?: boolean | null
    use24HourFormat?: boolean | null
    showItemNumbers?: boolean | null
    showRunningTotal?: boolean | null
    paperSize?: string | null
    fontSize?: string | null
    printDensity?: string | null
    lineSpacing?: string | null
    primaryColor?: string | null
    accentColor?: string | null
    fontFamily?: string | null
    printCopyCount?: number | null
    autoPrint?: boolean | null
    language?: string | null
    currency?: string | null
    currencySymbol?: string | null
    currencyPosition?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentCreateManyWarehousesInput = {
    id?: string
    customerId: string
    saleId?: string | null
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationCreateManyWarehousesInput = {
    id?: string
    selectedCustomerId?: string | null
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationItemCreateManyWarehousesInput = {
    id?: string
    quotationId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type usersUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumroleFieldUpdateOperationsInput | $Enums.role
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    SaleItem?: SaleItemUpdateManyWithoutProductNestedInput
    purchaseItem?: PurchaseItemUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    SaleItem?: SaleItemUncheckedUpdateManyWithoutProductNestedInput
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutProductNestedInput
    quotationItem?: QuotationItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    wholeSalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    taxRate?: IntFieldUpdateOperationsInput | number
    unit?: EnumunitFieldUpdateOperationsInput | $Enums.unit
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CustomerUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Sale?: SaleUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Sale?: SaleUncheckedUpdateManyWithoutSelectedCustomerNestedInput
    saleItem?: SaleItemUncheckedUpdateManyWithoutCustomerNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutCustomerNestedInput
    quotation?: QuotationUncheckedUpdateManyWithoutSelectedCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    sale?: SaleUpdateOneWithoutSaleItemsNestedInput
    product?: ProductUpdateOneWithoutSaleItemNestedInput
    Customer?: CustomerUpdateOneWithoutSaleItemNestedInput
  }

  export type SaleItemUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUpdateManyWithoutSaleNestedInput
    selectedCustomer?: CustomerUpdateOneWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUncheckedUpdateManyWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentMethodUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Sale?: SaleUpdateOneWithoutPaymentMethodNestedInput
  }

  export type PaymentMethodUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentMethodUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchaseItem?: PurchaseItemUpdateManyWithoutPurchaseNestedInput
    Supplier?: SupplierUpdateOneWithoutPurchaseNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutPurchaseNestedInput
  }

  export type PurchaseUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplierId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    product?: ProductUpdateOneWithoutPurchaseItemNestedInput
    Purchase?: PurchaseUpdateOneWithoutPurchaseItemNestedInput
  }

  export type PurchaseItemUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SupplierUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchase?: PurchaseUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchase?: PurchaseUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReceiptSettingsUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    receiptTitle?: NullableStringFieldUpdateOperationsInput | string | null
    headerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    footerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    showQrCode?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qrCodeContent?: NullableStringFieldUpdateOperationsInput | string | null
    customQrContent?: NullableStringFieldUpdateOperationsInput | string | null
    showCustomerInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showCashierInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemCodes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemDescriptions?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTaxBreakdown?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showPaymentMethods?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showBalance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTimestamp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    use24HourFormat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemNumbers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showRunningTotal?: NullableBoolFieldUpdateOperationsInput | boolean | null
    paperSize?: NullableStringFieldUpdateOperationsInput | string | null
    fontSize?: NullableStringFieldUpdateOperationsInput | string | null
    printDensity?: NullableStringFieldUpdateOperationsInput | string | null
    lineSpacing?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    accentColor?: NullableStringFieldUpdateOperationsInput | string | null
    fontFamily?: NullableStringFieldUpdateOperationsInput | string | null
    printCopyCount?: NullableIntFieldUpdateOperationsInput | number | null
    autoPrint?: NullableBoolFieldUpdateOperationsInput | boolean | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    currencySymbol?: NullableStringFieldUpdateOperationsInput | string | null
    currencyPosition?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReceiptSettingsUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    receiptTitle?: NullableStringFieldUpdateOperationsInput | string | null
    headerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    footerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    showQrCode?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qrCodeContent?: NullableStringFieldUpdateOperationsInput | string | null
    customQrContent?: NullableStringFieldUpdateOperationsInput | string | null
    showCustomerInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showCashierInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemCodes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemDescriptions?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTaxBreakdown?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showPaymentMethods?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showBalance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTimestamp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    use24HourFormat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemNumbers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showRunningTotal?: NullableBoolFieldUpdateOperationsInput | boolean | null
    paperSize?: NullableStringFieldUpdateOperationsInput | string | null
    fontSize?: NullableStringFieldUpdateOperationsInput | string | null
    printDensity?: NullableStringFieldUpdateOperationsInput | string | null
    lineSpacing?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    accentColor?: NullableStringFieldUpdateOperationsInput | string | null
    fontFamily?: NullableStringFieldUpdateOperationsInput | string | null
    printCopyCount?: NullableIntFieldUpdateOperationsInput | number | null
    autoPrint?: NullableBoolFieldUpdateOperationsInput | boolean | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    currencySymbol?: NullableStringFieldUpdateOperationsInput | string | null
    currencyPosition?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReceiptSettingsUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    receiptTitle?: NullableStringFieldUpdateOperationsInput | string | null
    headerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    footerMessage?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    showQrCode?: NullableBoolFieldUpdateOperationsInput | boolean | null
    qrCodeContent?: NullableStringFieldUpdateOperationsInput | string | null
    customQrContent?: NullableStringFieldUpdateOperationsInput | string | null
    showCustomerInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showCashierInfo?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemCodes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemDescriptions?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTaxBreakdown?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showPaymentMethods?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showBalance?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showTimestamp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    use24HourFormat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showItemNumbers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showRunningTotal?: NullableBoolFieldUpdateOperationsInput | boolean | null
    paperSize?: NullableStringFieldUpdateOperationsInput | string | null
    fontSize?: NullableStringFieldUpdateOperationsInput | string | null
    printDensity?: NullableStringFieldUpdateOperationsInput | string | null
    lineSpacing?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    accentColor?: NullableStringFieldUpdateOperationsInput | string | null
    fontFamily?: NullableStringFieldUpdateOperationsInput | string | null
    printCopyCount?: NullableIntFieldUpdateOperationsInput | number | null
    autoPrint?: NullableBoolFieldUpdateOperationsInput | boolean | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    currencySymbol?: NullableStringFieldUpdateOperationsInput | string | null
    currencyPosition?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    customer?: CustomerUpdateOneRequiredWithoutBalancePaymentNestedInput
    sale?: SaleUpdateOneWithoutBalancePaymentNestedInput
  }

  export type BalancePaymentUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotationItems?: QuotationItemUpdateManyWithoutQuotationNestedInput
    selectedCustomer?: CustomerUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotationItems?: QuotationItemUncheckedUpdateManyWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    selectedCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotation?: QuotationUpdateOneWithoutQuotationItemsNestedInput
    product?: ProductUpdateOneWithoutQuotationItemNestedInput
  }

  export type QuotationItemUncheckedUpdateWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemUncheckedUpdateManyWithoutWarehousesInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemCreateManySaleInput = {
    id?: string
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type PaymentMethodCreateManySaleInput = {
    id?: string
    method: string
    amount: number
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentCreateManySaleInput = {
    id?: string
    customerId: string
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SaleItemUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    product?: ProductUpdateOneWithoutSaleItemNestedInput
    Warehouses?: WarehousesUpdateOneWithoutSaleItemNestedInput
    Customer?: CustomerUpdateOneWithoutSaleItemNestedInput
  }

  export type SaleItemUncheckedUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemUncheckedUpdateManyWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentMethodUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutPaymentMethodNestedInput
  }

  export type PaymentMethodUncheckedUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentMethodUncheckedUpdateManyWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    customer?: CustomerUpdateOneRequiredWithoutBalancePaymentNestedInput
    warehouses?: WarehousesUpdateOneWithoutBalancePaymentNestedInput
  }

  export type BalancePaymentUncheckedUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentUncheckedUpdateManyWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemCreateManyPurchaseInput = {
    id?: string
    productId?: string | null
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type PurchaseItemUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    product?: ProductUpdateOneWithoutPurchaseItemNestedInput
    Warehouses?: WarehousesUpdateOneWithoutPurchaseItemNestedInput
  }

  export type PurchaseItemUncheckedUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemUncheckedUpdateManyWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleCreateManySelectedCustomerInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    invoiceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SaleItemCreateManyCustomerInput = {
    id?: string
    saleId?: string | null
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type BalancePaymentCreateManyCustomerInput = {
    id?: string
    saleId?: string | null
    amount: number
    paymentMethod: string
    receiptNo: string
    notes?: string | null
    warehousesId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationCreateManySelectedCustomerInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    grandTotal: number
    validUntil?: Date | string | null
    status?: string
    convertedToSaleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    quotationNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SaleUpdateWithoutSelectedCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUpdateManyWithoutSaleNestedInput
    warehouses?: WarehousesUpdateOneWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateWithoutSelectedCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    saleItems?: SaleItemUncheckedUpdateManyWithoutSaleNestedInput
    paymentMethod?: PaymentMethodUncheckedUpdateManyWithoutSaleNestedInput
    balancePayment?: BalancePaymentUncheckedUpdateManyWithoutSaleNestedInput
  }

  export type SaleUncheckedUpdateManyWithoutSelectedCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    sale?: SaleUpdateOneWithoutSaleItemsNestedInput
    product?: ProductUpdateOneWithoutSaleItemNestedInput
    Warehouses?: WarehousesUpdateOneWithoutSaleItemNestedInput
  }

  export type SaleItemUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    sale?: SaleUpdateOneWithoutBalancePaymentNestedInput
    warehouses?: WarehousesUpdateOneWithoutBalancePaymentNestedInput
  }

  export type BalancePaymentUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BalancePaymentUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    receiptNo?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationUpdateWithoutSelectedCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotationItems?: QuotationItemUpdateManyWithoutQuotationNestedInput
    warehouses?: WarehousesUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateWithoutSelectedCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotationItems?: QuotationItemUncheckedUpdateManyWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateManyWithoutSelectedCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    convertedToSaleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    quotationNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseCreateManySupplierInput = {
    id?: string
    taxRate: number
    subTotal: number
    notes?: string | null
    amountPaid?: number | null
    grandTotal: number
    paidAmount: number
    balance: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehousesId?: string | null
    referenceNo: string
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type PurchaseUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchaseItem?: PurchaseItemUpdateManyWithoutPurchaseNestedInput
    warehouses?: WarehousesUpdateOneWithoutPurchaseNestedInput
  }

  export type PurchaseUncheckedUpdateWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    purchaseItem?: PurchaseItemUncheckedUpdateManyWithoutPurchaseNestedInput
  }

  export type PurchaseUncheckedUpdateManyWithoutSupplierInput = {
    id?: StringFieldUpdateOperationsInput | string
    taxRate?: FloatFieldUpdateOperationsInput | number
    subTotal?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    amountPaid?: NullableFloatFieldUpdateOperationsInput | number | null
    grandTotal?: FloatFieldUpdateOperationsInput | number
    paidAmount?: FloatFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    referenceNo?: StringFieldUpdateOperationsInput | string
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemCreateManyProductInput = {
    id?: string
    saleId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    customerId?: string | null
    isDeleted?: boolean
  }

  export type PurchaseItemCreateManyProductInput = {
    id?: string
    cost: number
    productName?: string | null
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    profit: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    purchaseId?: string | null
    customRetailPrice?: number | null
    customWholesalePrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type QuotationItemCreateManyProductInput = {
    id?: string
    quotationId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type SaleItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    sale?: SaleUpdateOneWithoutSaleItemsNestedInput
    Warehouses?: WarehousesUpdateOneWithoutSaleItemNestedInput
    Customer?: CustomerUpdateOneWithoutSaleItemNestedInput
  }

  export type SaleItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SaleItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    saleId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Warehouses?: WarehousesUpdateOneWithoutPurchaseItemNestedInput
    Purchase?: PurchaseUpdateOneWithoutPurchaseItemNestedInput
  }

  export type PurchaseItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PurchaseItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
    customRetailPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customWholesalePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    quotation?: QuotationUpdateOneWithoutQuotationItemsNestedInput
    Warehouses?: WarehousesUpdateOneWithoutQuotationItemNestedInput
  }

  export type QuotationItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemCreateManyQuotationInput = {
    id?: string
    productId?: string | null
    productName: string
    cost: number
    selectedPrice: number
    priceType: string
    quantity: number
    discount: number
    total: number
    warehousesId?: string | null
    sync?: boolean
    syncedAt?: Date | string | null
    isDeleted?: boolean
  }

  export type QuotationItemUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    product?: ProductUpdateOneWithoutQuotationItemNestedInput
    Warehouses?: WarehousesUpdateOneWithoutQuotationItemNestedInput
  }

  export type QuotationItemUncheckedUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuotationItemUncheckedUpdateManyWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    productName?: StringFieldUpdateOperationsInput | string
    cost?: FloatFieldUpdateOperationsInput | number
    selectedPrice?: FloatFieldUpdateOperationsInput | number
    priceType?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    discount?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    warehousesId?: NullableStringFieldUpdateOperationsInput | string | null
    sync?: BoolFieldUpdateOperationsInput | boolean
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}