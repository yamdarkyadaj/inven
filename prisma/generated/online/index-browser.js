
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SuperAdmin_onlineScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  email: 'email',
  password: 'password',
  role: 'role',
  lastLogin: 'lastLogin',
  warehousesId: 'warehousesId',
  sync: 'sync',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.Users_onlineScalarFieldEnum = {
  id: 'id',
  email: 'email',
  userName: 'userName',
  phoneNumber: 'phoneNumber',
  password: 'password',
  role: 'role',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.Settings_onlineScalarFieldEnum = {
  setting_id: 'setting_id',
  companyName: 'companyName',
  companyEmail: 'companyEmail',
  phoneNumber: 'phoneNumber',
  websiteURL: 'websiteURL',
  address: 'address',
  logoUrl: 'logoUrl',
  defaultCurrency: 'defaultCurrency',
  taxRate: 'taxRate',
  mode: 'mode',
  itermsPerPage: 'itermsPerPage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.Warehouses_onlineScalarFieldEnum = {
  id: 'id',
  warehouseCode: 'warehouseCode',
  name: 'name',
  phoneNumber: 'phoneNumber',
  email: 'email',
  description: 'description',
  address: 'address',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.Sale_onlineScalarFieldEnum = {
  id: 'id',
  subTotal: 'subTotal',
  notes: 'notes',
  amountPaid: 'amountPaid',
  taxRate: 'taxRate',
  grandTotal: 'grandTotal',
  paidAmount: 'paidAmount',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  invoiceNo: 'invoiceNo',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  customer_onlineId: 'customer_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.SaleItem_onlineScalarFieldEnum = {
  id: 'id',
  productName: 'productName',
  cost: 'cost',
  selectedPrice: 'selectedPrice',
  priceType: 'priceType',
  quantity: 'quantity',
  discount: 'discount',
  total: 'total',
  profit: 'profit',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  sale_onlineId: 'sale_onlineId',
  customer_onlineId: 'customer_onlineId',
  product_onlineId: 'product_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.Purchase_onlineScalarFieldEnum = {
  id: 'id',
  taxRate: 'taxRate',
  subTotal: 'subTotal',
  notes: 'notes',
  amountPaid: 'amountPaid',
  grandTotal: 'grandTotal',
  paidAmount: 'paidAmount',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  referenceNo: 'referenceNo',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  supplier_onlineId: 'supplier_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.PurchaseItem_onlineScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  cost: 'cost',
  selectedPrice: 'selectedPrice',
  productName: 'productName',
  priceType: 'priceType',
  quantity: 'quantity',
  discount: 'discount',
  total: 'total',
  profit: 'profit',
  sync: 'sync',
  syncedAt: 'syncedAt',
  customRetailPrice: 'customRetailPrice',
  customWholesalePrice: 'customWholesalePrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  purchase_onlineId: 'purchase_onlineId',
  product_onlineId: 'product_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.Customer_onlineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  companyName: 'companyName',
  email: 'email',
  address: 'address',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.Supplier_onlineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  companyName: 'companyName',
  email: 'email',
  address: 'address',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.Product_onlineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  barcode: 'barcode',
  wholeSalePrice: 'wholeSalePrice',
  retailPrice: 'retailPrice',
  cost: 'cost',
  quantity: 'quantity',
  taxRate: 'taxRate',
  unit: 'unit',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.PaymentMethod_onlineScalarFieldEnum = {
  id: 'id',
  method: 'method',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  warehouses_onlineId: 'warehouses_onlineId',
  sale_onlineId: 'sale_onlineId',
  isDeleted: 'isDeleted'
};

exports.Prisma.ReceiptSettings_onlineScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  businessName: 'businessName',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  phone: 'phone',
  email: 'email',
  website: 'website',
  receiptTitle: 'receiptTitle',
  headerMessage: 'headerMessage',
  footerMessage: 'footerMessage',
  showLogo: 'showLogo',
  logoUrl: 'logoUrl',
  showQrCode: 'showQrCode',
  qrCodeContent: 'qrCodeContent',
  customQrContent: 'customQrContent',
  showCustomerInfo: 'showCustomerInfo',
  showCashierInfo: 'showCashierInfo',
  showItemCodes: 'showItemCodes',
  showItemDescriptions: 'showItemDescriptions',
  showTaxBreakdown: 'showTaxBreakdown',
  showPaymentMethods: 'showPaymentMethods',
  showBalance: 'showBalance',
  showTimestamp: 'showTimestamp',
  use24HourFormat: 'use24HourFormat',
  showItemNumbers: 'showItemNumbers',
  showRunningTotal: 'showRunningTotal',
  paperSize: 'paperSize',
  fontSize: 'fontSize',
  printDensity: 'printDensity',
  lineSpacing: 'lineSpacing',
  primaryColor: 'primaryColor',
  accentColor: 'accentColor',
  fontFamily: 'fontFamily',
  printCopyCount: 'printCopyCount',
  autoPrint: 'autoPrint',
  language: 'language',
  currency: 'currency',
  currencySymbol: 'currencySymbol',
  currencyPosition: 'currencyPosition',
  warehouses_onlineId: 'warehouses_onlineId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.BalancePayment_onlineScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  saleId: 'saleId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  receiptNo: 'receiptNo',
  notes: 'notes',
  warehousesId: 'warehousesId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.role_online = exports.$Enums.role_online = {
  admin: 'admin',
  sales: 'sales',
  purchase: 'purchase'
};

exports.mode_online = exports.$Enums.mode_online = {
  dark: 'dark',
  light: 'light'
};

exports.unit_online = exports.$Enums.unit_online = {
  kg: 'kg',
  piece: 'piece',
  liter: 'liter',
  meter: 'meter'
};

exports.Prisma.ModelName = {
  superAdmin_online: 'superAdmin_online',
  users_online: 'users_online',
  Settings_online: 'Settings_online',
  Warehouses_online: 'Warehouses_online',
  Sale_online: 'Sale_online',
  SaleItem_online: 'SaleItem_online',
  Purchase_online: 'Purchase_online',
  PurchaseItem_online: 'PurchaseItem_online',
  Customer_online: 'Customer_online',
  Supplier_online: 'Supplier_online',
  Product_online: 'Product_online',
  PaymentMethod_online: 'PaymentMethod_online',
  ReceiptSettings_online: 'ReceiptSettings_online',
  BalancePayment_online: 'BalancePayment_online'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
